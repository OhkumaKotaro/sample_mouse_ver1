
sample_mouse_ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cbc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001ea0  08001ea0  00011ea0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001ef4  08001ef4  00011ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f0  2000000c  08001f08  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001fc  08001f08  000201fc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000175b4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003070  00000000  00000000  000375e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006f3c  00000000  00000000  0003a659  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a38  00000000  00000000  00041598  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c90  00000000  00000000  00041fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000660d  00000000  00000000  00042c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003bf9  00000000  00000000  0004926d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004ce66  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d50  00000000  00000000  0004cee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001e88 	.word	0x08001e88

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001e88 	.word	0x08001e88

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <HAL_InitTick+0x3c>)
{
 8000228:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800022a:	7818      	ldrb	r0, [r3, #0]
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	fbb3 f3f0 	udiv	r3, r3, r0
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <HAL_InitTick+0x40>)
 8000236:	6810      	ldr	r0, [r2, #0]
 8000238:	fbb0 f0f3 	udiv	r0, r0, r3
 800023c:	f000 fa48 	bl	80006d0 <HAL_SYSTICK_Config>
 8000240:	4604      	mov	r4, r0
 8000242:	b958      	cbnz	r0, 800025c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000244:	2d0f      	cmp	r5, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	4602      	mov	r2, r0
 800024a:	4629      	mov	r1, r5
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 f9fe 	bl	8000650 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <HAL_InitTick+0x44>)
 8000256:	4620      	mov	r0, r4
 8000258:	601d      	str	r5, [r3, #0]
 800025a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800025c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800025e:	bd38      	pop	{r3, r4, r5, pc}
 8000260:	20000000 	.word	0x20000000
 8000264:	20000008 	.word	0x20000008
 8000268:	20000004 	.word	0x20000004

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_Init+0x20>)
{
 800026e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000270:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000272:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027a:	f000 f9d7 	bl	800062c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffd0 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000284:	f001 fb78 	bl	8001978 <HAL_MspInit>
}
 8000288:	2000      	movs	r0, #0
 800028a:	bd08      	pop	{r3, pc}
 800028c:	40022000 	.word	0x40022000

08000290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000290:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <HAL_IncTick+0x10>)
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <HAL_IncTick+0x14>)
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	440b      	add	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000028 	.word	0x20000028
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_GetTick+0x8>)
 80002aa:	6818      	ldr	r0, [r3, #0]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000028 	.word	0x20000028

080002b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b4:	b538      	push	{r3, r4, r5, lr}
 80002b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff fff6 	bl	80002a8 <HAL_GetTick>
 80002bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80002c0:	bf1e      	ittt	ne
 80002c2:	4b04      	ldrne	r3, [pc, #16]	; (80002d4 <HAL_Delay+0x20>)
 80002c4:	781b      	ldrbne	r3, [r3, #0]
 80002c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002c8:	f7ff ffee 	bl	80002a8 <HAL_GetTick>
 80002cc:	1b40      	subs	r0, r0, r5
 80002ce:	4284      	cmp	r4, r0
 80002d0:	d8fa      	bhi.n	80002c8 <HAL_Delay+0x14>
  {
  }
}
 80002d2:	bd38      	pop	{r3, r4, r5, pc}
 80002d4:	20000000 	.word	0x20000000

080002d8 <HAL_ADC_ConvCpltCallback>:
 80002d8:	4770      	bx	lr

080002da <HAL_ADC_LevelOutOfWindowCallback>:
 80002da:	4770      	bx	lr

080002dc <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80002dc:	6803      	ldr	r3, [r0, #0]
{
 80002de:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80002e0:	685a      	ldr	r2, [r3, #4]
{
 80002e2:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80002e4:	0690      	lsls	r0, r2, #26
 80002e6:	d527      	bpl.n	8000338 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	0791      	lsls	r1, r2, #30
 80002ec:	d524      	bpl.n	8000338 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002f0:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80002f2:	bf5e      	ittt	pl
 80002f4:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80002f6:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80002fa:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80002fc:	689a      	ldr	r2, [r3, #8]
 80002fe:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000302:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000306:	d110      	bne.n	800032a <HAL_ADC_IRQHandler+0x4e>
 8000308:	68e2      	ldr	r2, [r4, #12]
 800030a:	b972      	cbnz	r2, 800032a <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800030c:	685a      	ldr	r2, [r3, #4]
 800030e:	f022 0220 	bic.w	r2, r2, #32
 8000312:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000314:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800031a:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800031c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800031e:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000320:	bf5e      	ittt	pl
 8000322:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000324:	f043 0301 	orrpl.w	r3, r3, #1
 8000328:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 800032a:	4620      	mov	r0, r4
 800032c:	f7ff ffd4 	bl	80002d8 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000330:	f06f 0212 	mvn.w	r2, #18
 8000334:	6823      	ldr	r3, [r4, #0]
 8000336:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000338:	6823      	ldr	r3, [r4, #0]
 800033a:	685a      	ldr	r2, [r3, #4]
 800033c:	0610      	lsls	r0, r2, #24
 800033e:	d530      	bpl.n	80003a2 <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	0751      	lsls	r1, r2, #29
 8000344:	d52d      	bpl.n	80003a2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000346:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000348:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800034a:	bf5e      	ittt	pl
 800034c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800034e:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000352:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800035a:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 800035e:	d00a      	beq.n	8000376 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000360:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000362:	0550      	lsls	r0, r2, #21
 8000364:	d416      	bmi.n	8000394 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000366:	689a      	ldr	r2, [r3, #8]
 8000368:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800036c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000370:	d110      	bne.n	8000394 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000372:	68e2      	ldr	r2, [r4, #12]
 8000374:	b972      	cbnz	r2, 8000394 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000376:	685a      	ldr	r2, [r3, #4]
 8000378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800037c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800037e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000384:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000388:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800038a:	bf5e      	ittt	pl
 800038c:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800038e:	f043 0301 	orrpl.w	r3, r3, #1
 8000392:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000394:	4620      	mov	r0, r4
 8000396:	f000 f947 	bl	8000628 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800039a:	f06f 020c 	mvn.w	r2, #12
 800039e:	6823      	ldr	r3, [r4, #0]
 80003a0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80003a2:	6823      	ldr	r3, [r4, #0]
 80003a4:	685a      	ldr	r2, [r3, #4]
 80003a6:	0652      	lsls	r2, r2, #25
 80003a8:	d50d      	bpl.n	80003c6 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	07db      	lsls	r3, r3, #31
 80003ae:	d50a      	bpl.n	80003c6 <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80003b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80003b2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80003b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003b8:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80003ba:	f7ff ff8e 	bl	80002da <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80003be:	f06f 0201 	mvn.w	r2, #1
 80003c2:	6823      	ldr	r3, [r4, #0]
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	bd10      	pop	{r4, pc}

080003c8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80003c8:	2300      	movs	r3, #0
{ 
 80003ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80003cc:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003ce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d074      	beq.n	80004c0 <HAL_ADC_ConfigChannel+0xf8>
 80003d6:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80003d8:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80003da:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80003de:	2d06      	cmp	r5, #6
 80003e0:	6802      	ldr	r2, [r0, #0]
 80003e2:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80003e6:	680c      	ldr	r4, [r1, #0]
 80003e8:	d825      	bhi.n	8000436 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80003ea:	442b      	add	r3, r5
 80003ec:	251f      	movs	r5, #31
 80003ee:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80003f0:	3b05      	subs	r3, #5
 80003f2:	409d      	lsls	r5, r3
 80003f4:	ea26 0505 	bic.w	r5, r6, r5
 80003f8:	fa04 f303 	lsl.w	r3, r4, r3
 80003fc:	432b      	orrs	r3, r5
 80003fe:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000400:	2c09      	cmp	r4, #9
 8000402:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000406:	688d      	ldr	r5, [r1, #8]
 8000408:	d92f      	bls.n	800046a <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800040a:	2607      	movs	r6, #7
 800040c:	4423      	add	r3, r4
 800040e:	68d1      	ldr	r1, [r2, #12]
 8000410:	3b1e      	subs	r3, #30
 8000412:	409e      	lsls	r6, r3
 8000414:	ea21 0106 	bic.w	r1, r1, r6
 8000418:	fa05 f303 	lsl.w	r3, r5, r3
 800041c:	430b      	orrs	r3, r1
 800041e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000420:	f1a4 0310 	sub.w	r3, r4, #16
 8000424:	2b01      	cmp	r3, #1
 8000426:	d92b      	bls.n	8000480 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000428:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800042a:	2200      	movs	r2, #0
 800042c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000430:	4618      	mov	r0, r3
 8000432:	b002      	add	sp, #8
 8000434:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000436:	2d0c      	cmp	r5, #12
 8000438:	d80b      	bhi.n	8000452 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800043a:	442b      	add	r3, r5
 800043c:	251f      	movs	r5, #31
 800043e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000440:	3b23      	subs	r3, #35	; 0x23
 8000442:	409d      	lsls	r5, r3
 8000444:	ea26 0505 	bic.w	r5, r6, r5
 8000448:	fa04 f303 	lsl.w	r3, r4, r3
 800044c:	432b      	orrs	r3, r5
 800044e:	6313      	str	r3, [r2, #48]	; 0x30
 8000450:	e7d6      	b.n	8000400 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000452:	442b      	add	r3, r5
 8000454:	251f      	movs	r5, #31
 8000456:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000458:	3b41      	subs	r3, #65	; 0x41
 800045a:	409d      	lsls	r5, r3
 800045c:	ea26 0505 	bic.w	r5, r6, r5
 8000460:	fa04 f303 	lsl.w	r3, r4, r3
 8000464:	432b      	orrs	r3, r5
 8000466:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000468:	e7ca      	b.n	8000400 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800046a:	2607      	movs	r6, #7
 800046c:	6911      	ldr	r1, [r2, #16]
 800046e:	4423      	add	r3, r4
 8000470:	409e      	lsls	r6, r3
 8000472:	ea21 0106 	bic.w	r1, r1, r6
 8000476:	fa05 f303 	lsl.w	r3, r5, r3
 800047a:	430b      	orrs	r3, r1
 800047c:	6113      	str	r3, [r2, #16]
 800047e:	e7cf      	b.n	8000420 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000480:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <HAL_ADC_ConfigChannel+0xfc>)
 8000482:	429a      	cmp	r2, r3
 8000484:	d116      	bne.n	80004b4 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000486:	6893      	ldr	r3, [r2, #8]
 8000488:	021b      	lsls	r3, r3, #8
 800048a:	d4cd      	bmi.n	8000428 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800048c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800048e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000490:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000494:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000496:	d1c7      	bne.n	8000428 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000498:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <HAL_ADC_ConfigChannel+0x100>)
 800049a:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <HAL_ADC_ConfigChannel+0x104>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	fbb3 f2f2 	udiv	r2, r3, r2
 80004a2:	230a      	movs	r3, #10
 80004a4:	4353      	muls	r3, r2
            wait_loop_index--;
 80004a6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80004a8:	9b01      	ldr	r3, [sp, #4]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0bc      	beq.n	8000428 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80004ae:	9b01      	ldr	r3, [sp, #4]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	e7f8      	b.n	80004a6 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80004b6:	f043 0320 	orr.w	r3, r3, #32
 80004ba:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80004bc:	2301      	movs	r3, #1
 80004be:	e7b4      	b.n	800042a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80004c0:	2302      	movs	r3, #2
 80004c2:	e7b5      	b.n	8000430 <HAL_ADC_ConfigChannel+0x68>
 80004c4:	40012400 	.word	0x40012400
 80004c8:	20000008 	.word	0x20000008
 80004cc:	000f4240 	.word	0x000f4240

080004d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80004d0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80004d2:	6803      	ldr	r3, [r0, #0]
{
 80004d4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80004d6:	689a      	ldr	r2, [r3, #8]
 80004d8:	07d2      	lsls	r2, r2, #31
 80004da:	d401      	bmi.n	80004e0 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80004dc:	2000      	movs	r0, #0
 80004de:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80004e0:	689a      	ldr	r2, [r3, #8]
 80004e2:	f022 0201 	bic.w	r2, r2, #1
 80004e6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80004e8:	f7ff fede 	bl	80002a8 <HAL_GetTick>
 80004ec:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80004ee:	6823      	ldr	r3, [r4, #0]
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	07db      	lsls	r3, r3, #31
 80004f4:	d5f2      	bpl.n	80004dc <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80004f6:	f7ff fed7 	bl	80002a8 <HAL_GetTick>
 80004fa:	1b40      	subs	r0, r0, r5
 80004fc:	2802      	cmp	r0, #2
 80004fe:	d9f6      	bls.n	80004ee <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000500:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000502:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000504:	f043 0310 	orr.w	r3, r3, #16
 8000508:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800050a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000512:	bd38      	pop	{r3, r4, r5, pc}

08000514 <HAL_ADC_Init>:
{
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8000516:	4604      	mov	r4, r0
 8000518:	2800      	cmp	r0, #0
 800051a:	d077      	beq.n	800060c <HAL_ADC_Init+0xf8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800051c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800051e:	b923      	cbnz	r3, 800052a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000520:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000522:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000526:	f001 f8cf 	bl	80016c8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800052a:	4620      	mov	r0, r4
 800052c:	f7ff ffd0 	bl	80004d0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000530:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000532:	f013 0310 	ands.w	r3, r3, #16
 8000536:	d16b      	bne.n	8000610 <HAL_ADC_Init+0xfc>
 8000538:	2800      	cmp	r0, #0
 800053a:	d169      	bne.n	8000610 <HAL_ADC_Init+0xfc>
    ADC_STATE_CLR_SET(hadc->State,
 800053c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800053e:	4937      	ldr	r1, [pc, #220]	; (800061c <HAL_ADC_Init+0x108>)
    ADC_STATE_CLR_SET(hadc->State,
 8000540:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8000544:	f022 0202 	bic.w	r2, r2, #2
 8000548:	f042 0202 	orr.w	r2, r2, #2
 800054c:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800054e:	e894 0024 	ldmia.w	r4, {r2, r5}
 8000552:	428a      	cmp	r2, r1
 8000554:	69e1      	ldr	r1, [r4, #28]
 8000556:	d104      	bne.n	8000562 <HAL_ADC_Init+0x4e>
 8000558:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800055c:	bf08      	it	eq
 800055e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000562:	68e6      	ldr	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000564:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 8000568:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800056a:	68a5      	ldr	r5, [r4, #8]
 800056c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000570:	d035      	beq.n	80005de <HAL_ADC_Init+0xca>
 8000572:	2d01      	cmp	r5, #1
 8000574:	bf08      	it	eq
 8000576:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800057a:	6967      	ldr	r7, [r4, #20]
 800057c:	2f01      	cmp	r7, #1
 800057e:	d106      	bne.n	800058e <HAL_ADC_Init+0x7a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000580:	bb7e      	cbnz	r6, 80005e2 <HAL_ADC_Init+0xce>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000582:	69a6      	ldr	r6, [r4, #24]
 8000584:	3e01      	subs	r6, #1
 8000586:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 800058a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800058e:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000590:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000594:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8000598:	ea43 0306 	orr.w	r3, r3, r6
 800059c:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800059e:	6896      	ldr	r6, [r2, #8]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <HAL_ADC_Init+0x10c>)
 80005a2:	ea03 0306 	and.w	r3, r3, r6
 80005a6:	ea43 0301 	orr.w	r3, r3, r1
 80005aa:	6093      	str	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80005ac:	d001      	beq.n	80005b2 <HAL_ADC_Init+0x9e>
 80005ae:	2d01      	cmp	r5, #1
 80005b0:	d120      	bne.n	80005f4 <HAL_ADC_Init+0xe0>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80005b2:	6923      	ldr	r3, [r4, #16]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80005b8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80005ba:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80005be:	432b      	orrs	r3, r5
 80005c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80005c2:	6892      	ldr	r2, [r2, #8]
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_ADC_Init+0x110>)
 80005c6:	4013      	ands	r3, r2
 80005c8:	4299      	cmp	r1, r3
 80005ca:	d115      	bne.n	80005f8 <HAL_ADC_Init+0xe4>
      ADC_CLEAR_ERRORCODE(hadc);
 80005cc:	2300      	movs	r3, #0
 80005ce:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80005d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005d2:	f023 0303 	bic.w	r3, r3, #3
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	62a3      	str	r3, [r4, #40]	; 0x28
 80005dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005de:	462b      	mov	r3, r5
 80005e0:	e7cb      	b.n	800057a <HAL_ADC_Init+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80005e4:	f046 0620 	orr.w	r6, r6, #32
 80005e8:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80005ec:	f046 0601 	orr.w	r6, r6, #1
 80005f0:	62e6      	str	r6, [r4, #44]	; 0x2c
 80005f2:	e7cc      	b.n	800058e <HAL_ADC_Init+0x7a>
  uint32_t tmp_sqr1 = 0U;
 80005f4:	2300      	movs	r3, #0
 80005f6:	e7df      	b.n	80005b8 <HAL_ADC_Init+0xa4>
      ADC_STATE_CLR_SET(hadc->State,
 80005f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005fa:	f023 0312 	bic.w	r3, r3, #18
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000604:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800060c:	2001      	movs	r0, #1
}
 800060e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000610:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	62a3      	str	r3, [r4, #40]	; 0x28
 8000618:	e7f8      	b.n	800060c <HAL_ADC_Init+0xf8>
 800061a:	bf00      	nop
 800061c:	40013c00 	.word	0x40013c00
 8000620:	ffe1f7fd 	.word	0xffe1f7fd
 8000624:	ff1f0efe 	.word	0xff1f0efe

08000628 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000628:	4770      	bx	lr
	...

0800062c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800062e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000632:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000636:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800063a:	041b      	lsls	r3, r3, #16
 800063c:	0c1b      	lsrs	r3, r3, #16
 800063e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000646:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000648:	60d3      	str	r3, [r2, #12]
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	68dc      	ldr	r4, [r3, #12]
 8000656:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000660:	2b04      	cmp	r3, #4
 8000662:	bf28      	it	cs
 8000664:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000666:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066c:	bf98      	it	ls
 800066e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000670:	fa05 f303 	lsl.w	r3, r5, r3
 8000674:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000678:	bf88      	it	hi
 800067a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	4019      	ands	r1, r3
 800067e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000680:	fa05 f404 	lsl.w	r4, r5, r4
 8000684:	3c01      	subs	r4, #1
 8000686:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000688:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068a:	ea42 0201 	orr.w	r2, r2, r1
 800068e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	bfaf      	iteee	ge
 8000694:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	4b06      	ldrlt	r3, [pc, #24]	; (80006b4 <HAL_NVIC_SetPriority+0x64>)
 800069a:	f000 000f 	andlt.w	r0, r0, #15
 800069e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	bfa5      	ittet	ge
 80006a2:	b2d2      	uxtbge	r2, r2
 80006a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006ae:	bd30      	pop	{r4, r5, pc}
 80006b0:	e000ed00 	.word	0xe000ed00
 80006b4:	e000ed14 	.word	0xe000ed14

080006b8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006b8:	2301      	movs	r3, #1
 80006ba:	0942      	lsrs	r2, r0, #5
 80006bc:	f000 001f 	and.w	r0, r0, #31
 80006c0:	fa03 f000 	lsl.w	r0, r3, r0
 80006c4:	4b01      	ldr	r3, [pc, #4]	; (80006cc <HAL_NVIC_EnableIRQ+0x14>)
 80006c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d0:	3801      	subs	r0, #1
 80006d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006d6:	d20a      	bcs.n	80006ee <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006de:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e010 	.word	0xe000e010
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006fe:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	bf0c      	ite	eq
 8000704:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000708:	f022 0204 	bicne.w	r2, r2, #4
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	4770      	bx	lr
 8000710:	e000e010 	.word	0xe000e010

08000714 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000714:	4770      	bx	lr

08000716 <HAL_SYSTICK_IRQHandler>:
{
 8000716:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000718:	f7ff fffc 	bl	8000714 <HAL_SYSTICK_Callback>
 800071c:	bd08      	pop	{r3, pc}
	...

08000720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000724:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000726:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000728:	4f6c      	ldr	r7, [pc, #432]	; (80008dc <HAL_GPIO_Init+0x1bc>)
 800072a:	4b6d      	ldr	r3, [pc, #436]	; (80008e0 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800072c:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 80008e8 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000730:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80008ec <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 8000734:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000738:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800073a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073e:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000742:	45a0      	cmp	r8, r4
 8000744:	f040 8085 	bne.w	8000852 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8000748:	684d      	ldr	r5, [r1, #4]
 800074a:	2d12      	cmp	r5, #18
 800074c:	f000 80b7 	beq.w	80008be <HAL_GPIO_Init+0x19e>
 8000750:	f200 808d 	bhi.w	800086e <HAL_GPIO_Init+0x14e>
 8000754:	2d02      	cmp	r5, #2
 8000756:	f000 80af 	beq.w	80008b8 <HAL_GPIO_Init+0x198>
 800075a:	f200 8081 	bhi.w	8000860 <HAL_GPIO_Init+0x140>
 800075e:	2d00      	cmp	r5, #0
 8000760:	f000 8091 	beq.w	8000886 <HAL_GPIO_Init+0x166>
 8000764:	2d01      	cmp	r5, #1
 8000766:	f000 80a5 	beq.w	80008b4 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800076a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800076e:	2cff      	cmp	r4, #255	; 0xff
 8000770:	bf93      	iteet	ls
 8000772:	4682      	movls	sl, r0
 8000774:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000778:	3d08      	subhi	r5, #8
 800077a:	f8d0 b000 	ldrls.w	fp, [r0]
 800077e:	bf92      	itee	ls
 8000780:	00b5      	lslls	r5, r6, #2
 8000782:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000786:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000788:	fa09 f805 	lsl.w	r8, r9, r5
 800078c:	ea2b 0808 	bic.w	r8, fp, r8
 8000790:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000794:	bf88      	it	hi
 8000796:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800079a:	ea48 0505 	orr.w	r5, r8, r5
 800079e:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007a2:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80007a6:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80007aa:	d052      	beq.n	8000852 <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007ac:	69bd      	ldr	r5, [r7, #24]
 80007ae:	f026 0803 	bic.w	r8, r6, #3
 80007b2:	f045 0501 	orr.w	r5, r5, #1
 80007b6:	61bd      	str	r5, [r7, #24]
 80007b8:	69bd      	ldr	r5, [r7, #24]
 80007ba:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80007be:	f005 0501 	and.w	r5, r5, #1
 80007c2:	9501      	str	r5, [sp, #4]
 80007c4:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80007c8:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007cc:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80007ce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80007d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80007d6:	fa09 f90b 	lsl.w	r9, r9, fp
 80007da:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007de:	4d41      	ldr	r5, [pc, #260]	; (80008e4 <HAL_GPIO_Init+0x1c4>)
 80007e0:	42a8      	cmp	r0, r5
 80007e2:	d071      	beq.n	80008c8 <HAL_GPIO_Init+0x1a8>
 80007e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e8:	42a8      	cmp	r0, r5
 80007ea:	d06f      	beq.n	80008cc <HAL_GPIO_Init+0x1ac>
 80007ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f0:	42a8      	cmp	r0, r5
 80007f2:	d06d      	beq.n	80008d0 <HAL_GPIO_Init+0x1b0>
 80007f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f8:	42a8      	cmp	r0, r5
 80007fa:	d06b      	beq.n	80008d4 <HAL_GPIO_Init+0x1b4>
 80007fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000800:	42a8      	cmp	r0, r5
 8000802:	d069      	beq.n	80008d8 <HAL_GPIO_Init+0x1b8>
 8000804:	4570      	cmp	r0, lr
 8000806:	bf0c      	ite	eq
 8000808:	2505      	moveq	r5, #5
 800080a:	2506      	movne	r5, #6
 800080c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000810:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000814:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000818:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800081a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800081e:	bf14      	ite	ne
 8000820:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000822:	43a5      	biceq	r5, r4
 8000824:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000826:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000828:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800082c:	bf14      	ite	ne
 800082e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000830:	43a5      	biceq	r5, r4
 8000832:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000834:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000836:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800083a:	bf14      	ite	ne
 800083c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800083e:	43a5      	biceq	r5, r4
 8000840:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000842:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000844:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000848:	bf14      	ite	ne
 800084a:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800084c:	ea25 0404 	biceq.w	r4, r5, r4
 8000850:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000852:	3601      	adds	r6, #1
 8000854:	2e10      	cmp	r6, #16
 8000856:	f47f af6d 	bne.w	8000734 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 800085a:	b003      	add	sp, #12
 800085c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000860:	2d03      	cmp	r5, #3
 8000862:	d025      	beq.n	80008b0 <HAL_GPIO_Init+0x190>
 8000864:	2d11      	cmp	r5, #17
 8000866:	d180      	bne.n	800076a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000868:	68ca      	ldr	r2, [r1, #12]
 800086a:	3204      	adds	r2, #4
          break;
 800086c:	e77d      	b.n	800076a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800086e:	4565      	cmp	r5, ip
 8000870:	d009      	beq.n	8000886 <HAL_GPIO_Init+0x166>
 8000872:	d812      	bhi.n	800089a <HAL_GPIO_Init+0x17a>
 8000874:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80008f0 <HAL_GPIO_Init+0x1d0>
 8000878:	454d      	cmp	r5, r9
 800087a:	d004      	beq.n	8000886 <HAL_GPIO_Init+0x166>
 800087c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000880:	454d      	cmp	r5, r9
 8000882:	f47f af72 	bne.w	800076a <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000886:	688a      	ldr	r2, [r1, #8]
 8000888:	b1e2      	cbz	r2, 80008c4 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800088a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800088c:	bf0c      	ite	eq
 800088e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000892:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000896:	2208      	movs	r2, #8
 8000898:	e767      	b.n	800076a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800089a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80008f4 <HAL_GPIO_Init+0x1d4>
 800089e:	454d      	cmp	r5, r9
 80008a0:	d0f1      	beq.n	8000886 <HAL_GPIO_Init+0x166>
 80008a2:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80008a6:	454d      	cmp	r5, r9
 80008a8:	d0ed      	beq.n	8000886 <HAL_GPIO_Init+0x166>
 80008aa:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80008ae:	e7e7      	b.n	8000880 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008b0:	2200      	movs	r2, #0
 80008b2:	e75a      	b.n	800076a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008b4:	68ca      	ldr	r2, [r1, #12]
          break;
 80008b6:	e758      	b.n	800076a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008b8:	68ca      	ldr	r2, [r1, #12]
 80008ba:	3208      	adds	r2, #8
          break;
 80008bc:	e755      	b.n	800076a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008be:	68ca      	ldr	r2, [r1, #12]
 80008c0:	320c      	adds	r2, #12
          break;
 80008c2:	e752      	b.n	800076a <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008c4:	2204      	movs	r2, #4
 80008c6:	e750      	b.n	800076a <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008c8:	2500      	movs	r5, #0
 80008ca:	e79f      	b.n	800080c <HAL_GPIO_Init+0xec>
 80008cc:	2501      	movs	r5, #1
 80008ce:	e79d      	b.n	800080c <HAL_GPIO_Init+0xec>
 80008d0:	2502      	movs	r5, #2
 80008d2:	e79b      	b.n	800080c <HAL_GPIO_Init+0xec>
 80008d4:	2503      	movs	r5, #3
 80008d6:	e799      	b.n	800080c <HAL_GPIO_Init+0xec>
 80008d8:	2504      	movs	r5, #4
 80008da:	e797      	b.n	800080c <HAL_GPIO_Init+0xec>
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010400 	.word	0x40010400
 80008e4:	40010800 	.word	0x40010800
 80008e8:	40011c00 	.word	0x40011c00
 80008ec:	10210000 	.word	0x10210000
 80008f0:	10110000 	.word	0x10110000
 80008f4:	10310000 	.word	0x10310000

080008f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80008f8:	b10a      	cbz	r2, 80008fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008fa:	6101      	str	r1, [r0, #16]
 80008fc:	4770      	bx	lr
 80008fe:	0409      	lsls	r1, r1, #16
 8000900:	e7fb      	b.n	80008fa <HAL_GPIO_WritePin+0x2>
	...

08000904 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000904:	6803      	ldr	r3, [r0, #0]
{
 8000906:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800090a:	07db      	lsls	r3, r3, #31
{
 800090c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800090e:	d410      	bmi.n	8000932 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000910:	682b      	ldr	r3, [r5, #0]
 8000912:	079f      	lsls	r7, r3, #30
 8000914:	d45e      	bmi.n	80009d4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000916:	682b      	ldr	r3, [r5, #0]
 8000918:	0719      	lsls	r1, r3, #28
 800091a:	f100 8095 	bmi.w	8000a48 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800091e:	682b      	ldr	r3, [r5, #0]
 8000920:	075a      	lsls	r2, r3, #29
 8000922:	f100 80bf 	bmi.w	8000aa4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000926:	69ea      	ldr	r2, [r5, #28]
 8000928:	2a00      	cmp	r2, #0
 800092a:	f040 812d 	bne.w	8000b88 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800092e:	2000      	movs	r0, #0
 8000930:	e014      	b.n	800095c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000932:	4c90      	ldr	r4, [pc, #576]	; (8000b74 <HAL_RCC_OscConfig+0x270>)
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	f003 030c 	and.w	r3, r3, #12
 800093a:	2b04      	cmp	r3, #4
 800093c:	d007      	beq.n	800094e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800093e:	6863      	ldr	r3, [r4, #4]
 8000940:	f003 030c 	and.w	r3, r3, #12
 8000944:	2b08      	cmp	r3, #8
 8000946:	d10c      	bne.n	8000962 <HAL_RCC_OscConfig+0x5e>
 8000948:	6863      	ldr	r3, [r4, #4]
 800094a:	03de      	lsls	r6, r3, #15
 800094c:	d509      	bpl.n	8000962 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	039c      	lsls	r4, r3, #14
 8000952:	d5dd      	bpl.n	8000910 <HAL_RCC_OscConfig+0xc>
 8000954:	686b      	ldr	r3, [r5, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1da      	bne.n	8000910 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800095a:	2001      	movs	r0, #1
}
 800095c:	b002      	add	sp, #8
 800095e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000962:	686b      	ldr	r3, [r5, #4]
 8000964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000968:	d110      	bne.n	800098c <HAL_RCC_OscConfig+0x88>
 800096a:	6823      	ldr	r3, [r4, #0]
 800096c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000970:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000972:	f7ff fc99 	bl	80002a8 <HAL_GetTick>
 8000976:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	0398      	lsls	r0, r3, #14
 800097c:	d4c8      	bmi.n	8000910 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800097e:	f7ff fc93 	bl	80002a8 <HAL_GetTick>
 8000982:	1b80      	subs	r0, r0, r6
 8000984:	2864      	cmp	r0, #100	; 0x64
 8000986:	d9f7      	bls.n	8000978 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000988:	2003      	movs	r0, #3
 800098a:	e7e7      	b.n	800095c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800098c:	b99b      	cbnz	r3, 80009b6 <HAL_RCC_OscConfig+0xb2>
 800098e:	6823      	ldr	r3, [r4, #0]
 8000990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000994:	6023      	str	r3, [r4, #0]
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800099e:	f7ff fc83 	bl	80002a8 <HAL_GetTick>
 80009a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	0399      	lsls	r1, r3, #14
 80009a8:	d5b2      	bpl.n	8000910 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009aa:	f7ff fc7d 	bl	80002a8 <HAL_GetTick>
 80009ae:	1b80      	subs	r0, r0, r6
 80009b0:	2864      	cmp	r0, #100	; 0x64
 80009b2:	d9f7      	bls.n	80009a4 <HAL_RCC_OscConfig+0xa0>
 80009b4:	e7e8      	b.n	8000988 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009ba:	6823      	ldr	r3, [r4, #0]
 80009bc:	d103      	bne.n	80009c6 <HAL_RCC_OscConfig+0xc2>
 80009be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c2:	6023      	str	r3, [r4, #0]
 80009c4:	e7d1      	b.n	800096a <HAL_RCC_OscConfig+0x66>
 80009c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ca:	6023      	str	r3, [r4, #0]
 80009cc:	6823      	ldr	r3, [r4, #0]
 80009ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d2:	e7cd      	b.n	8000970 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009d4:	4c67      	ldr	r4, [pc, #412]	; (8000b74 <HAL_RCC_OscConfig+0x270>)
 80009d6:	6863      	ldr	r3, [r4, #4]
 80009d8:	f013 0f0c 	tst.w	r3, #12
 80009dc:	d007      	beq.n	80009ee <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009de:	6863      	ldr	r3, [r4, #4]
 80009e0:	f003 030c 	and.w	r3, r3, #12
 80009e4:	2b08      	cmp	r3, #8
 80009e6:	d110      	bne.n	8000a0a <HAL_RCC_OscConfig+0x106>
 80009e8:	6863      	ldr	r3, [r4, #4]
 80009ea:	03da      	lsls	r2, r3, #15
 80009ec:	d40d      	bmi.n	8000a0a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009ee:	6823      	ldr	r3, [r4, #0]
 80009f0:	079b      	lsls	r3, r3, #30
 80009f2:	d502      	bpl.n	80009fa <HAL_RCC_OscConfig+0xf6>
 80009f4:	692b      	ldr	r3, [r5, #16]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d1af      	bne.n	800095a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009fa:	6823      	ldr	r3, [r4, #0]
 80009fc:	696a      	ldr	r2, [r5, #20]
 80009fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a02:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a06:	6023      	str	r3, [r4, #0]
 8000a08:	e785      	b.n	8000916 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a0a:	692a      	ldr	r2, [r5, #16]
 8000a0c:	4b5a      	ldr	r3, [pc, #360]	; (8000b78 <HAL_RCC_OscConfig+0x274>)
 8000a0e:	b16a      	cbz	r2, 8000a2c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a14:	f7ff fc48 	bl	80002a8 <HAL_GetTick>
 8000a18:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a1a:	6823      	ldr	r3, [r4, #0]
 8000a1c:	079f      	lsls	r7, r3, #30
 8000a1e:	d4ec      	bmi.n	80009fa <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a20:	f7ff fc42 	bl	80002a8 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d9f7      	bls.n	8000a1a <HAL_RCC_OscConfig+0x116>
 8000a2a:	e7ad      	b.n	8000988 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000a2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a2e:	f7ff fc3b 	bl	80002a8 <HAL_GetTick>
 8000a32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	0798      	lsls	r0, r3, #30
 8000a38:	f57f af6d 	bpl.w	8000916 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a3c:	f7ff fc34 	bl	80002a8 <HAL_GetTick>
 8000a40:	1b80      	subs	r0, r0, r6
 8000a42:	2802      	cmp	r0, #2
 8000a44:	d9f6      	bls.n	8000a34 <HAL_RCC_OscConfig+0x130>
 8000a46:	e79f      	b.n	8000988 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a48:	69aa      	ldr	r2, [r5, #24]
 8000a4a:	4c4a      	ldr	r4, [pc, #296]	; (8000b74 <HAL_RCC_OscConfig+0x270>)
 8000a4c:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <HAL_RCC_OscConfig+0x278>)
 8000a4e:	b1da      	cbz	r2, 8000a88 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a54:	f7ff fc28 	bl	80002a8 <HAL_GetTick>
 8000a58:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a5c:	079b      	lsls	r3, r3, #30
 8000a5e:	d50d      	bpl.n	8000a7c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000a60:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a64:	4b46      	ldr	r3, [pc, #280]	; (8000b80 <HAL_RCC_OscConfig+0x27c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a6c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000a6e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000a70:	9b01      	ldr	r3, [sp, #4]
 8000a72:	1e5a      	subs	r2, r3, #1
 8000a74:	9201      	str	r2, [sp, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1f9      	bne.n	8000a6e <HAL_RCC_OscConfig+0x16a>
 8000a7a:	e750      	b.n	800091e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a7c:	f7ff fc14 	bl	80002a8 <HAL_GetTick>
 8000a80:	1b80      	subs	r0, r0, r6
 8000a82:	2802      	cmp	r0, #2
 8000a84:	d9e9      	bls.n	8000a5a <HAL_RCC_OscConfig+0x156>
 8000a86:	e77f      	b.n	8000988 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000a88:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a8a:	f7ff fc0d 	bl	80002a8 <HAL_GetTick>
 8000a8e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a92:	079f      	lsls	r7, r3, #30
 8000a94:	f57f af43 	bpl.w	800091e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a98:	f7ff fc06 	bl	80002a8 <HAL_GetTick>
 8000a9c:	1b80      	subs	r0, r0, r6
 8000a9e:	2802      	cmp	r0, #2
 8000aa0:	d9f6      	bls.n	8000a90 <HAL_RCC_OscConfig+0x18c>
 8000aa2:	e771      	b.n	8000988 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aa4:	4c33      	ldr	r4, [pc, #204]	; (8000b74 <HAL_RCC_OscConfig+0x270>)
 8000aa6:	69e3      	ldr	r3, [r4, #28]
 8000aa8:	00d8      	lsls	r0, r3, #3
 8000aaa:	d424      	bmi.n	8000af6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000aac:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	69e3      	ldr	r3, [r4, #28]
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	61e3      	str	r3, [r4, #28]
 8000ab6:	69e3      	ldr	r3, [r4, #28]
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ac0:	4e30      	ldr	r6, [pc, #192]	; (8000b84 <HAL_RCC_OscConfig+0x280>)
 8000ac2:	6833      	ldr	r3, [r6, #0]
 8000ac4:	05d9      	lsls	r1, r3, #23
 8000ac6:	d518      	bpl.n	8000afa <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac8:	68eb      	ldr	r3, [r5, #12]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d126      	bne.n	8000b1c <HAL_RCC_OscConfig+0x218>
 8000ace:	6a23      	ldr	r3, [r4, #32]
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ad6:	f7ff fbe7 	bl	80002a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ada:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ade:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae0:	6a23      	ldr	r3, [r4, #32]
 8000ae2:	079b      	lsls	r3, r3, #30
 8000ae4:	d53f      	bpl.n	8000b66 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	f43f af1d 	beq.w	8000926 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000aec:	69e3      	ldr	r3, [r4, #28]
 8000aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000af2:	61e3      	str	r3, [r4, #28]
 8000af4:	e717      	b.n	8000926 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000af6:	2700      	movs	r7, #0
 8000af8:	e7e2      	b.n	8000ac0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000afa:	6833      	ldr	r3, [r6, #0]
 8000afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b00:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b02:	f7ff fbd1 	bl	80002a8 <HAL_GetTick>
 8000b06:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b08:	6833      	ldr	r3, [r6, #0]
 8000b0a:	05da      	lsls	r2, r3, #23
 8000b0c:	d4dc      	bmi.n	8000ac8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b0e:	f7ff fbcb 	bl	80002a8 <HAL_GetTick>
 8000b12:	eba0 0008 	sub.w	r0, r0, r8
 8000b16:	2864      	cmp	r0, #100	; 0x64
 8000b18:	d9f6      	bls.n	8000b08 <HAL_RCC_OscConfig+0x204>
 8000b1a:	e735      	b.n	8000988 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b1c:	b9ab      	cbnz	r3, 8000b4a <HAL_RCC_OscConfig+0x246>
 8000b1e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b20:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b24:	f023 0301 	bic.w	r3, r3, #1
 8000b28:	6223      	str	r3, [r4, #32]
 8000b2a:	6a23      	ldr	r3, [r4, #32]
 8000b2c:	f023 0304 	bic.w	r3, r3, #4
 8000b30:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b32:	f7ff fbb9 	bl	80002a8 <HAL_GetTick>
 8000b36:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b38:	6a23      	ldr	r3, [r4, #32]
 8000b3a:	0798      	lsls	r0, r3, #30
 8000b3c:	d5d3      	bpl.n	8000ae6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fbb3 	bl	80002a8 <HAL_GetTick>
 8000b42:	1b80      	subs	r0, r0, r6
 8000b44:	4540      	cmp	r0, r8
 8000b46:	d9f7      	bls.n	8000b38 <HAL_RCC_OscConfig+0x234>
 8000b48:	e71e      	b.n	8000988 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b4a:	2b05      	cmp	r3, #5
 8000b4c:	6a23      	ldr	r3, [r4, #32]
 8000b4e:	d103      	bne.n	8000b58 <HAL_RCC_OscConfig+0x254>
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6223      	str	r3, [r4, #32]
 8000b56:	e7ba      	b.n	8000ace <HAL_RCC_OscConfig+0x1ca>
 8000b58:	f023 0301 	bic.w	r3, r3, #1
 8000b5c:	6223      	str	r3, [r4, #32]
 8000b5e:	6a23      	ldr	r3, [r4, #32]
 8000b60:	f023 0304 	bic.w	r3, r3, #4
 8000b64:	e7b6      	b.n	8000ad4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b66:	f7ff fb9f 	bl	80002a8 <HAL_GetTick>
 8000b6a:	eba0 0008 	sub.w	r0, r0, r8
 8000b6e:	42b0      	cmp	r0, r6
 8000b70:	d9b6      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x1dc>
 8000b72:	e709      	b.n	8000988 <HAL_RCC_OscConfig+0x84>
 8000b74:	40021000 	.word	0x40021000
 8000b78:	42420000 	.word	0x42420000
 8000b7c:	42420480 	.word	0x42420480
 8000b80:	20000008 	.word	0x20000008
 8000b84:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b88:	4c22      	ldr	r4, [pc, #136]	; (8000c14 <HAL_RCC_OscConfig+0x310>)
 8000b8a:	6863      	ldr	r3, [r4, #4]
 8000b8c:	f003 030c 	and.w	r3, r3, #12
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	f43f aee2 	beq.w	800095a <HAL_RCC_OscConfig+0x56>
 8000b96:	2300      	movs	r3, #0
 8000b98:	4e1f      	ldr	r6, [pc, #124]	; (8000c18 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b9a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b9c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b9e:	d12b      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000ba0:	f7ff fb82 	bl	80002a8 <HAL_GetTick>
 8000ba4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	0199      	lsls	r1, r3, #6
 8000baa:	d41f      	bmi.n	8000bec <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bac:	6a2b      	ldr	r3, [r5, #32]
 8000bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb2:	d105      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bb4:	6862      	ldr	r2, [r4, #4]
 8000bb6:	68a9      	ldr	r1, [r5, #8]
 8000bb8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bc0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000bc2:	6862      	ldr	r2, [r4, #4]
 8000bc4:	430b      	orrs	r3, r1
 8000bc6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bce:	2301      	movs	r3, #1
 8000bd0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fb69 	bl	80002a8 <HAL_GetTick>
 8000bd6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	019a      	lsls	r2, r3, #6
 8000bdc:	f53f aea7 	bmi.w	800092e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000be0:	f7ff fb62 	bl	80002a8 <HAL_GetTick>
 8000be4:	1b40      	subs	r0, r0, r5
 8000be6:	2802      	cmp	r0, #2
 8000be8:	d9f6      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x2d4>
 8000bea:	e6cd      	b.n	8000988 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bec:	f7ff fb5c 	bl	80002a8 <HAL_GetTick>
 8000bf0:	1bc0      	subs	r0, r0, r7
 8000bf2:	2802      	cmp	r0, #2
 8000bf4:	d9d7      	bls.n	8000ba6 <HAL_RCC_OscConfig+0x2a2>
 8000bf6:	e6c7      	b.n	8000988 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fb56 	bl	80002a8 <HAL_GetTick>
 8000bfc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	019b      	lsls	r3, r3, #6
 8000c02:	f57f ae94 	bpl.w	800092e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c06:	f7ff fb4f 	bl	80002a8 <HAL_GetTick>
 8000c0a:	1b40      	subs	r0, r0, r5
 8000c0c:	2802      	cmp	r0, #2
 8000c0e:	d9f6      	bls.n	8000bfe <HAL_RCC_OscConfig+0x2fa>
 8000c10:	e6ba      	b.n	8000988 <HAL_RCC_OscConfig+0x84>
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000
 8000c18:	42420060 	.word	0x42420060

08000c1c <HAL_RCC_GetSysClockFreq>:
{
 8000c1c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000c20:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c22:	ac02      	add	r4, sp, #8
 8000c24:	f103 0510 	add.w	r5, r3, #16
 8000c28:	4622      	mov	r2, r4
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	6859      	ldr	r1, [r3, #4]
 8000c2e:	3308      	adds	r3, #8
 8000c30:	c203      	stmia	r2!, {r0, r1}
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	4614      	mov	r4, r2
 8000c36:	d1f7      	bne.n	8000c28 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c38:	2301      	movs	r3, #1
 8000c3a:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c3e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000c40:	4911      	ldr	r1, [pc, #68]	; (8000c88 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c42:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000c46:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c48:	f003 020c 	and.w	r2, r3, #12
 8000c4c:	2a08      	cmp	r2, #8
 8000c4e:	d117      	bne.n	8000c80 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c50:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000c54:	a806      	add	r0, sp, #24
 8000c56:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c58:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c5a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c5e:	d50c      	bpl.n	8000c7a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c60:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c64:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c68:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c6a:	aa06      	add	r2, sp, #24
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c72:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000c76:	b007      	add	sp, #28
 8000c78:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_RCC_GetSysClockFreq+0x74>)
 8000c7c:	4350      	muls	r0, r2
 8000c7e:	e7fa      	b.n	8000c76 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000c82:	e7f8      	b.n	8000c76 <HAL_RCC_GetSysClockFreq+0x5a>
 8000c84:	08001ea0 	.word	0x08001ea0
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	007a1200 	.word	0x007a1200
 8000c90:	003d0900 	.word	0x003d0900

08000c94 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c94:	4a4d      	ldr	r2, [pc, #308]	; (8000dcc <HAL_RCC_ClockConfig+0x138>)
{
 8000c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c9a:	6813      	ldr	r3, [r2, #0]
{
 8000c9c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	428b      	cmp	r3, r1
{
 8000ca4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ca6:	d328      	bcc.n	8000cfa <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ca8:	682a      	ldr	r2, [r5, #0]
 8000caa:	0791      	lsls	r1, r2, #30
 8000cac:	d432      	bmi.n	8000d14 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cae:	07d2      	lsls	r2, r2, #31
 8000cb0:	d438      	bmi.n	8000d24 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cb2:	4a46      	ldr	r2, [pc, #280]	; (8000dcc <HAL_RCC_ClockConfig+0x138>)
 8000cb4:	6813      	ldr	r3, [r2, #0]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	d373      	bcc.n	8000da6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cbe:	682a      	ldr	r2, [r5, #0]
 8000cc0:	4c43      	ldr	r4, [pc, #268]	; (8000dd0 <HAL_RCC_ClockConfig+0x13c>)
 8000cc2:	f012 0f04 	tst.w	r2, #4
 8000cc6:	d179      	bne.n	8000dbc <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc8:	0713      	lsls	r3, r2, #28
 8000cca:	d506      	bpl.n	8000cda <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ccc:	6863      	ldr	r3, [r4, #4]
 8000cce:	692a      	ldr	r2, [r5, #16]
 8000cd0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000cd4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cd8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cda:	f7ff ff9f 	bl	8000c1c <HAL_RCC_GetSysClockFreq>
 8000cde:	6863      	ldr	r3, [r4, #4]
 8000ce0:	4a3c      	ldr	r2, [pc, #240]	; (8000dd4 <HAL_RCC_ClockConfig+0x140>)
 8000ce2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ce6:	5cd3      	ldrb	r3, [r2, r3]
 8000ce8:	40d8      	lsrs	r0, r3
 8000cea:	4b3b      	ldr	r3, [pc, #236]	; (8000dd8 <HAL_RCC_ClockConfig+0x144>)
 8000cec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff fa98 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 8000cf4:	2000      	movs	r0, #0
}
 8000cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cfa:	6813      	ldr	r3, [r2, #0]
 8000cfc:	f023 0307 	bic.w	r3, r3, #7
 8000d00:	430b      	orrs	r3, r1
 8000d02:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d04:	6813      	ldr	r3, [r2, #0]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d0cc      	beq.n	8000ca8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000d0e:	2001      	movs	r0, #1
 8000d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d14:	492e      	ldr	r1, [pc, #184]	; (8000dd0 <HAL_RCC_ClockConfig+0x13c>)
 8000d16:	68a8      	ldr	r0, [r5, #8]
 8000d18:	684b      	ldr	r3, [r1, #4]
 8000d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d1e:	4303      	orrs	r3, r0
 8000d20:	604b      	str	r3, [r1, #4]
 8000d22:	e7c4      	b.n	8000cae <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d24:	686a      	ldr	r2, [r5, #4]
 8000d26:	4c2a      	ldr	r4, [pc, #168]	; (8000dd0 <HAL_RCC_ClockConfig+0x13c>)
 8000d28:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d2c:	d11c      	bne.n	8000d68 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d32:	d0ec      	beq.n	8000d0e <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d34:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d36:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d3a:	f023 0303 	bic.w	r3, r3, #3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000d42:	f7ff fab1 	bl	80002a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d46:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000d48:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d114      	bne.n	8000d78 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d4e:	6863      	ldr	r3, [r4, #4]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d0ac      	beq.n	8000cb2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d58:	f7ff faa6 	bl	80002a8 <HAL_GetTick>
 8000d5c:	1bc0      	subs	r0, r0, r7
 8000d5e:	4540      	cmp	r0, r8
 8000d60:	d9f5      	bls.n	8000d4e <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000d62:	2003      	movs	r0, #3
 8000d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d68:	2a02      	cmp	r2, #2
 8000d6a:	d102      	bne.n	8000d72 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d6c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d70:	e7df      	b.n	8000d32 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d72:	f013 0f02 	tst.w	r3, #2
 8000d76:	e7dc      	b.n	8000d32 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d10f      	bne.n	8000d9c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d7c:	6863      	ldr	r3, [r4, #4]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	d095      	beq.n	8000cb2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d86:	f7ff fa8f 	bl	80002a8 <HAL_GetTick>
 8000d8a:	1bc0      	subs	r0, r0, r7
 8000d8c:	4540      	cmp	r0, r8
 8000d8e:	d9f5      	bls.n	8000d7c <HAL_RCC_ClockConfig+0xe8>
 8000d90:	e7e7      	b.n	8000d62 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d92:	f7ff fa89 	bl	80002a8 <HAL_GetTick>
 8000d96:	1bc0      	subs	r0, r0, r7
 8000d98:	4540      	cmp	r0, r8
 8000d9a:	d8e2      	bhi.n	8000d62 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d9c:	6863      	ldr	r3, [r4, #4]
 8000d9e:	f013 0f0c 	tst.w	r3, #12
 8000da2:	d1f6      	bne.n	8000d92 <HAL_RCC_ClockConfig+0xfe>
 8000da4:	e785      	b.n	8000cb2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da6:	6813      	ldr	r3, [r2, #0]
 8000da8:	f023 0307 	bic.w	r3, r3, #7
 8000dac:	4333      	orrs	r3, r6
 8000dae:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000db0:	6813      	ldr	r3, [r2, #0]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	429e      	cmp	r6, r3
 8000db8:	d1a9      	bne.n	8000d0e <HAL_RCC_ClockConfig+0x7a>
 8000dba:	e780      	b.n	8000cbe <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dbc:	6863      	ldr	r3, [r4, #4]
 8000dbe:	68e9      	ldr	r1, [r5, #12]
 8000dc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	6063      	str	r3, [r4, #4]
 8000dc8:	e77e      	b.n	8000cc8 <HAL_RCC_ClockConfig+0x34>
 8000dca:	bf00      	nop
 8000dcc:	40022000 	.word	0x40022000
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	08001ebd 	.word	0x08001ebd
 8000dd8:	20000008 	.word	0x20000008

08000ddc <HAL_RCC_GetHCLKFreq>:
}
 8000ddc:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008

08000de8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	4a03      	ldr	r2, [pc, #12]	; (8000e04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000df6:	6810      	ldr	r0, [r2, #0]
}    
 8000df8:	40d8      	lsrs	r0, r3
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	08001ecd 	.word	0x08001ecd
 8000e04:	20000008 	.word	0x20000008

08000e08 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000e12:	5cd3      	ldrb	r3, [r2, r3]
 8000e14:	4a03      	ldr	r2, [pc, #12]	; (8000e24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e16:	6810      	ldr	r0, [r2, #0]
} 
 8000e18:	40d8      	lsrs	r0, r3
 8000e1a:	4770      	bx	lr
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	08001ecd 	.word	0x08001ecd
 8000e24:	20000008 	.word	0x20000008

08000e28 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e28:	6803      	ldr	r3, [r0, #0]
{
 8000e2a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e2e:	07d9      	lsls	r1, r3, #31
{
 8000e30:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e32:	d520      	bpl.n	8000e76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e34:	4c35      	ldr	r4, [pc, #212]	; (8000f0c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000e36:	69e3      	ldr	r3, [r4, #28]
 8000e38:	00da      	lsls	r2, r3, #3
 8000e3a:	d432      	bmi.n	8000ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000e3c:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	69e3      	ldr	r3, [r4, #28]
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	61e3      	str	r3, [r4, #28]
 8000e46:	69e3      	ldr	r3, [r4, #28]
 8000e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e50:	4e2f      	ldr	r6, [pc, #188]	; (8000f10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000e52:	6833      	ldr	r3, [r6, #0]
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	d526      	bpl.n	8000ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e58:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e5a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000e5e:	d136      	bne.n	8000ece <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000e60:	6a23      	ldr	r3, [r4, #32]
 8000e62:	686a      	ldr	r2, [r5, #4]
 8000e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e6c:	b11f      	cbz	r7, 8000e76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e6e:	69e3      	ldr	r3, [r4, #28]
 8000e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e74:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000e76:	6828      	ldr	r0, [r5, #0]
 8000e78:	0783      	lsls	r3, r0, #30
 8000e7a:	d506      	bpl.n	8000e8a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000e7c:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000e7e:	68a9      	ldr	r1, [r5, #8]
 8000e80:	6853      	ldr	r3, [r2, #4]
 8000e82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e86:	430b      	orrs	r3, r1
 8000e88:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000e8a:	f010 0010 	ands.w	r0, r0, #16
 8000e8e:	d01b      	beq.n	8000ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000e90:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000e92:	6969      	ldr	r1, [r5, #20]
 8000e94:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000e96:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000e98:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	6053      	str	r3, [r2, #4]
 8000ea0:	e012      	b.n	8000ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000ea2:	2700      	movs	r7, #0
 8000ea4:	e7d4      	b.n	8000e50 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ea6:	6833      	ldr	r3, [r6, #0]
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000eae:	f7ff f9fb 	bl	80002a8 <HAL_GetTick>
 8000eb2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb4:	6833      	ldr	r3, [r6, #0]
 8000eb6:	05d8      	lsls	r0, r3, #23
 8000eb8:	d4ce      	bmi.n	8000e58 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eba:	f7ff f9f5 	bl	80002a8 <HAL_GetTick>
 8000ebe:	eba0 0008 	sub.w	r0, r0, r8
 8000ec2:	2864      	cmp	r0, #100	; 0x64
 8000ec4:	d9f6      	bls.n	8000eb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000ec6:	2003      	movs	r0, #3
}
 8000ec8:	b002      	add	sp, #8
 8000eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ece:	686a      	ldr	r2, [r5, #4]
 8000ed0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d0c3      	beq.n	8000e60 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000edc:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ede:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ee0:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ee2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ee6:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000ee8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000eea:	07d9      	lsls	r1, r3, #31
 8000eec:	d5b8      	bpl.n	8000e60 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000eee:	f7ff f9db 	bl	80002a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ef2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000ef6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef8:	6a23      	ldr	r3, [r4, #32]
 8000efa:	079a      	lsls	r2, r3, #30
 8000efc:	d4b0      	bmi.n	8000e60 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff f9d3 	bl	80002a8 <HAL_GetTick>
 8000f02:	1b80      	subs	r0, r0, r6
 8000f04:	4540      	cmp	r0, r8
 8000f06:	d9f7      	bls.n	8000ef8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000f08:	e7dd      	b.n	8000ec6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40007000 	.word	0x40007000
 8000f14:	42420440 	.word	0x42420440

08000f18 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f18:	6a03      	ldr	r3, [r0, #32]
{
 8000f1a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000f22:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000f24:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000f26:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f28:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000f2a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000f2e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000f30:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000f32:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000f36:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000f38:	4d0e      	ldr	r5, [pc, #56]	; (8000f74 <TIM_OC1_SetConfig+0x5c>)
 8000f3a:	42a8      	cmp	r0, r5
 8000f3c:	d002      	beq.n	8000f44 <TIM_OC1_SetConfig+0x2c>
 8000f3e:	4e0e      	ldr	r6, [pc, #56]	; (8000f78 <TIM_OC1_SetConfig+0x60>)
 8000f40:	42b0      	cmp	r0, r6
 8000f42:	d110      	bne.n	8000f66 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000f44:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000f46:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000f4a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000f4c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8000f4e:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000f52:	d002      	beq.n	8000f5a <TIM_OC1_SetConfig+0x42>
 8000f54:	4d08      	ldr	r5, [pc, #32]	; (8000f78 <TIM_OC1_SetConfig+0x60>)
 8000f56:	42a8      	cmp	r0, r5
 8000f58:	d105      	bne.n	8000f66 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000f5a:	694d      	ldr	r5, [r1, #20]
 8000f5c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000f5e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000f62:	4335      	orrs	r5, r6
 8000f64:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f66:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000f68:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000f6a:	684a      	ldr	r2, [r1, #4]
 8000f6c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000f6e:	6203      	str	r3, [r0, #32]
 8000f70:	bd70      	pop	{r4, r5, r6, pc}
 8000f72:	bf00      	nop
 8000f74:	40012c00 	.word	0x40012c00
 8000f78:	40013400 	.word	0x40013400

08000f7c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f7c:	6a03      	ldr	r3, [r0, #32]
{
 8000f7e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000f86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000f88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000f8a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000f8e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000f92:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000f94:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000f96:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000f9a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000f9e:	4d11      	ldr	r5, [pc, #68]	; (8000fe4 <TIM_OC3_SetConfig+0x68>)
 8000fa0:	42a8      	cmp	r0, r5
 8000fa2:	d003      	beq.n	8000fac <TIM_OC3_SetConfig+0x30>
 8000fa4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000fa8:	42a8      	cmp	r0, r5
 8000faa:	d114      	bne.n	8000fd6 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000fac:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000fae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000fb2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000fb6:	4d0b      	ldr	r5, [pc, #44]	; (8000fe4 <TIM_OC3_SetConfig+0x68>)
    tmpccer &= ~TIM_CCER_CC3NE;
 8000fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000fbc:	42a8      	cmp	r0, r5
 8000fbe:	d003      	beq.n	8000fc8 <TIM_OC3_SetConfig+0x4c>
 8000fc0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000fc4:	42a8      	cmp	r0, r5
 8000fc6:	d106      	bne.n	8000fd6 <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000fc8:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000fca:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000fcc:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000fd0:	4335      	orrs	r5, r6
 8000fd2:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000fd6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000fd8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000fda:	684a      	ldr	r2, [r1, #4]
 8000fdc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000fde:	6203      	str	r3, [r0, #32]
 8000fe0:	bd70      	pop	{r4, r5, r6, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40012c00 	.word	0x40012c00

08000fe8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000fe8:	6a03      	ldr	r3, [r0, #32]
{
 8000fea:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ff0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ff2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ff4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000ff6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ff8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000ffa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ffe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001002:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001008:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800100c:	4d08      	ldr	r5, [pc, #32]	; (8001030 <TIM_OC4_SetConfig+0x48>)
 800100e:	42a8      	cmp	r0, r5
 8001010:	d003      	beq.n	800101a <TIM_OC4_SetConfig+0x32>
 8001012:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001016:	42a8      	cmp	r0, r5
 8001018:	d104      	bne.n	8001024 <TIM_OC4_SetConfig+0x3c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800101a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800101c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001020:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001024:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001026:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001028:	684a      	ldr	r2, [r1, #4]
 800102a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800102c:	6203      	str	r3, [r0, #32]
 800102e:	bd30      	pop	{r4, r5, pc}
 8001030:	40012c00 	.word	0x40012c00

08001034 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001034:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001038:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800103a:	2b01      	cmp	r3, #1
 800103c:	f04f 0302 	mov.w	r3, #2
 8001040:	d01c      	beq.n	800107c <HAL_TIM_ConfigClockSource+0x48>
 8001042:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001044:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001048:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800104a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800104e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001050:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001054:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001058:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800105a:	680a      	ldr	r2, [r1, #0]
 800105c:	2a40      	cmp	r2, #64	; 0x40
 800105e:	d079      	beq.n	8001154 <HAL_TIM_ConfigClockSource+0x120>
 8001060:	d819      	bhi.n	8001096 <HAL_TIM_ConfigClockSource+0x62>
 8001062:	2a10      	cmp	r2, #16
 8001064:	f000 8093 	beq.w	800118e <HAL_TIM_ConfigClockSource+0x15a>
 8001068:	d80a      	bhi.n	8001080 <HAL_TIM_ConfigClockSource+0x4c>
 800106a:	2a00      	cmp	r2, #0
 800106c:	f000 8089 	beq.w	8001182 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001070:	2301      	movs	r3, #1
 8001072:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001076:	2300      	movs	r3, #0
 8001078:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800107c:	4618      	mov	r0, r3
}
 800107e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001080:	2a20      	cmp	r2, #32
 8001082:	f000 808a 	beq.w	800119a <HAL_TIM_ConfigClockSource+0x166>
 8001086:	2a30      	cmp	r2, #48	; 0x30
 8001088:	d1f2      	bne.n	8001070 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800108a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800108c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001090:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001094:	e036      	b.n	8001104 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001096:	2a70      	cmp	r2, #112	; 0x70
 8001098:	d036      	beq.n	8001108 <HAL_TIM_ConfigClockSource+0xd4>
 800109a:	d81b      	bhi.n	80010d4 <HAL_TIM_ConfigClockSource+0xa0>
 800109c:	2a50      	cmp	r2, #80	; 0x50
 800109e:	d042      	beq.n	8001126 <HAL_TIM_ConfigClockSource+0xf2>
 80010a0:	2a60      	cmp	r2, #96	; 0x60
 80010a2:	d1e5      	bne.n	8001070 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010a4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80010a6:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010a8:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80010ac:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010ae:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010b0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80010b2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80010b4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80010b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80010bc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80010c0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80010c4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80010c6:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80010c8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80010ce:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80010d2:	e017      	b.n	8001104 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80010d4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80010d8:	d011      	beq.n	80010fe <HAL_TIM_ConfigClockSource+0xca>
 80010da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80010de:	d1c7      	bne.n	8001070 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80010e0:	688a      	ldr	r2, [r1, #8]
 80010e2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80010e4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80010e6:	68c9      	ldr	r1, [r1, #12]
 80010e8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80010ea:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80010ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010f2:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80010f4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010fc:	e002      	b.n	8001104 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	e7b3      	b.n	8001070 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001108:	688a      	ldr	r2, [r1, #8]
 800110a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800110c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800110e:	68c9      	ldr	r1, [r1, #12]
 8001110:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001112:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001116:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800111a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800111c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800111e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001120:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001124:	e7ee      	b.n	8001104 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001126:	684c      	ldr	r4, [r1, #4]
 8001128:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800112a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800112c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800112e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001132:	f025 0501 	bic.w	r5, r5, #1
 8001136:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001138:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800113a:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800113c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001140:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001144:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001146:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001148:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800114a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800114e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001152:	e7d7      	b.n	8001104 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001154:	684c      	ldr	r4, [r1, #4]
 8001156:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001158:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800115a:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800115c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001160:	f025 0501 	bic.w	r5, r5, #1
 8001164:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001166:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001168:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800116a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800116e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001174:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001176:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001178:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800117c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001180:	e7c0      	b.n	8001104 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001182:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001184:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001188:	f042 0207 	orr.w	r2, r2, #7
 800118c:	e7ba      	b.n	8001104 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800118e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001190:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001194:	f042 0217 	orr.w	r2, r2, #23
 8001198:	e7b4      	b.n	8001104 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800119a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800119c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80011a0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80011a4:	e7ae      	b.n	8001104 <HAL_TIM_ConfigClockSource+0xd0>
	...

080011a8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011a8:	4a24      	ldr	r2, [pc, #144]	; (800123c <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 80011aa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011ac:	4290      	cmp	r0, r2
 80011ae:	d012      	beq.n	80011d6 <TIM_Base_SetConfig+0x2e>
 80011b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011b4:	4290      	cmp	r0, r2
 80011b6:	d00e      	beq.n	80011d6 <TIM_Base_SetConfig+0x2e>
 80011b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011bc:	d00b      	beq.n	80011d6 <TIM_Base_SetConfig+0x2e>
 80011be:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80011c2:	4290      	cmp	r0, r2
 80011c4:	d007      	beq.n	80011d6 <TIM_Base_SetConfig+0x2e>
 80011c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ca:	4290      	cmp	r0, r2
 80011cc:	d003      	beq.n	80011d6 <TIM_Base_SetConfig+0x2e>
 80011ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011d2:	4290      	cmp	r0, r2
 80011d4:	d11d      	bne.n	8001212 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80011d6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80011dc:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <TIM_Base_SetConfig+0x94>)
 80011e0:	4290      	cmp	r0, r2
 80011e2:	d012      	beq.n	800120a <TIM_Base_SetConfig+0x62>
 80011e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011e8:	4290      	cmp	r0, r2
 80011ea:	d00e      	beq.n	800120a <TIM_Base_SetConfig+0x62>
 80011ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011f0:	d00b      	beq.n	800120a <TIM_Base_SetConfig+0x62>
 80011f2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80011f6:	4290      	cmp	r0, r2
 80011f8:	d007      	beq.n	800120a <TIM_Base_SetConfig+0x62>
 80011fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011fe:	4290      	cmp	r0, r2
 8001200:	d003      	beq.n	800120a <TIM_Base_SetConfig+0x62>
 8001202:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001206:	4290      	cmp	r0, r2
 8001208:	d103      	bne.n	8001212 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800120a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800120c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001210:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001212:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001218:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800121a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800121c:	688b      	ldr	r3, [r1, #8]
 800121e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001220:	680b      	ldr	r3, [r1, #0]
 8001222:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <TIM_Base_SetConfig+0x94>)
 8001226:	4298      	cmp	r0, r3
 8001228:	d003      	beq.n	8001232 <TIM_Base_SetConfig+0x8a>
 800122a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800122e:	4298      	cmp	r0, r3
 8001230:	d101      	bne.n	8001236 <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 8001232:	690b      	ldr	r3, [r1, #16]
 8001234:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001236:	2301      	movs	r3, #1
 8001238:	6143      	str	r3, [r0, #20]
 800123a:	4770      	bx	lr
 800123c:	40012c00 	.word	0x40012c00

08001240 <HAL_TIM_Base_Init>:
{
 8001240:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001242:	4604      	mov	r4, r0
 8001244:	b1a0      	cbz	r0, 8001270 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001246:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800124a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800124e:	b91b      	cbnz	r3, 8001258 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001250:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001254:	f000 fc7a 	bl	8001b4c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001258:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800125a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800125c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001260:	1d21      	adds	r1, r4, #4
 8001262:	f7ff ffa1 	bl	80011a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001266:	2301      	movs	r3, #1
  return HAL_OK;
 8001268:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800126a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800126e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
}
 8001272:	bd10      	pop	{r4, pc}

08001274 <HAL_TIM_PWM_Init>:
{
 8001274:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001276:	4604      	mov	r4, r0
 8001278:	b1a0      	cbz	r0, 80012a4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800127a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800127e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001282:	b91b      	cbnz	r3, 800128c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001284:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001288:	f000 fc2c 	bl	8001ae4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800128c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800128e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001290:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001294:	1d21      	adds	r1, r4, #4
 8001296:	f7ff ff87 	bl	80011a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800129a:	2301      	movs	r3, #1
  return HAL_OK;
 800129c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800129e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80012a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012a4:	2001      	movs	r0, #1
}
 80012a6:	bd10      	pop	{r4, pc}

080012a8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012a8:	6a03      	ldr	r3, [r0, #32]
{
 80012aa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012ac:	f023 0310 	bic.w	r3, r3, #16
 80012b0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80012b2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80012b4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80012b6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80012b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80012ba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80012be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80012c2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80012c4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80012c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80012cc:	4d10      	ldr	r5, [pc, #64]	; (8001310 <TIM_OC2_SetConfig+0x68>)
 80012ce:	42a8      	cmp	r0, r5
 80012d0:	d003      	beq.n	80012da <TIM_OC2_SetConfig+0x32>
 80012d2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80012d6:	42a8      	cmp	r0, r5
 80012d8:	d114      	bne.n	8001304 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80012da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80012dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80012e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80012e4:	4d0a      	ldr	r5, [pc, #40]	; (8001310 <TIM_OC2_SetConfig+0x68>)
    tmpccer &= ~TIM_CCER_CC2NE;
 80012e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80012ea:	42a8      	cmp	r0, r5
 80012ec:	d003      	beq.n	80012f6 <TIM_OC2_SetConfig+0x4e>
 80012ee:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80012f2:	42a8      	cmp	r0, r5
 80012f4:	d106      	bne.n	8001304 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80012f6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80012f8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80012fa:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80012fe:	4335      	orrs	r5, r6
 8001300:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001304:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001306:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001308:	684a      	ldr	r2, [r1, #4]
 800130a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800130c:	6203      	str	r3, [r0, #32]
 800130e:	bd70      	pop	{r4, r5, r6, pc}
 8001310:	40012c00 	.word	0x40012c00

08001314 <HAL_TIM_PWM_ConfigChannel>:
{
 8001314:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001316:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800131a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800131c:	2b01      	cmp	r3, #1
 800131e:	f04f 0002 	mov.w	r0, #2
 8001322:	d025      	beq.n	8001370 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001324:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001326:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800132a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800132e:	2a0c      	cmp	r2, #12
 8001330:	d818      	bhi.n	8001364 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001332:	e8df f002 	tbb	[pc, r2]
 8001336:	1707      	.short	0x1707
 8001338:	171e1717 	.word	0x171e1717
 800133c:	172f1717 	.word	0x172f1717
 8001340:	1717      	.short	0x1717
 8001342:	40          	.byte	0x40
 8001343:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001344:	6820      	ldr	r0, [r4, #0]
 8001346:	f7ff fde7 	bl	8000f18 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800134a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800134c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	f042 0208 	orr.w	r2, r2, #8
 8001354:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001356:	699a      	ldr	r2, [r3, #24]
 8001358:	f022 0204 	bic.w	r2, r2, #4
 800135c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001362:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001364:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001366:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001368:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800136c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001370:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001372:	6820      	ldr	r0, [r4, #0]
 8001374:	f7ff ff98 	bl	80012a8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001378:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800137a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800137c:	699a      	ldr	r2, [r3, #24]
 800137e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001384:	699a      	ldr	r2, [r3, #24]
 8001386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800138a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001392:	e7e6      	b.n	8001362 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001394:	6820      	ldr	r0, [r4, #0]
 8001396:	f7ff fdf1 	bl	8000f7c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800139a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800139c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800139e:	69da      	ldr	r2, [r3, #28]
 80013a0:	f042 0208 	orr.w	r2, r2, #8
 80013a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80013a6:	69da      	ldr	r2, [r3, #28]
 80013a8:	f022 0204 	bic.w	r2, r2, #4
 80013ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80013ae:	69da      	ldr	r2, [r3, #28]
 80013b0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80013b2:	61da      	str	r2, [r3, #28]
    break;
 80013b4:	e7d6      	b.n	8001364 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80013b6:	6820      	ldr	r0, [r4, #0]
 80013b8:	f7ff fe16 	bl	8000fe8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80013bc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80013be:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80013c0:	69da      	ldr	r2, [r3, #28]
 80013c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80013c8:	69da      	ldr	r2, [r3, #28]
 80013ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80013d0:	69da      	ldr	r2, [r3, #28]
 80013d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013d6:	e7ec      	b.n	80013b2 <HAL_TIM_PWM_ConfigChannel+0x9e>

080013d8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80013d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80013dc:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80013de:	2b01      	cmp	r3, #1
 80013e0:	f04f 0302 	mov.w	r3, #2
 80013e4:	d018      	beq.n	8001418 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80013e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013ea:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80013ec:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013ee:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80013f0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013f6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4322      	orrs	r2, r4
 80013fc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001404:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	430a      	orrs	r2, r1
 800140a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800140c:	2301      	movs	r3, #1
 800140e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001412:	2300      	movs	r3, #0
 8001414:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001418:	4618      	mov	r0, r3

  return HAL_OK;
}
 800141a:	bd10      	pop	{r4, pc}

0800141c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800141c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001420:	6805      	ldr	r5, [r0, #0]
 8001422:	68c2      	ldr	r2, [r0, #12]
 8001424:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001426:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001428:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800142c:	4313      	orrs	r3, r2
 800142e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001430:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001432:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001434:	430b      	orrs	r3, r1
 8001436:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001438:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800143c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001440:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001442:	4313      	orrs	r3, r2
 8001444:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001446:	696b      	ldr	r3, [r5, #20]
 8001448:	6982      	ldr	r2, [r0, #24]
 800144a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800144e:	4313      	orrs	r3, r2
 8001450:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001452:	4b40      	ldr	r3, [pc, #256]	; (8001554 <UART_SetConfig+0x138>)
{
 8001454:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001456:	429d      	cmp	r5, r3
 8001458:	f04f 0419 	mov.w	r4, #25
 800145c:	d146      	bne.n	80014ec <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800145e:	f7ff fcd3 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 8001462:	fb04 f300 	mul.w	r3, r4, r0
 8001466:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800146a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800146e:	00b6      	lsls	r6, r6, #2
 8001470:	fbb3 f3f6 	udiv	r3, r3, r6
 8001474:	fbb3 f3f8 	udiv	r3, r3, r8
 8001478:	011e      	lsls	r6, r3, #4
 800147a:	f7ff fcc5 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 800147e:	4360      	muls	r0, r4
 8001480:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	fbb0 f7f3 	udiv	r7, r0, r3
 800148a:	f7ff fcbd 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 800148e:	4360      	muls	r0, r4
 8001490:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	fbb0 f3f3 	udiv	r3, r0, r3
 800149a:	fbb3 f3f8 	udiv	r3, r3, r8
 800149e:	fb08 7313 	mls	r3, r8, r3, r7
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	3332      	adds	r3, #50	; 0x32
 80014a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80014aa:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80014ae:	f7ff fcab 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 80014b2:	4360      	muls	r0, r4
 80014b4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80014b8:	0092      	lsls	r2, r2, #2
 80014ba:	fbb0 faf2 	udiv	sl, r0, r2
 80014be:	f7ff fca3 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014c2:	4360      	muls	r0, r4
 80014c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ce:	fbb3 f3f8 	udiv	r3, r3, r8
 80014d2:	fb08 a313 	mls	r3, r8, r3, sl
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	3332      	adds	r3, #50	; 0x32
 80014da:	fbb3 f3f8 	udiv	r3, r3, r8
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	433b      	orrs	r3, r7
 80014e4:	4433      	add	r3, r6
 80014e6:	60ab      	str	r3, [r5, #8]
 80014e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014ec:	f7ff fc7c 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 80014f0:	fb04 f300 	mul.w	r3, r4, r0
 80014f4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80014f8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80014fc:	00b6      	lsls	r6, r6, #2
 80014fe:	fbb3 f3f6 	udiv	r3, r3, r6
 8001502:	fbb3 f3f8 	udiv	r3, r3, r8
 8001506:	011e      	lsls	r6, r3, #4
 8001508:	f7ff fc6e 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 800150c:	4360      	muls	r0, r4
 800150e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	fbb0 f7f3 	udiv	r7, r0, r3
 8001518:	f7ff fc66 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 800151c:	4360      	muls	r0, r4
 800151e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	fbb0 f3f3 	udiv	r3, r0, r3
 8001528:	fbb3 f3f8 	udiv	r3, r3, r8
 800152c:	fb08 7313 	mls	r3, r8, r3, r7
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	3332      	adds	r3, #50	; 0x32
 8001534:	fbb3 f3f8 	udiv	r3, r3, r8
 8001538:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800153c:	f7ff fc54 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 8001540:	4360      	muls	r0, r4
 8001542:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	fbb0 faf2 	udiv	sl, r0, r2
 800154c:	f7ff fc4c 	bl	8000de8 <HAL_RCC_GetPCLK1Freq>
 8001550:	e7b7      	b.n	80014c2 <UART_SetConfig+0xa6>
 8001552:	bf00      	nop
 8001554:	40013800 	.word	0x40013800

08001558 <HAL_UART_Init>:
{
 8001558:	b510      	push	{r4, lr}
  if(huart == NULL)
 800155a:	4604      	mov	r4, r0
 800155c:	b340      	cbz	r0, 80015b0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800155e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001562:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001566:	b91b      	cbnz	r3, 8001570 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001568:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800156c:	f000 fc16 	bl	8001d9c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001570:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001572:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001574:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001578:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800157a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800157c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001580:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001582:	f7ff ff4b 	bl	800141c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001586:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001588:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001592:	695a      	ldr	r2, [r3, #20]
 8001594:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001598:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015a0:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80015a2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80015a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80015aa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80015ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015b0:	2001      	movs	r0, #1
}
 80015b2:	bd10      	pop	{r4, pc}

080015b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80015b6:	4813      	ldr	r0, [pc, #76]	; (8001604 <MX_ADC1_Init+0x50>)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_ADC1_Init+0x54>)
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 80015be:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015c4:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015c6:	6143      	str	r3, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c8:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015ca:	2301      	movs	r3, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015cc:	61c2      	str	r2, [r0, #28]
  hadc1.Init.NbrOfConversion = 1;
 80015ce:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d0:	f7fe ffa0 	bl	8000514 <HAL_ADC_Init>
 80015d4:	b118      	cbz	r0, 80015de <MX_ADC1_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80015d6:	2145      	movs	r1, #69	; 0x45
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <MX_ADC1_Init+0x58>)
 80015da:	f000 f9cb 	bl	8001974 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 80015de:	230a      	movs	r3, #10
 80015e0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015e6:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e8:	a901      	add	r1, sp, #4
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <MX_ADC1_Init+0x50>)
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ec:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ee:	f7fe feeb 	bl	80003c8 <HAL_ADC_ConfigChannel>
 80015f2:	b118      	cbz	r0, 80015fc <MX_ADC1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 80015f4:	214f      	movs	r1, #79	; 0x4f
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_ADC1_Init+0x58>)
 80015f8:	f000 f9bc 	bl	8001974 <_Error_Handler>
  }

}
 80015fc:	b005      	add	sp, #20
 80015fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001602:	bf00      	nop
 8001604:	2000005c 	.word	0x2000005c
 8001608:	40012400 	.word	0x40012400
 800160c:	08001eb0 	.word	0x08001eb0

08001610 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
 8001612:	4813      	ldr	r0, [pc, #76]	; (8001660 <MX_ADC2_Init+0x50>)
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_ADC2_Init+0x54>)
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001616:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc2.Instance = ADC2;
 800161a:	6003      	str	r3, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001620:	60c3      	str	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001622:	6143      	str	r3, [r0, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001624:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001626:	2301      	movs	r3, #1
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001628:	61c2      	str	r2, [r0, #28]
  hadc2.Init.NbrOfConversion = 1;
 800162a:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800162c:	f7fe ff72 	bl	8000514 <HAL_ADC_Init>
 8001630:	b118      	cbz	r0, 800163a <MX_ADC2_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001632:	2163      	movs	r1, #99	; 0x63
 8001634:	480c      	ldr	r0, [pc, #48]	; (8001668 <MX_ADC2_Init+0x58>)
 8001636:	f000 f99d 	bl	8001974 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 800163a:	2304      	movs	r3, #4
 800163c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800163e:	2301      	movs	r3, #1
 8001640:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001642:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001644:	a901      	add	r1, sp, #4
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <MX_ADC2_Init+0x50>)
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001648:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800164a:	f7fe febd 	bl	80003c8 <HAL_ADC_ConfigChannel>
 800164e:	b118      	cbz	r0, 8001658 <MX_ADC2_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001650:	216d      	movs	r1, #109	; 0x6d
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_ADC2_Init+0x58>)
 8001654:	f000 f98e 	bl	8001974 <_Error_Handler>
  }

}
 8001658:	b005      	add	sp, #20
 800165a:	f85d fb04 	ldr.w	pc, [sp], #4
 800165e:	bf00      	nop
 8001660:	2000002c 	.word	0x2000002c
 8001664:	40012800 	.word	0x40012800
 8001668:	08001eb0 	.word	0x08001eb0

0800166c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800166c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
 800166e:	4813      	ldr	r0, [pc, #76]	; (80016bc <MX_ADC3_Init+0x50>)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_ADC3_Init+0x54>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001672:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc3.Instance = ADC3;
 8001676:	6003      	str	r3, [r0, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	6083      	str	r3, [r0, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800167c:	60c3      	str	r3, [r0, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800167e:	6143      	str	r3, [r0, #20]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001680:	6043      	str	r3, [r0, #4]
  hadc3.Init.NbrOfConversion = 1;
 8001682:	2301      	movs	r3, #1
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001684:	61c2      	str	r2, [r0, #28]
  hadc3.Init.NbrOfConversion = 1;
 8001686:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001688:	f7fe ff44 	bl	8000514 <HAL_ADC_Init>
 800168c:	b118      	cbz	r0, 8001696 <MX_ADC3_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800168e:	2181      	movs	r1, #129	; 0x81
 8001690:	480c      	ldr	r0, [pc, #48]	; (80016c4 <MX_ADC3_Init+0x58>)
 8001692:	f000 f96f 	bl	8001974 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_12;
 8001696:	230c      	movs	r3, #12
 8001698:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800169a:	2301      	movs	r3, #1
 800169c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800169e:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016a0:	a901      	add	r1, sp, #4
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <MX_ADC3_Init+0x50>)
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016a4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016a6:	f7fe fe8f 	bl	80003c8 <HAL_ADC_ConfigChannel>
 80016aa:	b118      	cbz	r0, 80016b4 <MX_ADC3_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 80016ac:	218b      	movs	r1, #139	; 0x8b
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_ADC3_Init+0x58>)
 80016b0:	f000 f960 	bl	8001974 <_Error_Handler>
  }

}
 80016b4:	b005      	add	sp, #20
 80016b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80016ba:	bf00      	nop
 80016bc:	2000008c 	.word	0x2000008c
 80016c0:	40013c00 	.word	0x40013c00
 80016c4:	08001eb0 	.word	0x08001eb0

080016c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016c8:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80016ca:	6803      	ldr	r3, [r0, #0]
 80016cc:	4a24      	ldr	r2, [pc, #144]	; (8001760 <HAL_ADC_MspInit+0x98>)
{
 80016ce:	b089      	sub	sp, #36	; 0x24
  if(adcHandle->Instance==ADC1)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d113      	bne.n	80016fc <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <HAL_ADC_MspInit+0x9c>)
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d6:	4824      	ldr	r0, [pc, #144]	; (8001768 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016da:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016e0:	619a      	str	r2, [r3, #24]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ec:	2303      	movs	r3, #3
 80016ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f0:	9305      	str	r3, [sp, #20]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f7ff f815 	bl	8000720 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80016f6:	b009      	add	sp, #36	; 0x24
 80016f8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(adcHandle->Instance==ADC2)
 80016fc:	4a1b      	ldr	r2, [pc, #108]	; (800176c <HAL_ADC_MspInit+0xa4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d110      	bne.n	8001724 <HAL_ADC_MspInit+0x5c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_ADC_MspInit+0x9c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001706:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	4819      	ldr	r0, [pc, #100]	; (8001770 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800170a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800170e:	619a      	str	r2, [r3, #24]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800171a:	2310      	movs	r3, #16
 800171c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171e:	2303      	movs	r3, #3
 8001720:	9305      	str	r3, [sp, #20]
 8001722:	e7e6      	b.n	80016f2 <HAL_ADC_MspInit+0x2a>
  else if(adcHandle->Instance==ADC3)
 8001724:	4a13      	ldr	r2, [pc, #76]	; (8001774 <HAL_ADC_MspInit+0xac>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d1e5      	bne.n	80016f6 <HAL_ADC_MspInit+0x2e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_ADC_MspInit+0x9c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172c:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC3_CLK_ENABLE();
 800172e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001736:	619a      	str	r2, [r3, #24]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800173e:	9303      	str	r3, [sp, #12]
 8001740:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001742:	230c      	movs	r3, #12
 8001744:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001746:	2303      	movs	r3, #3
 8001748:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174a:	f7fe ffe9 	bl	8000720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	202f      	movs	r0, #47	; 0x2f
 8001752:	4611      	mov	r1, r2
 8001754:	f7fe ff7c 	bl	8000650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001758:	202f      	movs	r0, #47	; 0x2f
 800175a:	f7fe ffad 	bl	80006b8 <HAL_NVIC_EnableIRQ>
}
 800175e:	e7ca      	b.n	80016f6 <HAL_ADC_MspInit+0x2e>
 8001760:	40012400 	.word	0x40012400
 8001764:	40021000 	.word	0x40021000
 8001768:	40011000 	.word	0x40011000
 800176c:	40012800 	.word	0x40012800
 8001770:	40010800 	.word	0x40010800
 8001774:	40013c00 	.word	0x40013c00

08001778 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001778:	4b32      	ldr	r3, [pc, #200]	; (8001844 <MX_GPIO_Init+0xcc>)
{
 800177a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	699a      	ldr	r2, [r3, #24]
{
 8001780:	b088      	sub	sp, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001782:	f042 0210 	orr.w	r2, r2, #16
 8001786:	619a      	str	r2, [r3, #24]
 8001788:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 800178a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001850 <MX_GPIO_Init+0xd8>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	f002 0210 	and.w	r2, r2, #16
 8001792:	9201      	str	r2, [sp, #4]
 8001794:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led3_Pin|led4_Pin, GPIO_PIN_RESET);
 8001798:	4c2b      	ldr	r4, [pc, #172]	; (8001848 <MX_GPIO_Init+0xd0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	f042 0204 	orr.w	r2, r2, #4
 800179e:	619a      	str	r2, [r3, #24]
 80017a0:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ir_led1_Pin|ir_led2_Pin|ir_led3_Pin|ir_led4_Pin, GPIO_PIN_RESET);
 80017a2:	4d2a      	ldr	r5, [pc, #168]	; (800184c <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	f002 0204 	and.w	r2, r2, #4
 80017a8:	9202      	str	r2, [sp, #8]
 80017aa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ac:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 80017ae:	4640      	mov	r0, r8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b0:	f042 0208 	orr.w	r2, r2, #8
 80017b4:	619a      	str	r2, [r3, #24]
 80017b6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 80017b8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 80017c0:	f246 11c0 	movw	r1, #25024	; 0x61c0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 80017c6:	f7ff f897 	bl	80008f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, led3_Pin|led4_Pin, GPIO_PIN_RESET);
 80017ca:	4620      	mov	r0, r4
 80017cc:	2200      	movs	r2, #0
 80017ce:	2103      	movs	r1, #3
 80017d0:	f7ff f892 	bl	80008f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ir_led1_Pin|ir_led2_Pin|ir_led3_Pin|ir_led4_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	4628      	mov	r0, r5
 80017d8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80017dc:	f7ff f88c 	bl	80008f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PC6 PC7 
                           PC8 */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 80017e4:	f246 13c0 	movw	r3, #25024	; 0x61c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e8:	a904      	add	r1, sp, #16
 80017ea:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 80017ec:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ee:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f2:	f7fe ff95 	bl	8000720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = led3_Pin|led4_Pin;
 80017f6:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	a904      	add	r1, sp, #16
 80017fa:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = led3_Pin|led4_Pin;
 80017fc:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = sw3_Pin|sw2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fe:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f7fe ff8c 	bl	8000720 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = sw3_Pin|sw2_Pin;
 8001808:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180c:	a904      	add	r1, sp, #16
 800180e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = sw3_Pin|sw2_Pin;
 8001810:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001812:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001816:	f7fe ff83 	bl	8000720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sw1_Pin;
 800181a:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(sw1_GPIO_Port, &GPIO_InitStruct);
 800181c:	a904      	add	r1, sp, #16
 800181e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = sw1_Pin;
 8001820:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(sw1_GPIO_Port, &GPIO_InitStruct);
 8001826:	f7fe ff7b 	bl	8000720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ir_led1_Pin|ir_led2_Pin|ir_led3_Pin|ir_led4_Pin;
 800182a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	a904      	add	r1, sp, #16
 8001830:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = ir_led1_Pin|ir_led2_Pin|ir_led3_Pin|ir_led4_Pin;
 8001832:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f7fe ff72 	bl	8000720 <HAL_GPIO_Init>

}
 800183c:	b008      	add	sp, #32
 800183e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	40010800 	.word	0x40010800
 800184c:	40010c00 	.word	0x40010c00
 8001850:	40011000 	.word	0x40011000

08001854 <SystemClock_Config>:

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001854:	2310      	movs	r3, #16
{
 8001856:	b530      	push	{r4, r5, lr}
 8001858:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800185a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800185c:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800185e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001860:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001862:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001864:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001868:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800186a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186c:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186e:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001870:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001872:	f7ff f847 	bl	8000904 <HAL_RCC_OscConfig>
 8001876:	b100      	cbz	r0, 800187a <SystemClock_Config+0x26>
 8001878:	e7fe      	b.n	8001878 <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187a:	230f      	movs	r3, #15
 800187c:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800187e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001882:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001884:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001886:	4629      	mov	r1, r5
 8001888:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800188c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800188e:	f7ff fa01 	bl	8000c94 <HAL_RCC_ClockConfig>
 8001892:	b100      	cbz	r0, 8001896 <SystemClock_Config+0x42>
 8001894:	e7fe      	b.n	8001894 <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189a:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800189c:	9406      	str	r4, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800189e:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a0:	f7ff fac2 	bl	8000e28 <HAL_RCCEx_PeriphCLKConfig>
 80018a4:	4604      	mov	r4, r0
 80018a6:	b100      	cbz	r0, 80018aa <SystemClock_Config+0x56>
 80018a8:	e7fe      	b.n	80018a8 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80018aa:	f7ff fa97 	bl	8000ddc <HAL_RCC_GetHCLKFreq>
 80018ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80018b6:	f7fe ff0b 	bl	80006d0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80018ba:	2004      	movs	r0, #4
 80018bc:	f7fe ff1e 	bl	80006fc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80018c0:	4622      	mov	r2, r4
 80018c2:	4621      	mov	r1, r4
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f7fe fec2 	bl	8000650 <HAL_NVIC_SetPriority>
}
 80018cc:	b017      	add	sp, #92	; 0x5c
 80018ce:	bd30      	pop	{r4, r5, pc}

080018d0 <main>:
{
 80018d0:	b508      	push	{r3, lr}
  HAL_Init();
 80018d2:	f7fe fccb 	bl	800026c <HAL_Init>
  SystemClock_Config();
 80018d6:	f7ff ffbd 	bl	8001854 <SystemClock_Config>
  MX_GPIO_Init();
 80018da:	f7ff ff4d 	bl	8001778 <MX_GPIO_Init>
  MX_ADC1_Init();
 80018de:	f7ff fe69 	bl	80015b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018e2:	f7ff fe95 	bl	8001610 <MX_ADC2_Init>
  MX_ADC3_Init();
 80018e6:	f7ff fec1 	bl	800166c <MX_ADC3_Init>
  MX_TIM2_Init();
 80018ea:	f000 f98b 	bl	8001c04 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018ee:	f000 f9c1 	bl	8001c74 <MX_TIM3_Init>
  MX_TIM5_Init();
 80018f2:	f000 f9f9 	bl	8001ce8 <MX_TIM5_Init>
  MX_TIM4_Init();
 80018f6:	f000 f8c1 	bl	8001a7c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80018fa:	f000 fa2f 	bl	8001d5c <MX_USART1_UART_Init>
	  HAL_GPIO_WritePin(led1_GPIO_Port,led1_Pin,1);
 80018fe:	4d1b      	ldr	r5, [pc, #108]	; (800196c <main+0x9c>)
	  HAL_GPIO_WritePin(led3_GPIO_Port,led3_Pin,1);
 8001900:	4c1b      	ldr	r4, [pc, #108]	; (8001970 <main+0xa0>)
	  HAL_GPIO_WritePin(led1_GPIO_Port,led1_Pin,1);
 8001902:	4628      	mov	r0, r5
 8001904:	2201      	movs	r2, #1
 8001906:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800190a:	f7fe fff5 	bl	80008f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led2_GPIO_Port,led2_Pin,1);
 800190e:	4628      	mov	r0, r5
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001916:	f7fe ffef 	bl	80008f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led3_GPIO_Port,led3_Pin,1);
 800191a:	2201      	movs	r2, #1
 800191c:	4620      	mov	r0, r4
 800191e:	4611      	mov	r1, r2
 8001920:	f7fe ffea 	bl	80008f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led4_GPIO_Port,led4_Pin,1);
 8001924:	2201      	movs	r2, #1
 8001926:	2102      	movs	r1, #2
 8001928:	4620      	mov	r0, r4
 800192a:	f7fe ffe5 	bl	80008f8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800192e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001932:	f7fe fcbf 	bl	80002b4 <HAL_Delay>
	  HAL_GPIO_WritePin(led1_GPIO_Port,led1_Pin,0);
 8001936:	4628      	mov	r0, r5
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193e:	f7fe ffdb 	bl	80008f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led2_GPIO_Port,led2_Pin,0);
 8001942:	4628      	mov	r0, r5
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800194a:	f7fe ffd5 	bl	80008f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led3_GPIO_Port,led3_Pin,0);
 800194e:	4620      	mov	r0, r4
 8001950:	2200      	movs	r2, #0
 8001952:	2101      	movs	r1, #1
 8001954:	f7fe ffd0 	bl	80008f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led4_GPIO_Port,led4_Pin,0);
 8001958:	4620      	mov	r0, r4
 800195a:	2200      	movs	r2, #0
 800195c:	2102      	movs	r1, #2
 800195e:	f7fe ffcb 	bl	80008f8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001966:	f7fe fca5 	bl	80002b4 <HAL_Delay>
 800196a:	e7ca      	b.n	8001902 <main+0x32>
 800196c:	40011000 	.word	0x40011000
 8001970:	40010800 	.word	0x40010800

08001974 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001974:	e7fe      	b.n	8001974 <_Error_Handler>
	...

08001978 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_MspInit+0x84>)
{
 800197a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800197c:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197e:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001980:	f042 0201 	orr.w	r2, r2, #1
 8001984:	619a      	str	r2, [r3, #24]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	f7fe fe4c 	bl	800062c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	f06f 000b 	mvn.w	r0, #11
 800199a:	4611      	mov	r1, r2
 800199c:	f7fe fe58 	bl	8000650 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	f06f 000a 	mvn.w	r0, #10
 80019a6:	4611      	mov	r1, r2
 80019a8:	f7fe fe52 	bl	8000650 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f06f 0009 	mvn.w	r0, #9
 80019b2:	4611      	mov	r1, r2
 80019b4:	f7fe fe4c 	bl	8000650 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f06f 0004 	mvn.w	r0, #4
 80019be:	4611      	mov	r1, r2
 80019c0:	f7fe fe46 	bl	8000650 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f06f 0003 	mvn.w	r0, #3
 80019ca:	4611      	mov	r1, r2
 80019cc:	f7fe fe40 	bl	8000650 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f06f 0001 	mvn.w	r0, #1
 80019d6:	4611      	mov	r1, r2
 80019d8:	f7fe fe3a 	bl	8000650 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	f04f 30ff 	mov.w	r0, #4294967295
 80019e2:	4611      	mov	r1, r2
 80019e4:	f7fe fe34 	bl	8000650 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019e8:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <HAL_MspInit+0x88>)
 80019ea:	6853      	ldr	r3, [r2, #4]
 80019ec:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	b003      	add	sp, #12
 80019f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010000 	.word	0x40010000

08001a04 <NMI_Handler>:
 8001a04:	4770      	bx	lr

08001a06 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler>

08001a08 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler>

08001a0a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001a0a:	e7fe      	b.n	8001a0a <BusFault_Handler>

08001a0c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001a0c:	e7fe      	b.n	8001a0c <UsageFault_Handler>

08001a0e <SVC_Handler>:
 8001a0e:	4770      	bx	lr

08001a10 <DebugMon_Handler>:
 8001a10:	4770      	bx	lr

08001a12 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001a14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a16:	f7fe fc3b 	bl	8000290 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001a1e:	f7fe be7a 	b.w	8000716 <HAL_SYSTICK_IRQHandler>
	...

08001a24 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001a24:	4801      	ldr	r0, [pc, #4]	; (8001a2c <ADC3_IRQHandler+0x8>)
 8001a26:	f7fe bc59 	b.w	80002dc <HAL_ADC_IRQHandler>
 8001a2a:	bf00      	nop
 8001a2c:	2000008c 	.word	0x2000008c

08001a30 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <SystemInit+0x40>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <SystemInit+0x44>)
 8001a3e:	400a      	ands	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a4c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a54:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001a5c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a5e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a62:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <SystemInit+0x48>)
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	f8ff0000 	.word	0xf8ff0000
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8001a7e:	4816      	ldr	r0, [pc, #88]	; (8001ad8 <MX_TIM4_Init+0x5c>)
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_TIM4_Init+0x60>)
 8001a82:	6003      	str	r3, [r0, #0]
  htim4.Init.Prescaler = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0;
 8001a8a:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8c:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a90:	f7ff fbd6 	bl	8001240 <HAL_TIM_Base_Init>
 8001a94:	b118      	cbz	r0, 8001a9e <MX_TIM4_Init+0x22>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a96:	218a      	movs	r1, #138	; 0x8a
 8001a98:	4811      	ldr	r0, [pc, #68]	; (8001ae0 <MX_TIM4_Init+0x64>)
 8001a9a:	f7ff ff6b 	bl	8001974 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa2:	a906      	add	r1, sp, #24
 8001aa4:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001aa8:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <MX_TIM4_Init+0x5c>)
 8001aaa:	f7ff fac3 	bl	8001034 <HAL_TIM_ConfigClockSource>
 8001aae:	b118      	cbz	r0, 8001ab8 <MX_TIM4_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ab0:	2190      	movs	r1, #144	; 0x90
 8001ab2:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <MX_TIM4_Init+0x64>)
 8001ab4:	f7ff ff5e 	bl	8001974 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aba:	4669      	mov	r1, sp
 8001abc:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <MX_TIM4_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ac2:	f7ff fc89 	bl	80013d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	b118      	cbz	r0, 8001ad0 <MX_TIM4_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ac8:	2197      	movs	r1, #151	; 0x97
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_TIM4_Init+0x64>)
 8001acc:	f7ff ff52 	bl	8001974 <_Error_Handler>
  }

}
 8001ad0:	b007      	add	sp, #28
 8001ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ad6:	bf00      	nop
 8001ad8:	200000bc 	.word	0x200000bc
 8001adc:	40000800 	.word	0x40000800
 8001ae0:	08001ed5 	.word	0x08001ed5

08001ae4 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM2)
 8001ae4:	6803      	ldr	r3, [r0, #0]
{
 8001ae6:	b084      	sub	sp, #16
  if(tim_pwmHandle->Instance==TIM2)
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aec:	d10c      	bne.n	8001b08 <HAL_TIM_PWM_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aee:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001af2:	69da      	ldr	r2, [r3, #28]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	61da      	str	r2, [r3, #28]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001b04:	b004      	add	sp, #16
 8001b06:	4770      	bx	lr
  else if(tim_pwmHandle->Instance==TIM3)
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10a      	bne.n	8001b24 <HAL_TIM_PWM_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_TIM_PWM_MspInit+0x60>)
 8001b10:	69da      	ldr	r2, [r3, #28]
 8001b12:	f042 0202 	orr.w	r2, r2, #2
 8001b16:	61da      	str	r2, [r3, #28]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	9b02      	ldr	r3, [sp, #8]
 8001b22:	e7ef      	b.n	8001b04 <HAL_TIM_PWM_MspInit+0x20>
  else if(tim_pwmHandle->Instance==TIM5)
 8001b24:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_TIM_PWM_MspInit+0x64>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d1ec      	bne.n	8001b04 <HAL_TIM_PWM_MspInit+0x20>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_TIM_PWM_MspInit+0x60>)
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	f042 0208 	orr.w	r2, r2, #8
 8001b32:	61da      	str	r2, [r3, #28]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	9303      	str	r3, [sp, #12]
 8001b3c:	9b03      	ldr	r3, [sp, #12]
}
 8001b3e:	e7e1      	b.n	8001b04 <HAL_TIM_PWM_MspInit+0x20>
 8001b40:	40000400 	.word	0x40000400
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40000c00 	.word	0x40000c00

08001b4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM4)
 8001b4c:	6802      	ldr	r2, [r0, #0]
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_TIM_Base_MspInit+0x24>)
{
 8001b50:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM4)
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d10a      	bne.n	8001b6c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b56:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b5a:	69da      	ldr	r2, [r3, #28]
 8001b5c:	f042 0204 	orr.w	r2, r2, #4
 8001b60:	61da      	str	r2, [r3, #28]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b6c:	b002      	add	sp, #8
 8001b6e:	4770      	bx	lr
 8001b70:	40000800 	.word	0x40000800

08001b74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8001b76:	6803      	ldr	r3, [r0, #0]
 8001b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7c:	d115      	bne.n	8001baa <HAL_TIM_MspPostInit+0x36>

  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b82:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	4669      	mov	r1, sp
 8001b88:	4818      	ldr	r0, [pc, #96]	; (8001bec <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f7fe fdc7 	bl	8000720 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001b92:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <HAL_TIM_MspPostInit+0x7c>)
 8001b94:	6853      	ldr	r3, [r2, #4]
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001ba2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ba4:	b005      	add	sp, #20
 8001ba6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(timHandle->Instance==TIM3)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <HAL_TIM_MspPostInit+0x80>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d110      	bne.n	8001bd2 <HAL_TIM_MspPostInit+0x5e>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb4:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb8:	4669      	mov	r1, sp
 8001bba:	480f      	ldr	r0, [pc, #60]	; (8001bf8 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc0:	f7fe fdae 	bl	8000720 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_TIM_MspPostInit+0x7c>)
 8001bc6:	6853      	ldr	r3, [r2, #4]
 8001bc8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bcc:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001bd0:	e7e7      	b.n	8001ba2 <HAL_TIM_MspPostInit+0x2e>
  else if(timHandle->Instance==TIM5)
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_TIM_MspPostInit+0x88>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d1e5      	bne.n	8001ba4 <HAL_TIM_MspPostInit+0x30>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bd8:	2308      	movs	r3, #8
 8001bda:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	4669      	mov	r1, sp
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f7fe fd9b 	bl	8000720 <HAL_GPIO_Init>
}
 8001bea:	e7db      	b.n	8001ba4 <HAL_TIM_MspPostInit+0x30>
 8001bec:	40010c00 	.word	0x40010c00
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40000400 	.word	0x40000400
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	40000c00 	.word	0x40000c00
 8001c00:	40010800 	.word	0x40010800

08001c04 <MX_TIM2_Init>:
{
 8001c04:	b510      	push	{r4, lr}
  htim2.Init.Prescaler = 0;
 8001c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c0a:	2400      	movs	r4, #0
  htim2.Instance = TIM2;
 8001c0c:	4817      	ldr	r0, [pc, #92]	; (8001c6c <MX_TIM2_Init+0x68>)
{
 8001c0e:	b08a      	sub	sp, #40	; 0x28
  htim2.Init.Prescaler = 0;
 8001c10:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 8001c16:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c18:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c1c:	f7ff fb2a 	bl	8001274 <HAL_TIM_PWM_Init>
 8001c20:	b118      	cbz	r0, 8001c2a <MX_TIM2_Init+0x26>
    _Error_Handler(__FILE__, __LINE__);
 8001c22:	2142      	movs	r1, #66	; 0x42
 8001c24:	4812      	ldr	r0, [pc, #72]	; (8001c70 <MX_TIM2_Init+0x6c>)
 8001c26:	f7ff fea5 	bl	8001974 <_Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c2a:	a901      	add	r1, sp, #4
 8001c2c:	480f      	ldr	r0, [pc, #60]	; (8001c6c <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2e:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c30:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c32:	f7ff fbd1 	bl	80013d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c36:	b118      	cbz	r0, 8001c40 <MX_TIM2_Init+0x3c>
    _Error_Handler(__FILE__, __LINE__);
 8001c38:	2149      	movs	r1, #73	; 0x49
 8001c3a:	480d      	ldr	r0, [pc, #52]	; (8001c70 <MX_TIM2_Init+0x6c>)
 8001c3c:	f7ff fe9a 	bl	8001974 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c40:	2360      	movs	r3, #96	; 0x60
 8001c42:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8001c44:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c46:	2208      	movs	r2, #8
 8001c48:	a903      	add	r1, sp, #12
 8001c4a:	4808      	ldr	r0, [pc, #32]	; (8001c6c <MX_TIM2_Init+0x68>)
  sConfigOC.Pulse = 0;
 8001c4c:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4e:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c50:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c52:	f7ff fb5f 	bl	8001314 <HAL_TIM_PWM_ConfigChannel>
 8001c56:	b118      	cbz	r0, 8001c60 <MX_TIM2_Init+0x5c>
    _Error_Handler(__FILE__, __LINE__);
 8001c58:	2152      	movs	r1, #82	; 0x52
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <MX_TIM2_Init+0x6c>)
 8001c5c:	f7ff fe8a 	bl	8001974 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <MX_TIM2_Init+0x68>)
 8001c62:	f7ff ff87 	bl	8001b74 <HAL_TIM_MspPostInit>
}
 8001c66:	b00a      	add	sp, #40	; 0x28
 8001c68:	bd10      	pop	{r4, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000017c 	.word	0x2000017c
 8001c70:	08001ed5 	.word	0x08001ed5

08001c74 <MX_TIM3_Init>:
{
 8001c74:	b510      	push	{r4, lr}
  htim3.Init.Prescaler = 0;
 8001c76:	2400      	movs	r4, #0
  htim3.Instance = TIM3;
 8001c78:	4818      	ldr	r0, [pc, #96]	; (8001cdc <MX_TIM3_Init+0x68>)
  htim3.Init.Prescaler = 0;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <MX_TIM3_Init+0x6c>)
{
 8001c7c:	b08a      	sub	sp, #40	; 0x28
  htim3.Init.Prescaler = 0;
 8001c7e:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c82:	6084      	str	r4, [r0, #8]
  htim3.Init.Period = 0;
 8001c84:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c86:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c88:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c8a:	f7ff faf3 	bl	8001274 <HAL_TIM_PWM_Init>
 8001c8e:	b118      	cbz	r0, 8001c98 <MX_TIM3_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 8001c90:	2166      	movs	r1, #102	; 0x66
 8001c92:	4814      	ldr	r0, [pc, #80]	; (8001ce4 <MX_TIM3_Init+0x70>)
 8001c94:	f7ff fe6e 	bl	8001974 <_Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c98:	a901      	add	r1, sp, #4
 8001c9a:	4810      	ldr	r0, [pc, #64]	; (8001cdc <MX_TIM3_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9e:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ca0:	f7ff fb9a 	bl	80013d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	b118      	cbz	r0, 8001cae <MX_TIM3_Init+0x3a>
    _Error_Handler(__FILE__, __LINE__);
 8001ca6:	216d      	movs	r1, #109	; 0x6d
 8001ca8:	480e      	ldr	r0, [pc, #56]	; (8001ce4 <MX_TIM3_Init+0x70>)
 8001caa:	f7ff fe63 	bl	8001974 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cae:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cb0:	220c      	movs	r2, #12
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb2:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8001cb4:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cb6:	eb0d 0102 	add.w	r1, sp, r2
 8001cba:	4808      	ldr	r0, [pc, #32]	; (8001cdc <MX_TIM3_Init+0x68>)
  sConfigOC.Pulse = 0;
 8001cbc:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbe:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc0:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cc2:	f7ff fb27 	bl	8001314 <HAL_TIM_PWM_ConfigChannel>
 8001cc6:	b118      	cbz	r0, 8001cd0 <MX_TIM3_Init+0x5c>
    _Error_Handler(__FILE__, __LINE__);
 8001cc8:	2176      	movs	r1, #118	; 0x76
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <MX_TIM3_Init+0x70>)
 8001ccc:	f7ff fe52 	bl	8001974 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <MX_TIM3_Init+0x68>)
 8001cd2:	f7ff ff4f 	bl	8001b74 <HAL_TIM_MspPostInit>
}
 8001cd6:	b00a      	add	sp, #40	; 0x28
 8001cd8:	bd10      	pop	{r4, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000013c 	.word	0x2000013c
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	08001ed5 	.word	0x08001ed5

08001ce8 <MX_TIM5_Init>:
{
 8001ce8:	b510      	push	{r4, lr}
  htim5.Init.Prescaler = 0;
 8001cea:	2400      	movs	r4, #0
  htim5.Instance = TIM5;
 8001cec:	4818      	ldr	r0, [pc, #96]	; (8001d50 <MX_TIM5_Init+0x68>)
  htim5.Init.Prescaler = 0;
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <MX_TIM5_Init+0x6c>)
{
 8001cf0:	b08a      	sub	sp, #40	; 0x28
  htim5.Init.Prescaler = 0;
 8001cf2:	e880 0018 	stmia.w	r0, {r3, r4}
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf6:	6084      	str	r4, [r0, #8]
  htim5.Init.Period = 0;
 8001cf8:	60c4      	str	r4, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	6104      	str	r4, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfc:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001cfe:	f7ff fab9 	bl	8001274 <HAL_TIM_PWM_Init>
 8001d02:	b118      	cbz	r0, 8001d0c <MX_TIM5_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 8001d04:	21a9      	movs	r1, #169	; 0xa9
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <MX_TIM5_Init+0x70>)
 8001d08:	f7ff fe34 	bl	8001974 <_Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d0c:	a901      	add	r1, sp, #4
 8001d0e:	4810      	ldr	r0, [pc, #64]	; (8001d50 <MX_TIM5_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d10:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d12:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d14:	f7ff fb60 	bl	80013d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d18:	b118      	cbz	r0, 8001d22 <MX_TIM5_Init+0x3a>
    _Error_Handler(__FILE__, __LINE__);
 8001d1a:	21b0      	movs	r1, #176	; 0xb0
 8001d1c:	480e      	ldr	r0, [pc, #56]	; (8001d58 <MX_TIM5_Init+0x70>)
 8001d1e:	f7ff fe29 	bl	8001974 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d22:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d24:	220c      	movs	r2, #12
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d26:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8001d28:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d2a:	eb0d 0102 	add.w	r1, sp, r2
 8001d2e:	4808      	ldr	r0, [pc, #32]	; (8001d50 <MX_TIM5_Init+0x68>)
  sConfigOC.Pulse = 0;
 8001d30:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d32:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d34:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d36:	f7ff faed 	bl	8001314 <HAL_TIM_PWM_ConfigChannel>
 8001d3a:	b118      	cbz	r0, 8001d44 <MX_TIM5_Init+0x5c>
    _Error_Handler(__FILE__, __LINE__);
 8001d3c:	21b9      	movs	r1, #185	; 0xb9
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_TIM5_Init+0x70>)
 8001d40:	f7ff fe18 	bl	8001974 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim5);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <MX_TIM5_Init+0x68>)
 8001d46:	f7ff ff15 	bl	8001b74 <HAL_TIM_MspPostInit>
}
 8001d4a:	b00a      	add	sp, #40	; 0x28
 8001d4c:	bd10      	pop	{r4, pc}
 8001d4e:	bf00      	nop
 8001d50:	200000fc 	.word	0x200000fc
 8001d54:	40000c00 	.word	0x40000c00
 8001d58:	08001ed5 	.word	0x08001ed5

08001d5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d5c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8001d5e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001d62:	480b      	ldr	r0, [pc, #44]	; (8001d90 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d66:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8001d68:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d6e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d70:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d72:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d74:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d76:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d7a:	f7ff fbed 	bl	8001558 <HAL_UART_Init>
 8001d7e:	b128      	cbz	r0, 8001d8c <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8001d80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001d84:	2142      	movs	r1, #66	; 0x42
 8001d86:	4804      	ldr	r0, [pc, #16]	; (8001d98 <MX_USART1_UART_Init+0x3c>)
 8001d88:	f7ff bdf4 	b.w	8001974 <_Error_Handler>
 8001d8c:	bd08      	pop	{r3, pc}
 8001d8e:	bf00      	nop
 8001d90:	200001bc 	.word	0x200001bc
 8001d94:	40013800 	.word	0x40013800
 8001d98:	08001ee2 	.word	0x08001ee2

08001d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8001d9e:	6802      	ldr	r2, [r0, #0]
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_UART_MspInit+0x50>)
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d11f      	bne.n	8001de6 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001da6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001daa:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001db2:	619a      	str	r2, [r3, #24]
 8001db4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	480e      	ldr	r0, [pc, #56]	; (8001df0 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f7fe fca7 	bl	8000720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	a902      	add	r1, sp, #8
 8001ddc:	4804      	ldr	r0, [pc, #16]	; (8001df0 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dde:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de2:	f7fe fc9d 	bl	8000720 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001de6:	b007      	add	sp, #28
 8001de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dec:	40013800 	.word	0x40013800
 8001df0:	40010800 	.word	0x40010800

08001df4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001df4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001df6:	e003      	b.n	8001e00 <LoopCopyDataInit>

08001df8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dfa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001dfc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dfe:	3104      	adds	r1, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e00:	480a      	ldr	r0, [pc, #40]	; (8001e2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e08:	d3f6      	bcc.n	8001df8 <CopyDataInit>
  ldr r2, =_sbss
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e0c:	e002      	b.n	8001e14 <LoopFillZerobss>

08001e0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e10:	f842 3b04 	str.w	r3, [r2], #4

08001e14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e18:	d3f9      	bcc.n	8001e0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e1a:	f7ff fe09 	bl	8001a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1e:	f000 f80f 	bl	8001e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e22:	f7ff fd55 	bl	80018d0 <main>
  bx lr
 8001e26:	4770      	bx	lr
  ldr r3, =_sidata
 8001e28:	08001efc 	.word	0x08001efc
  ldr r0, =_sdata
 8001e2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e30:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001e34:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001e38:	200001fc 	.word	0x200001fc

08001e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e3c:	e7fe      	b.n	8001e3c <ADC1_2_IRQHandler>
	...

08001e40 <__libc_init_array>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	2500      	movs	r5, #0
 8001e44:	4e0c      	ldr	r6, [pc, #48]	; (8001e78 <__libc_init_array+0x38>)
 8001e46:	4c0d      	ldr	r4, [pc, #52]	; (8001e7c <__libc_init_array+0x3c>)
 8001e48:	1ba4      	subs	r4, r4, r6
 8001e4a:	10a4      	asrs	r4, r4, #2
 8001e4c:	42a5      	cmp	r5, r4
 8001e4e:	d109      	bne.n	8001e64 <__libc_init_array+0x24>
 8001e50:	f000 f81a 	bl	8001e88 <_init>
 8001e54:	2500      	movs	r5, #0
 8001e56:	4e0a      	ldr	r6, [pc, #40]	; (8001e80 <__libc_init_array+0x40>)
 8001e58:	4c0a      	ldr	r4, [pc, #40]	; (8001e84 <__libc_init_array+0x44>)
 8001e5a:	1ba4      	subs	r4, r4, r6
 8001e5c:	10a4      	asrs	r4, r4, #2
 8001e5e:	42a5      	cmp	r5, r4
 8001e60:	d105      	bne.n	8001e6e <__libc_init_array+0x2e>
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
 8001e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e68:	4798      	blx	r3
 8001e6a:	3501      	adds	r5, #1
 8001e6c:	e7ee      	b.n	8001e4c <__libc_init_array+0xc>
 8001e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e72:	4798      	blx	r3
 8001e74:	3501      	adds	r5, #1
 8001e76:	e7f2      	b.n	8001e5e <__libc_init_array+0x1e>
 8001e78:	08001ef4 	.word	0x08001ef4
 8001e7c:	08001ef4 	.word	0x08001ef4
 8001e80:	08001ef4 	.word	0x08001ef4
 8001e84:	08001ef8 	.word	0x08001ef8

08001e88 <_init>:
 8001e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8a:	bf00      	nop
 8001e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e8e:	bc08      	pop	{r3}
 8001e90:	469e      	mov	lr, r3
 8001e92:	4770      	bx	lr

08001e94 <_fini>:
 8001e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e96:	bf00      	nop
 8001e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e9a:	bc08      	pop	{r3}
 8001e9c:	469e      	mov	lr, r3
 8001e9e:	4770      	bx	lr
