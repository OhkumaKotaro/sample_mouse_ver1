
sample_mouse_ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080035c0  080035c0  000135c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  080035c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000200  20000078  0800363c  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000278  0800363c  00020278  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   000179d5  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003142  00000000  00000000  00037a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006c07  00000000  00000000  0003abb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a90  00000000  00000000  000417c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cd0  00000000  00000000  00042250  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000063c9  00000000  00000000  00042f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003c3b  00000000  00000000  000492e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004cf24  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000025c8  00000000  00000000  0004cfa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	080034a4 	.word	0x080034a4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	080034a4 	.word	0x080034a4

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <HAL_InitTick+0x3c>)
{
 8000228:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800022a:	7818      	ldrb	r0, [r3, #0]
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	fbb3 f3f0 	udiv	r3, r3, r0
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <HAL_InitTick+0x40>)
 8000236:	6810      	ldr	r0, [r2, #0]
 8000238:	fbb0 f0f3 	udiv	r0, r0, r3
 800023c:	f000 faf8 	bl	8000830 <HAL_SYSTICK_Config>
 8000240:	4604      	mov	r4, r0
 8000242:	b958      	cbnz	r0, 800025c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000244:	2d0f      	cmp	r5, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	4602      	mov	r2, r0
 800024a:	4629      	mov	r1, r5
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 faae 	bl	80007b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <HAL_InitTick+0x44>)
 8000256:	4620      	mov	r0, r4
 8000258:	601d      	str	r5, [r3, #0]
 800025a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800025c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800025e:	bd38      	pop	{r3, r4, r5, pc}
 8000260:	20000000 	.word	0x20000000
 8000264:	20000010 	.word	0x20000010
 8000268:	20000004 	.word	0x20000004

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_Init+0x20>)
{
 800026e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000270:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000272:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027a:	f000 fa87 	bl	800078c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffd0 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000284:	f001 fe62 	bl	8001f4c <HAL_MspInit>
}
 8000288:	2000      	movs	r0, #0
 800028a:	bd08      	pop	{r3, pc}
 800028c:	40022000 	.word	0x40022000

08000290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000290:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <HAL_IncTick+0x10>)
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <HAL_IncTick+0x14>)
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	440b      	add	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	200000a0 	.word	0x200000a0
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_GetTick+0x8>)
 80002aa:	6818      	ldr	r0, [r3, #0]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	200000a0 	.word	0x200000a0

080002b4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80002b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80002b6:	2600      	movs	r6, #0
{
 80002b8:	4604      	mov	r4, r0
 80002ba:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80002bc:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80002be:	f7ff fff3 	bl	80002a8 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80002c2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80002c4:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80002c6:	689a      	ldr	r2, [r3, #8]
 80002c8:	05d2      	lsls	r2, r2, #23
 80002ca:	d508      	bpl.n	80002de <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80002cc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80002d0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002d4:	f043 0320 	orr.w	r3, r3, #32
 80002d8:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80002da:	b003      	add	sp, #12
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80002de:	685a      	ldr	r2, [r3, #4]
 80002e0:	05d6      	lsls	r6, r2, #23
 80002e2:	d403      	bmi.n	80002ec <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80002e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80002e6:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80002ea:	d03b      	beq.n	8000364 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80002ec:	4b3a      	ldr	r3, [pc, #232]	; (80003d8 <HAL_ADC_PollForConversion+0x124>)
 80002ee:	2002      	movs	r0, #2
 80002f0:	681e      	ldr	r6, [r3, #0]
 80002f2:	f000 fec1 	bl	8001078 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80002f6:	6823      	ldr	r3, [r4, #0]
 80002f8:	4a38      	ldr	r2, [pc, #224]	; (80003dc <HAL_ADC_PollForConversion+0x128>)
 80002fa:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80002fc:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000300:	4211      	tst	r1, r2
 8000302:	4a37      	ldr	r2, [pc, #220]	; (80003e0 <HAL_ADC_PollForConversion+0x12c>)
 8000304:	d14f      	bne.n	80003a6 <HAL_ADC_PollForConversion+0xf2>
 8000306:	68de      	ldr	r6, [r3, #12]
 8000308:	4936      	ldr	r1, [pc, #216]	; (80003e4 <HAL_ADC_PollForConversion+0x130>)
 800030a:	420e      	tst	r6, r1
 800030c:	d14b      	bne.n	80003a6 <HAL_ADC_PollForConversion+0xf2>
 800030e:	6919      	ldr	r1, [r3, #16]
 8000310:	4211      	tst	r1, r2
 8000312:	d159      	bne.n	80003c8 <HAL_ADC_PollForConversion+0x114>
 8000314:	68da      	ldr	r2, [r3, #12]
 8000316:	4b34      	ldr	r3, [pc, #208]	; (80003e8 <HAL_ADC_PollForConversion+0x134>)
 8000318:	421a      	tst	r2, r3
 800031a:	bf14      	ite	ne
 800031c:	2329      	movne	r3, #41	; 0x29
 800031e:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000320:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000324:	9b01      	ldr	r3, [sp, #4]
 8000326:	429e      	cmp	r6, r3
 8000328:	d920      	bls.n	800036c <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 800032a:	1c6b      	adds	r3, r5, #1
 800032c:	d005      	beq.n	800033a <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800032e:	b15d      	cbz	r5, 8000348 <HAL_ADC_PollForConversion+0x94>
 8000330:	f7ff ffba 	bl	80002a8 <HAL_GetTick>
 8000334:	1bc0      	subs	r0, r0, r7
 8000336:	4285      	cmp	r5, r0
 8000338:	d306      	bcc.n	8000348 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 800033a:	9b01      	ldr	r3, [sp, #4]
 800033c:	3301      	adds	r3, #1
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	e7f0      	b.n	8000324 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 8000342:	1c68      	adds	r0, r5, #1
 8000344:	d00f      	beq.n	8000366 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000346:	b945      	cbnz	r5, 800035a <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000348:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 800034a:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800034c:	f043 0304 	orr.w	r3, r3, #4
 8000350:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8000352:	2300      	movs	r3, #0
 8000354:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 8000358:	e7bf      	b.n	80002da <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800035a:	f7ff ffa5 	bl	80002a8 <HAL_GetTick>
 800035e:	1bc0      	subs	r0, r0, r7
 8000360:	4285      	cmp	r5, r0
 8000362:	d3f1      	bcc.n	8000348 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000364:	6822      	ldr	r2, [r4, #0]
 8000366:	6813      	ldr	r3, [r2, #0]
 8000368:	0799      	lsls	r1, r3, #30
 800036a:	d5ea      	bpl.n	8000342 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800036c:	f06f 0312 	mvn.w	r3, #18
 8000370:	6822      	ldr	r2, [r4, #0]
 8000372:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000374:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800037a:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800037c:	6893      	ldr	r3, [r2, #8]
 800037e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000382:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000386:	d125      	bne.n	80003d4 <HAL_ADC_PollForConversion+0x120>
 8000388:	68e3      	ldr	r3, [r4, #12]
 800038a:	bb1b      	cbnz	r3, 80003d4 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800038c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800038e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000392:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000394:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000396:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800039a:	d11b      	bne.n	80003d4 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800039c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80003a4:	e799      	b.n	80002da <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80003a6:	6919      	ldr	r1, [r3, #16]
 80003a8:	4211      	tst	r1, r2
 80003aa:	d103      	bne.n	80003b4 <HAL_ADC_PollForConversion+0x100>
 80003ac:	68d9      	ldr	r1, [r3, #12]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <HAL_ADC_PollForConversion+0x134>)
 80003b0:	4211      	tst	r1, r2
 80003b2:	d00b      	beq.n	80003cc <HAL_ADC_PollForConversion+0x118>
 80003b4:	6919      	ldr	r1, [r3, #16]
 80003b6:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <HAL_ADC_PollForConversion+0x138>)
 80003b8:	4211      	tst	r1, r2
 80003ba:	d109      	bne.n	80003d0 <HAL_ADC_PollForConversion+0x11c>
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	4213      	tst	r3, r2
 80003c0:	bf14      	ite	ne
 80003c2:	23fc      	movne	r3, #252	; 0xfc
 80003c4:	2354      	moveq	r3, #84	; 0x54
 80003c6:	e7ab      	b.n	8000320 <HAL_ADC_PollForConversion+0x6c>
 80003c8:	2329      	movs	r3, #41	; 0x29
 80003ca:	e7a9      	b.n	8000320 <HAL_ADC_PollForConversion+0x6c>
 80003cc:	2354      	movs	r3, #84	; 0x54
 80003ce:	e7a7      	b.n	8000320 <HAL_ADC_PollForConversion+0x6c>
 80003d0:	23fc      	movs	r3, #252	; 0xfc
 80003d2:	e7a5      	b.n	8000320 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 80003d4:	2000      	movs	r0, #0
 80003d6:	e780      	b.n	80002da <HAL_ADC_PollForConversion+0x26>
 80003d8:	20000010 	.word	0x20000010
 80003dc:	24924924 	.word	0x24924924
 80003e0:	12492492 	.word	0x12492492
 80003e4:	00924924 	.word	0x00924924
 80003e8:	00492492 	.word	0x00492492
 80003ec:	00249249 	.word	0x00249249

080003f0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80003f0:	6803      	ldr	r3, [r0, #0]
 80003f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80003f4:	4770      	bx	lr
	...

080003f8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80003f8:	2300      	movs	r3, #0
{ 
 80003fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80003fc:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003fe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000402:	2b01      	cmp	r3, #1
 8000404:	d074      	beq.n	80004f0 <HAL_ADC_ConfigChannel+0xf8>
 8000406:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000408:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800040a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800040e:	2d06      	cmp	r5, #6
 8000410:	6802      	ldr	r2, [r0, #0]
 8000412:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000416:	680c      	ldr	r4, [r1, #0]
 8000418:	d825      	bhi.n	8000466 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800041a:	442b      	add	r3, r5
 800041c:	251f      	movs	r5, #31
 800041e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000420:	3b05      	subs	r3, #5
 8000422:	409d      	lsls	r5, r3
 8000424:	ea26 0505 	bic.w	r5, r6, r5
 8000428:	fa04 f303 	lsl.w	r3, r4, r3
 800042c:	432b      	orrs	r3, r5
 800042e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000430:	2c09      	cmp	r4, #9
 8000432:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000436:	688d      	ldr	r5, [r1, #8]
 8000438:	d92f      	bls.n	800049a <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800043a:	2607      	movs	r6, #7
 800043c:	4423      	add	r3, r4
 800043e:	68d1      	ldr	r1, [r2, #12]
 8000440:	3b1e      	subs	r3, #30
 8000442:	409e      	lsls	r6, r3
 8000444:	ea21 0106 	bic.w	r1, r1, r6
 8000448:	fa05 f303 	lsl.w	r3, r5, r3
 800044c:	430b      	orrs	r3, r1
 800044e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000450:	f1a4 0310 	sub.w	r3, r4, #16
 8000454:	2b01      	cmp	r3, #1
 8000456:	d92b      	bls.n	80004b0 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000458:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800045a:	2200      	movs	r2, #0
 800045c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000460:	4618      	mov	r0, r3
 8000462:	b002      	add	sp, #8
 8000464:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000466:	2d0c      	cmp	r5, #12
 8000468:	d80b      	bhi.n	8000482 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800046a:	442b      	add	r3, r5
 800046c:	251f      	movs	r5, #31
 800046e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000470:	3b23      	subs	r3, #35	; 0x23
 8000472:	409d      	lsls	r5, r3
 8000474:	ea26 0505 	bic.w	r5, r6, r5
 8000478:	fa04 f303 	lsl.w	r3, r4, r3
 800047c:	432b      	orrs	r3, r5
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
 8000480:	e7d6      	b.n	8000430 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000482:	442b      	add	r3, r5
 8000484:	251f      	movs	r5, #31
 8000486:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000488:	3b41      	subs	r3, #65	; 0x41
 800048a:	409d      	lsls	r5, r3
 800048c:	ea26 0505 	bic.w	r5, r6, r5
 8000490:	fa04 f303 	lsl.w	r3, r4, r3
 8000494:	432b      	orrs	r3, r5
 8000496:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000498:	e7ca      	b.n	8000430 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800049a:	2607      	movs	r6, #7
 800049c:	6911      	ldr	r1, [r2, #16]
 800049e:	4423      	add	r3, r4
 80004a0:	409e      	lsls	r6, r3
 80004a2:	ea21 0106 	bic.w	r1, r1, r6
 80004a6:	fa05 f303 	lsl.w	r3, r5, r3
 80004aa:	430b      	orrs	r3, r1
 80004ac:	6113      	str	r3, [r2, #16]
 80004ae:	e7cf      	b.n	8000450 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80004b0:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <HAL_ADC_ConfigChannel+0xfc>)
 80004b2:	429a      	cmp	r2, r3
 80004b4:	d116      	bne.n	80004e4 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80004b6:	6893      	ldr	r3, [r2, #8]
 80004b8:	021b      	lsls	r3, r3, #8
 80004ba:	d4cd      	bmi.n	8000458 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80004bc:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80004be:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80004c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004c4:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80004c6:	d1c7      	bne.n	8000458 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <HAL_ADC_ConfigChannel+0x100>)
 80004ca:	4a0c      	ldr	r2, [pc, #48]	; (80004fc <HAL_ADC_ConfigChannel+0x104>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80004d2:	230a      	movs	r3, #10
 80004d4:	4353      	muls	r3, r2
            wait_loop_index--;
 80004d6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0bc      	beq.n	8000458 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80004de:	9b01      	ldr	r3, [sp, #4]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	e7f8      	b.n	80004d6 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80004e6:	f043 0320 	orr.w	r3, r3, #32
 80004ea:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80004ec:	2301      	movs	r3, #1
 80004ee:	e7b4      	b.n	800045a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80004f0:	2302      	movs	r3, #2
 80004f2:	e7b5      	b.n	8000460 <HAL_ADC_ConfigChannel+0x68>
 80004f4:	40012400 	.word	0x40012400
 80004f8:	20000010 	.word	0x20000010
 80004fc:	000f4240 	.word	0x000f4240

08000500 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000500:	2300      	movs	r3, #0
{
 8000502:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000504:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000506:	6803      	ldr	r3, [r0, #0]
{
 8000508:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800050a:	689a      	ldr	r2, [r3, #8]
 800050c:	07d2      	lsls	r2, r2, #31
 800050e:	d502      	bpl.n	8000516 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000510:	2000      	movs	r0, #0
}
 8000512:	b002      	add	sp, #8
 8000514:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000516:	689a      	ldr	r2, [r3, #8]
 8000518:	f042 0201 	orr.w	r2, r2, #1
 800051c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <ADC_Enable+0x68>)
 8000520:	4a12      	ldr	r2, [pc, #72]	; (800056c <ADC_Enable+0x6c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000528:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800052a:	9b01      	ldr	r3, [sp, #4]
 800052c:	b9c3      	cbnz	r3, 8000560 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800052e:	f7ff febb 	bl	80002a8 <HAL_GetTick>
 8000532:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000534:	6823      	ldr	r3, [r4, #0]
 8000536:	689d      	ldr	r5, [r3, #8]
 8000538:	f015 0501 	ands.w	r5, r5, #1
 800053c:	d1e8      	bne.n	8000510 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800053e:	f7ff feb3 	bl	80002a8 <HAL_GetTick>
 8000542:	1b80      	subs	r0, r0, r6
 8000544:	2802      	cmp	r0, #2
 8000546:	d9f5      	bls.n	8000534 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000548:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800054a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800054e:	f043 0310 	orr.w	r3, r3, #16
 8000552:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000554:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000556:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800055e:	e7d8      	b.n	8000512 <ADC_Enable+0x12>
      wait_loop_index--;
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	3b01      	subs	r3, #1
 8000564:	e7e0      	b.n	8000528 <ADC_Enable+0x28>
 8000566:	bf00      	nop
 8000568:	20000010 	.word	0x20000010
 800056c:	000f4240 	.word	0x000f4240

08000570 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000570:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000574:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000576:	2b01      	cmp	r3, #1
{
 8000578:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800057a:	d054      	beq.n	8000626 <HAL_ADC_Start+0xb6>
 800057c:	2301      	movs	r3, #1
 800057e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000582:	f7ff ffbd 	bl	8000500 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000586:	2800      	cmp	r0, #0
 8000588:	d149      	bne.n	800061e <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800058a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800058e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000592:	f023 0301 	bic.w	r3, r3, #1
 8000596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	4293      	cmp	r3, r2
 80005a0:	d104      	bne.n	80005ac <HAL_ADC_Start+0x3c>
 80005a2:	4923      	ldr	r1, [pc, #140]	; (8000630 <HAL_ADC_Start+0xc0>)
 80005a4:	684a      	ldr	r2, [r1, #4]
 80005a6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80005aa:	d12e      	bne.n	800060a <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80005b2:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80005b4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005b6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80005b8:	bf41      	itttt	mi
 80005ba:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80005bc:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80005c0:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80005c4:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80005cc:	bf1c      	itt	ne
 80005ce:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80005d0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80005d4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80005dc:	f06f 0202 	mvn.w	r2, #2
 80005e0:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80005e2:	689a      	ldr	r2, [r3, #8]
 80005e4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80005e8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80005ec:	d113      	bne.n	8000616 <HAL_ADC_Start+0xa6>
 80005ee:	4a0f      	ldr	r2, [pc, #60]	; (800062c <HAL_ADC_Start+0xbc>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d105      	bne.n	8000600 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80005f4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80005f8:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80005fa:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80005fe:	d10a      	bne.n	8000616 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800060a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800060c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000610:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000612:	684a      	ldr	r2, [r1, #4]
 8000614:	e7cf      	b.n	80005b6 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000616:	689a      	ldr	r2, [r3, #8]
 8000618:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800061c:	e7f3      	b.n	8000606 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800061e:	2300      	movs	r3, #0
 8000620:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000624:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000626:	2002      	movs	r0, #2
}
 8000628:	bd10      	pop	{r4, pc}
 800062a:	bf00      	nop
 800062c:	40012800 	.word	0x40012800
 8000630:	40012400 	.word	0x40012400

08000634 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000634:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000636:	6803      	ldr	r3, [r0, #0]
{
 8000638:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800063a:	689a      	ldr	r2, [r3, #8]
 800063c:	07d2      	lsls	r2, r2, #31
 800063e:	d401      	bmi.n	8000644 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000640:	2000      	movs	r0, #0
 8000642:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000644:	689a      	ldr	r2, [r3, #8]
 8000646:	f022 0201 	bic.w	r2, r2, #1
 800064a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800064c:	f7ff fe2c 	bl	80002a8 <HAL_GetTick>
 8000650:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	07db      	lsls	r3, r3, #31
 8000658:	d5f2      	bpl.n	8000640 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800065a:	f7ff fe25 	bl	80002a8 <HAL_GetTick>
 800065e:	1b40      	subs	r0, r0, r5
 8000660:	2802      	cmp	r0, #2
 8000662:	d9f6      	bls.n	8000652 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000664:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000666:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000668:	f043 0310 	orr.w	r3, r3, #16
 800066c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800066e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000676:	bd38      	pop	{r3, r4, r5, pc}

08000678 <HAL_ADC_Init>:
{
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 800067a:	4604      	mov	r4, r0
 800067c:	2800      	cmp	r0, #0
 800067e:	d077      	beq.n	8000770 <HAL_ADC_Init+0xf8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000680:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000682:	b923      	cbnz	r3, 800068e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000684:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000686:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800068a:	f001 fa87 	bl	8001b9c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800068e:	4620      	mov	r0, r4
 8000690:	f7ff ffd0 	bl	8000634 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000694:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000696:	f013 0310 	ands.w	r3, r3, #16
 800069a:	d16b      	bne.n	8000774 <HAL_ADC_Init+0xfc>
 800069c:	2800      	cmp	r0, #0
 800069e:	d169      	bne.n	8000774 <HAL_ADC_Init+0xfc>
    ADC_STATE_CLR_SET(hadc->State,
 80006a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006a2:	4937      	ldr	r1, [pc, #220]	; (8000780 <HAL_ADC_Init+0x108>)
    ADC_STATE_CLR_SET(hadc->State,
 80006a4:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80006a8:	f022 0202 	bic.w	r2, r2, #2
 80006ac:	f042 0202 	orr.w	r2, r2, #2
 80006b0:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006b2:	e894 0024 	ldmia.w	r4, {r2, r5}
 80006b6:	428a      	cmp	r2, r1
 80006b8:	69e1      	ldr	r1, [r4, #28]
 80006ba:	d104      	bne.n	80006c6 <HAL_ADC_Init+0x4e>
 80006bc:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 80006c0:	bf08      	it	eq
 80006c2:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80006c6:	68e6      	ldr	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006c8:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 80006cc:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006ce:	68a5      	ldr	r5, [r4, #8]
 80006d0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80006d4:	d035      	beq.n	8000742 <HAL_ADC_Init+0xca>
 80006d6:	2d01      	cmp	r5, #1
 80006d8:	bf08      	it	eq
 80006da:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006de:	6967      	ldr	r7, [r4, #20]
 80006e0:	2f01      	cmp	r7, #1
 80006e2:	d106      	bne.n	80006f2 <HAL_ADC_Init+0x7a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80006e4:	bb7e      	cbnz	r6, 8000746 <HAL_ADC_Init+0xce>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80006e6:	69a6      	ldr	r6, [r4, #24]
 80006e8:	3e01      	subs	r6, #1
 80006ea:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 80006ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80006f2:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80006f4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80006f8:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 80006fc:	ea43 0306 	orr.w	r3, r3, r6
 8000700:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000702:	6896      	ldr	r6, [r2, #8]
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <HAL_ADC_Init+0x10c>)
 8000706:	ea03 0306 	and.w	r3, r3, r6
 800070a:	ea43 0301 	orr.w	r3, r3, r1
 800070e:	6093      	str	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000710:	d001      	beq.n	8000716 <HAL_ADC_Init+0x9e>
 8000712:	2d01      	cmp	r5, #1
 8000714:	d120      	bne.n	8000758 <HAL_ADC_Init+0xe0>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000716:	6923      	ldr	r3, [r4, #16]
 8000718:	3b01      	subs	r3, #1
 800071a:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800071c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800071e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000722:	432b      	orrs	r3, r5
 8000724:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000726:	6892      	ldr	r2, [r2, #8]
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <HAL_ADC_Init+0x110>)
 800072a:	4013      	ands	r3, r2
 800072c:	4299      	cmp	r1, r3
 800072e:	d115      	bne.n	800075c <HAL_ADC_Init+0xe4>
      ADC_CLEAR_ERRORCODE(hadc);
 8000730:	2300      	movs	r3, #0
 8000732:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000736:	f023 0303 	bic.w	r3, r3, #3
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000742:	462b      	mov	r3, r5
 8000744:	e7cb      	b.n	80006de <HAL_ADC_Init+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000748:	f046 0620 	orr.w	r6, r6, #32
 800074c:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800074e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000750:	f046 0601 	orr.w	r6, r6, #1
 8000754:	62e6      	str	r6, [r4, #44]	; 0x2c
 8000756:	e7cc      	b.n	80006f2 <HAL_ADC_Init+0x7a>
  uint32_t tmp_sqr1 = 0U;
 8000758:	2300      	movs	r3, #0
 800075a:	e7df      	b.n	800071c <HAL_ADC_Init+0xa4>
      ADC_STATE_CLR_SET(hadc->State,
 800075c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800075e:	f023 0312 	bic.w	r3, r3, #18
 8000762:	f043 0310 	orr.w	r3, r3, #16
 8000766:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000768:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000770:	2001      	movs	r0, #1
}
 8000772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000774:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	62a3      	str	r3, [r4, #40]	; 0x28
 800077c:	e7f8      	b.n	8000770 <HAL_ADC_Init+0xf8>
 800077e:	bf00      	nop
 8000780:	40013c00 	.word	0x40013c00
 8000784:	ffe1f7fd 	.word	0xffe1f7fd
 8000788:	ff1f0efe 	.word	0xff1f0efe

0800078c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800078e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000792:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000796:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800079a:	041b      	lsls	r3, r3, #16
 800079c:	0c1b      	lsrs	r3, r3, #16
 800079e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007a6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80007a8:	60d3      	str	r3, [r2, #12]
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	68dc      	ldr	r4, [r3, #12]
 80007b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	bf28      	it	cs
 80007c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007cc:	bf98      	it	ls
 80007ce:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	fa05 f303 	lsl.w	r3, r5, r3
 80007d4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d8:	bf88      	it	hi
 80007da:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	4019      	ands	r1, r3
 80007de:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e0:	fa05 f404 	lsl.w	r4, r5, r4
 80007e4:	3c01      	subs	r4, #1
 80007e6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80007e8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ea:	ea42 0201 	orr.w	r2, r2, r1
 80007ee:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	bfaf      	iteee	ge
 80007f4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f8:	4b06      	ldrlt	r3, [pc, #24]	; (8000814 <HAL_NVIC_SetPriority+0x64>)
 80007fa:	f000 000f 	andlt.w	r0, r0, #15
 80007fe:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000800:	bfa5      	ittet	ge
 8000802:	b2d2      	uxtbge	r2, r2
 8000804:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800080e:	bd30      	pop	{r4, r5, pc}
 8000810:	e000ed00 	.word	0xe000ed00
 8000814:	e000ed14 	.word	0xe000ed14

08000818 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000818:	2301      	movs	r3, #1
 800081a:	0942      	lsrs	r2, r0, #5
 800081c:	f000 001f 	and.w	r0, r0, #31
 8000820:	fa03 f000 	lsl.w	r0, r3, r0
 8000824:	4b01      	ldr	r3, [pc, #4]	; (800082c <HAL_NVIC_EnableIRQ+0x14>)
 8000826:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800082a:	4770      	bx	lr
 800082c:	e000e100 	.word	0xe000e100

08000830 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000830:	3801      	subs	r0, #1
 8000832:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000836:	d20a      	bcs.n	800084e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000838:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	4a06      	ldr	r2, [pc, #24]	; (8000858 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000840:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000844:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000848:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800085e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	bf0c      	ite	eq
 8000864:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000868:	f022 0204 	bicne.w	r2, r2, #4
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	4770      	bx	lr
 8000870:	e000e010 	.word	0xe000e010

08000874 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000874:	4770      	bx	lr

08000876 <HAL_SYSTICK_IRQHandler>:
{
 8000876:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000878:	f7ff fffc 	bl	8000874 <HAL_SYSTICK_Callback>
 800087c:	bd08      	pop	{r3, pc}
	...

08000880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000884:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000886:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000888:	4f6c      	ldr	r7, [pc, #432]	; (8000a3c <HAL_GPIO_Init+0x1bc>)
 800088a:	4b6d      	ldr	r3, [pc, #436]	; (8000a40 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800088c:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000a48 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000890:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000a4c <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 8000894:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000898:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800089a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089e:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80008a2:	45a0      	cmp	r8, r4
 80008a4:	f040 8085 	bne.w	80009b2 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 80008a8:	684d      	ldr	r5, [r1, #4]
 80008aa:	2d12      	cmp	r5, #18
 80008ac:	f000 80b7 	beq.w	8000a1e <HAL_GPIO_Init+0x19e>
 80008b0:	f200 808d 	bhi.w	80009ce <HAL_GPIO_Init+0x14e>
 80008b4:	2d02      	cmp	r5, #2
 80008b6:	f000 80af 	beq.w	8000a18 <HAL_GPIO_Init+0x198>
 80008ba:	f200 8081 	bhi.w	80009c0 <HAL_GPIO_Init+0x140>
 80008be:	2d00      	cmp	r5, #0
 80008c0:	f000 8091 	beq.w	80009e6 <HAL_GPIO_Init+0x166>
 80008c4:	2d01      	cmp	r5, #1
 80008c6:	f000 80a5 	beq.w	8000a14 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008ca:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008ce:	2cff      	cmp	r4, #255	; 0xff
 80008d0:	bf93      	iteet	ls
 80008d2:	4682      	movls	sl, r0
 80008d4:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80008d8:	3d08      	subhi	r5, #8
 80008da:	f8d0 b000 	ldrls.w	fp, [r0]
 80008de:	bf92      	itee	ls
 80008e0:	00b5      	lslls	r5, r6, #2
 80008e2:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80008e6:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008e8:	fa09 f805 	lsl.w	r8, r9, r5
 80008ec:	ea2b 0808 	bic.w	r8, fp, r8
 80008f0:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008f4:	bf88      	it	hi
 80008f6:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008fa:	ea48 0505 	orr.w	r5, r8, r5
 80008fe:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000902:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000906:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800090a:	d052      	beq.n	80009b2 <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800090c:	69bd      	ldr	r5, [r7, #24]
 800090e:	f026 0803 	bic.w	r8, r6, #3
 8000912:	f045 0501 	orr.w	r5, r5, #1
 8000916:	61bd      	str	r5, [r7, #24]
 8000918:	69bd      	ldr	r5, [r7, #24]
 800091a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800091e:	f005 0501 	and.w	r5, r5, #1
 8000922:	9501      	str	r5, [sp, #4]
 8000924:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000928:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800092c:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800092e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000932:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000936:	fa09 f90b 	lsl.w	r9, r9, fp
 800093a:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800093e:	4d41      	ldr	r5, [pc, #260]	; (8000a44 <HAL_GPIO_Init+0x1c4>)
 8000940:	42a8      	cmp	r0, r5
 8000942:	d071      	beq.n	8000a28 <HAL_GPIO_Init+0x1a8>
 8000944:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000948:	42a8      	cmp	r0, r5
 800094a:	d06f      	beq.n	8000a2c <HAL_GPIO_Init+0x1ac>
 800094c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000950:	42a8      	cmp	r0, r5
 8000952:	d06d      	beq.n	8000a30 <HAL_GPIO_Init+0x1b0>
 8000954:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000958:	42a8      	cmp	r0, r5
 800095a:	d06b      	beq.n	8000a34 <HAL_GPIO_Init+0x1b4>
 800095c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000960:	42a8      	cmp	r0, r5
 8000962:	d069      	beq.n	8000a38 <HAL_GPIO_Init+0x1b8>
 8000964:	4570      	cmp	r0, lr
 8000966:	bf0c      	ite	eq
 8000968:	2505      	moveq	r5, #5
 800096a:	2506      	movne	r5, #6
 800096c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000970:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000974:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000978:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800097a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800097e:	bf14      	ite	ne
 8000980:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000982:	43a5      	biceq	r5, r4
 8000984:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000986:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000988:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800098c:	bf14      	ite	ne
 800098e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000990:	43a5      	biceq	r5, r4
 8000992:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000994:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000996:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800099a:	bf14      	ite	ne
 800099c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800099e:	43a5      	biceq	r5, r4
 80009a0:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009a2:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009a4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80009a8:	bf14      	ite	ne
 80009aa:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009ac:	ea25 0404 	biceq.w	r4, r5, r4
 80009b0:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80009b2:	3601      	adds	r6, #1
 80009b4:	2e10      	cmp	r6, #16
 80009b6:	f47f af6d 	bne.w	8000894 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 80009ba:	b003      	add	sp, #12
 80009bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80009c0:	2d03      	cmp	r5, #3
 80009c2:	d025      	beq.n	8000a10 <HAL_GPIO_Init+0x190>
 80009c4:	2d11      	cmp	r5, #17
 80009c6:	d180      	bne.n	80008ca <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009c8:	68ca      	ldr	r2, [r1, #12]
 80009ca:	3204      	adds	r2, #4
          break;
 80009cc:	e77d      	b.n	80008ca <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80009ce:	4565      	cmp	r5, ip
 80009d0:	d009      	beq.n	80009e6 <HAL_GPIO_Init+0x166>
 80009d2:	d812      	bhi.n	80009fa <HAL_GPIO_Init+0x17a>
 80009d4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000a50 <HAL_GPIO_Init+0x1d0>
 80009d8:	454d      	cmp	r5, r9
 80009da:	d004      	beq.n	80009e6 <HAL_GPIO_Init+0x166>
 80009dc:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80009e0:	454d      	cmp	r5, r9
 80009e2:	f47f af72 	bne.w	80008ca <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009e6:	688a      	ldr	r2, [r1, #8]
 80009e8:	b1e2      	cbz	r2, 8000a24 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009ea:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80009ec:	bf0c      	ite	eq
 80009ee:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80009f2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f6:	2208      	movs	r2, #8
 80009f8:	e767      	b.n	80008ca <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80009fa:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000a54 <HAL_GPIO_Init+0x1d4>
 80009fe:	454d      	cmp	r5, r9
 8000a00:	d0f1      	beq.n	80009e6 <HAL_GPIO_Init+0x166>
 8000a02:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000a06:	454d      	cmp	r5, r9
 8000a08:	d0ed      	beq.n	80009e6 <HAL_GPIO_Init+0x166>
 8000a0a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000a0e:	e7e7      	b.n	80009e0 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a10:	2200      	movs	r2, #0
 8000a12:	e75a      	b.n	80008ca <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a14:	68ca      	ldr	r2, [r1, #12]
          break;
 8000a16:	e758      	b.n	80008ca <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a18:	68ca      	ldr	r2, [r1, #12]
 8000a1a:	3208      	adds	r2, #8
          break;
 8000a1c:	e755      	b.n	80008ca <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a1e:	68ca      	ldr	r2, [r1, #12]
 8000a20:	320c      	adds	r2, #12
          break;
 8000a22:	e752      	b.n	80008ca <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a24:	2204      	movs	r2, #4
 8000a26:	e750      	b.n	80008ca <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a28:	2500      	movs	r5, #0
 8000a2a:	e79f      	b.n	800096c <HAL_GPIO_Init+0xec>
 8000a2c:	2501      	movs	r5, #1
 8000a2e:	e79d      	b.n	800096c <HAL_GPIO_Init+0xec>
 8000a30:	2502      	movs	r5, #2
 8000a32:	e79b      	b.n	800096c <HAL_GPIO_Init+0xec>
 8000a34:	2503      	movs	r5, #3
 8000a36:	e799      	b.n	800096c <HAL_GPIO_Init+0xec>
 8000a38:	2504      	movs	r5, #4
 8000a3a:	e797      	b.n	800096c <HAL_GPIO_Init+0xec>
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010400 	.word	0x40010400
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40011c00 	.word	0x40011c00
 8000a4c:	10210000 	.word	0x10210000
 8000a50:	10110000 	.word	0x10110000
 8000a54:	10310000 	.word	0x10310000

08000a58 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a58:	b10a      	cbz	r2, 8000a5e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a5a:	6101      	str	r1, [r0, #16]
 8000a5c:	4770      	bx	lr
 8000a5e:	0409      	lsls	r1, r1, #16
 8000a60:	e7fb      	b.n	8000a5a <HAL_GPIO_WritePin+0x2>
	...

08000a64 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a64:	6803      	ldr	r3, [r0, #0]
{
 8000a66:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a6a:	07db      	lsls	r3, r3, #31
{
 8000a6c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a6e:	d410      	bmi.n	8000a92 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a70:	682b      	ldr	r3, [r5, #0]
 8000a72:	079f      	lsls	r7, r3, #30
 8000a74:	d45e      	bmi.n	8000b34 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a76:	682b      	ldr	r3, [r5, #0]
 8000a78:	0719      	lsls	r1, r3, #28
 8000a7a:	f100 8095 	bmi.w	8000ba8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a7e:	682b      	ldr	r3, [r5, #0]
 8000a80:	075a      	lsls	r2, r3, #29
 8000a82:	f100 80bf 	bmi.w	8000c04 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a86:	69ea      	ldr	r2, [r5, #28]
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	f040 812d 	bne.w	8000ce8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000a8e:	2000      	movs	r0, #0
 8000a90:	e014      	b.n	8000abc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a92:	4c90      	ldr	r4, [pc, #576]	; (8000cd4 <HAL_RCC_OscConfig+0x270>)
 8000a94:	6863      	ldr	r3, [r4, #4]
 8000a96:	f003 030c 	and.w	r3, r3, #12
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	d007      	beq.n	8000aae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a9e:	6863      	ldr	r3, [r4, #4]
 8000aa0:	f003 030c 	and.w	r3, r3, #12
 8000aa4:	2b08      	cmp	r3, #8
 8000aa6:	d10c      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x5e>
 8000aa8:	6863      	ldr	r3, [r4, #4]
 8000aaa:	03de      	lsls	r6, r3, #15
 8000aac:	d509      	bpl.n	8000ac2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	039c      	lsls	r4, r3, #14
 8000ab2:	d5dd      	bpl.n	8000a70 <HAL_RCC_OscConfig+0xc>
 8000ab4:	686b      	ldr	r3, [r5, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1da      	bne.n	8000a70 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000aba:	2001      	movs	r0, #1
}
 8000abc:	b002      	add	sp, #8
 8000abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ac2:	686b      	ldr	r3, [r5, #4]
 8000ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ac8:	d110      	bne.n	8000aec <HAL_RCC_OscConfig+0x88>
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ad2:	f7ff fbe9 	bl	80002a8 <HAL_GetTick>
 8000ad6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad8:	6823      	ldr	r3, [r4, #0]
 8000ada:	0398      	lsls	r0, r3, #14
 8000adc:	d4c8      	bmi.n	8000a70 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ade:	f7ff fbe3 	bl	80002a8 <HAL_GetTick>
 8000ae2:	1b80      	subs	r0, r0, r6
 8000ae4:	2864      	cmp	r0, #100	; 0x64
 8000ae6:	d9f7      	bls.n	8000ad8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000ae8:	2003      	movs	r0, #3
 8000aea:	e7e7      	b.n	8000abc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aec:	b99b      	cbnz	r3, 8000b16 <HAL_RCC_OscConfig+0xb2>
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000af4:	6023      	str	r3, [r4, #0]
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000afc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000afe:	f7ff fbd3 	bl	80002a8 <HAL_GetTick>
 8000b02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	0399      	lsls	r1, r3, #14
 8000b08:	d5b2      	bpl.n	8000a70 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b0a:	f7ff fbcd 	bl	80002a8 <HAL_GetTick>
 8000b0e:	1b80      	subs	r0, r0, r6
 8000b10:	2864      	cmp	r0, #100	; 0x64
 8000b12:	d9f7      	bls.n	8000b04 <HAL_RCC_OscConfig+0xa0>
 8000b14:	e7e8      	b.n	8000ae8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	d103      	bne.n	8000b26 <HAL_RCC_OscConfig+0xc2>
 8000b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b22:	6023      	str	r3, [r4, #0]
 8000b24:	e7d1      	b.n	8000aca <HAL_RCC_OscConfig+0x66>
 8000b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b2a:	6023      	str	r3, [r4, #0]
 8000b2c:	6823      	ldr	r3, [r4, #0]
 8000b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b32:	e7cd      	b.n	8000ad0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b34:	4c67      	ldr	r4, [pc, #412]	; (8000cd4 <HAL_RCC_OscConfig+0x270>)
 8000b36:	6863      	ldr	r3, [r4, #4]
 8000b38:	f013 0f0c 	tst.w	r3, #12
 8000b3c:	d007      	beq.n	8000b4e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b3e:	6863      	ldr	r3, [r4, #4]
 8000b40:	f003 030c 	and.w	r3, r3, #12
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	d110      	bne.n	8000b6a <HAL_RCC_OscConfig+0x106>
 8000b48:	6863      	ldr	r3, [r4, #4]
 8000b4a:	03da      	lsls	r2, r3, #15
 8000b4c:	d40d      	bmi.n	8000b6a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	079b      	lsls	r3, r3, #30
 8000b52:	d502      	bpl.n	8000b5a <HAL_RCC_OscConfig+0xf6>
 8000b54:	692b      	ldr	r3, [r5, #16]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d1af      	bne.n	8000aba <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	696a      	ldr	r2, [r5, #20]
 8000b5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b62:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b66:	6023      	str	r3, [r4, #0]
 8000b68:	e785      	b.n	8000a76 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b6a:	692a      	ldr	r2, [r5, #16]
 8000b6c:	4b5a      	ldr	r3, [pc, #360]	; (8000cd8 <HAL_RCC_OscConfig+0x274>)
 8000b6e:	b16a      	cbz	r2, 8000b8c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b74:	f7ff fb98 	bl	80002a8 <HAL_GetTick>
 8000b78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	079f      	lsls	r7, r3, #30
 8000b7e:	d4ec      	bmi.n	8000b5a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b80:	f7ff fb92 	bl	80002a8 <HAL_GetTick>
 8000b84:	1b80      	subs	r0, r0, r6
 8000b86:	2802      	cmp	r0, #2
 8000b88:	d9f7      	bls.n	8000b7a <HAL_RCC_OscConfig+0x116>
 8000b8a:	e7ad      	b.n	8000ae8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000b8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b8e:	f7ff fb8b 	bl	80002a8 <HAL_GetTick>
 8000b92:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	0798      	lsls	r0, r3, #30
 8000b98:	f57f af6d 	bpl.w	8000a76 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b9c:	f7ff fb84 	bl	80002a8 <HAL_GetTick>
 8000ba0:	1b80      	subs	r0, r0, r6
 8000ba2:	2802      	cmp	r0, #2
 8000ba4:	d9f6      	bls.n	8000b94 <HAL_RCC_OscConfig+0x130>
 8000ba6:	e79f      	b.n	8000ae8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ba8:	69aa      	ldr	r2, [r5, #24]
 8000baa:	4c4a      	ldr	r4, [pc, #296]	; (8000cd4 <HAL_RCC_OscConfig+0x270>)
 8000bac:	4b4b      	ldr	r3, [pc, #300]	; (8000cdc <HAL_RCC_OscConfig+0x278>)
 8000bae:	b1da      	cbz	r2, 8000be8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bb4:	f7ff fb78 	bl	80002a8 <HAL_GetTick>
 8000bb8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bbc:	079b      	lsls	r3, r3, #30
 8000bbe:	d50d      	bpl.n	8000bdc <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000bc0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000bc4:	4b46      	ldr	r3, [pc, #280]	; (8000ce0 <HAL_RCC_OscConfig+0x27c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bcc:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000bce:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000bd0:	9b01      	ldr	r3, [sp, #4]
 8000bd2:	1e5a      	subs	r2, r3, #1
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1f9      	bne.n	8000bce <HAL_RCC_OscConfig+0x16a>
 8000bda:	e750      	b.n	8000a7e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bdc:	f7ff fb64 	bl	80002a8 <HAL_GetTick>
 8000be0:	1b80      	subs	r0, r0, r6
 8000be2:	2802      	cmp	r0, #2
 8000be4:	d9e9      	bls.n	8000bba <HAL_RCC_OscConfig+0x156>
 8000be6:	e77f      	b.n	8000ae8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000be8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bea:	f7ff fb5d 	bl	80002a8 <HAL_GetTick>
 8000bee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bf2:	079f      	lsls	r7, r3, #30
 8000bf4:	f57f af43 	bpl.w	8000a7e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bf8:	f7ff fb56 	bl	80002a8 <HAL_GetTick>
 8000bfc:	1b80      	subs	r0, r0, r6
 8000bfe:	2802      	cmp	r0, #2
 8000c00:	d9f6      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x18c>
 8000c02:	e771      	b.n	8000ae8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c04:	4c33      	ldr	r4, [pc, #204]	; (8000cd4 <HAL_RCC_OscConfig+0x270>)
 8000c06:	69e3      	ldr	r3, [r4, #28]
 8000c08:	00d8      	lsls	r0, r3, #3
 8000c0a:	d424      	bmi.n	8000c56 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000c0c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	69e3      	ldr	r3, [r4, #28]
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	61e3      	str	r3, [r4, #28]
 8000c16:	69e3      	ldr	r3, [r4, #28]
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c20:	4e30      	ldr	r6, [pc, #192]	; (8000ce4 <HAL_RCC_OscConfig+0x280>)
 8000c22:	6833      	ldr	r3, [r6, #0]
 8000c24:	05d9      	lsls	r1, r3, #23
 8000c26:	d518      	bpl.n	8000c5a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c28:	68eb      	ldr	r3, [r5, #12]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d126      	bne.n	8000c7c <HAL_RCC_OscConfig+0x218>
 8000c2e:	6a23      	ldr	r3, [r4, #32]
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c36:	f7ff fb37 	bl	80002a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c3a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c3e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c40:	6a23      	ldr	r3, [r4, #32]
 8000c42:	079b      	lsls	r3, r3, #30
 8000c44:	d53f      	bpl.n	8000cc6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000c46:	2f00      	cmp	r7, #0
 8000c48:	f43f af1d 	beq.w	8000a86 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c4c:	69e3      	ldr	r3, [r4, #28]
 8000c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c52:	61e3      	str	r3, [r4, #28]
 8000c54:	e717      	b.n	8000a86 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000c56:	2700      	movs	r7, #0
 8000c58:	e7e2      	b.n	8000c20 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c5a:	6833      	ldr	r3, [r6, #0]
 8000c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c60:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c62:	f7ff fb21 	bl	80002a8 <HAL_GetTick>
 8000c66:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c68:	6833      	ldr	r3, [r6, #0]
 8000c6a:	05da      	lsls	r2, r3, #23
 8000c6c:	d4dc      	bmi.n	8000c28 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c6e:	f7ff fb1b 	bl	80002a8 <HAL_GetTick>
 8000c72:	eba0 0008 	sub.w	r0, r0, r8
 8000c76:	2864      	cmp	r0, #100	; 0x64
 8000c78:	d9f6      	bls.n	8000c68 <HAL_RCC_OscConfig+0x204>
 8000c7a:	e735      	b.n	8000ae8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c7c:	b9ab      	cbnz	r3, 8000caa <HAL_RCC_OscConfig+0x246>
 8000c7e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c80:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c84:	f023 0301 	bic.w	r3, r3, #1
 8000c88:	6223      	str	r3, [r4, #32]
 8000c8a:	6a23      	ldr	r3, [r4, #32]
 8000c8c:	f023 0304 	bic.w	r3, r3, #4
 8000c90:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c92:	f7ff fb09 	bl	80002a8 <HAL_GetTick>
 8000c96:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c98:	6a23      	ldr	r3, [r4, #32]
 8000c9a:	0798      	lsls	r0, r3, #30
 8000c9c:	d5d3      	bpl.n	8000c46 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c9e:	f7ff fb03 	bl	80002a8 <HAL_GetTick>
 8000ca2:	1b80      	subs	r0, r0, r6
 8000ca4:	4540      	cmp	r0, r8
 8000ca6:	d9f7      	bls.n	8000c98 <HAL_RCC_OscConfig+0x234>
 8000ca8:	e71e      	b.n	8000ae8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000caa:	2b05      	cmp	r3, #5
 8000cac:	6a23      	ldr	r3, [r4, #32]
 8000cae:	d103      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x254>
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6223      	str	r3, [r4, #32]
 8000cb6:	e7ba      	b.n	8000c2e <HAL_RCC_OscConfig+0x1ca>
 8000cb8:	f023 0301 	bic.w	r3, r3, #1
 8000cbc:	6223      	str	r3, [r4, #32]
 8000cbe:	6a23      	ldr	r3, [r4, #32]
 8000cc0:	f023 0304 	bic.w	r3, r3, #4
 8000cc4:	e7b6      	b.n	8000c34 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cc6:	f7ff faef 	bl	80002a8 <HAL_GetTick>
 8000cca:	eba0 0008 	sub.w	r0, r0, r8
 8000cce:	42b0      	cmp	r0, r6
 8000cd0:	d9b6      	bls.n	8000c40 <HAL_RCC_OscConfig+0x1dc>
 8000cd2:	e709      	b.n	8000ae8 <HAL_RCC_OscConfig+0x84>
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	42420000 	.word	0x42420000
 8000cdc:	42420480 	.word	0x42420480
 8000ce0:	20000010 	.word	0x20000010
 8000ce4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ce8:	4c22      	ldr	r4, [pc, #136]	; (8000d74 <HAL_RCC_OscConfig+0x310>)
 8000cea:	6863      	ldr	r3, [r4, #4]
 8000cec:	f003 030c 	and.w	r3, r3, #12
 8000cf0:	2b08      	cmp	r3, #8
 8000cf2:	f43f aee2 	beq.w	8000aba <HAL_RCC_OscConfig+0x56>
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	4e1f      	ldr	r6, [pc, #124]	; (8000d78 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cfa:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000cfc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cfe:	d12b      	bne.n	8000d58 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000d00:	f7ff fad2 	bl	80002a8 <HAL_GetTick>
 8000d04:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	0199      	lsls	r1, r3, #6
 8000d0a:	d41f      	bmi.n	8000d4c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d0c:	6a2b      	ldr	r3, [r5, #32]
 8000d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d12:	d105      	bne.n	8000d20 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d14:	6862      	ldr	r2, [r4, #4]
 8000d16:	68a9      	ldr	r1, [r5, #8]
 8000d18:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d20:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d22:	6862      	ldr	r2, [r4, #4]
 8000d24:	430b      	orrs	r3, r1
 8000d26:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d2e:	2301      	movs	r3, #1
 8000d30:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d32:	f7ff fab9 	bl	80002a8 <HAL_GetTick>
 8000d36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	019a      	lsls	r2, r3, #6
 8000d3c:	f53f aea7 	bmi.w	8000a8e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d40:	f7ff fab2 	bl	80002a8 <HAL_GetTick>
 8000d44:	1b40      	subs	r0, r0, r5
 8000d46:	2802      	cmp	r0, #2
 8000d48:	d9f6      	bls.n	8000d38 <HAL_RCC_OscConfig+0x2d4>
 8000d4a:	e6cd      	b.n	8000ae8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d4c:	f7ff faac 	bl	80002a8 <HAL_GetTick>
 8000d50:	1bc0      	subs	r0, r0, r7
 8000d52:	2802      	cmp	r0, #2
 8000d54:	d9d7      	bls.n	8000d06 <HAL_RCC_OscConfig+0x2a2>
 8000d56:	e6c7      	b.n	8000ae8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000d58:	f7ff faa6 	bl	80002a8 <HAL_GetTick>
 8000d5c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d5e:	6823      	ldr	r3, [r4, #0]
 8000d60:	019b      	lsls	r3, r3, #6
 8000d62:	f57f ae94 	bpl.w	8000a8e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d66:	f7ff fa9f 	bl	80002a8 <HAL_GetTick>
 8000d6a:	1b40      	subs	r0, r0, r5
 8000d6c:	2802      	cmp	r0, #2
 8000d6e:	d9f6      	bls.n	8000d5e <HAL_RCC_OscConfig+0x2fa>
 8000d70:	e6ba      	b.n	8000ae8 <HAL_RCC_OscConfig+0x84>
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000
 8000d78:	42420060 	.word	0x42420060

08000d7c <HAL_RCC_GetSysClockFreq>:
{
 8000d7c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000d80:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d82:	ac02      	add	r4, sp, #8
 8000d84:	f103 0510 	add.w	r5, r3, #16
 8000d88:	4622      	mov	r2, r4
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	6859      	ldr	r1, [r3, #4]
 8000d8e:	3308      	adds	r3, #8
 8000d90:	c203      	stmia	r2!, {r0, r1}
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	4614      	mov	r4, r2
 8000d96:	d1f7      	bne.n	8000d88 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f88d 3004 	strb.w	r3, [sp, #4]
 8000d9e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000da0:	4911      	ldr	r1, [pc, #68]	; (8000de8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000da2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000da6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000da8:	f003 020c 	and.w	r2, r3, #12
 8000dac:	2a08      	cmp	r2, #8
 8000dae:	d117      	bne.n	8000de0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000db0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000db4:	a806      	add	r0, sp, #24
 8000db6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000db8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000dba:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000dbe:	d50c      	bpl.n	8000dda <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dc0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000dc2:	480a      	ldr	r0, [pc, #40]	; (8000dec <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dc4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000dc8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dca:	aa06      	add	r2, sp, #24
 8000dcc:	4413      	add	r3, r2
 8000dce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000dd2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000dd6:	b007      	add	sp, #28
 8000dd8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ddc:	4350      	muls	r0, r2
 8000dde:	e7fa      	b.n	8000dd6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000de2:	e7f8      	b.n	8000dd6 <HAL_RCC_GetSysClockFreq+0x5a>
 8000de4:	080034bc 	.word	0x080034bc
 8000de8:	40021000 	.word	0x40021000
 8000dec:	007a1200 	.word	0x007a1200
 8000df0:	003d0900 	.word	0x003d0900

08000df4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000df4:	4a4d      	ldr	r2, [pc, #308]	; (8000f2c <HAL_RCC_ClockConfig+0x138>)
{
 8000df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dfa:	6813      	ldr	r3, [r2, #0]
{
 8000dfc:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	428b      	cmp	r3, r1
{
 8000e04:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e06:	d328      	bcc.n	8000e5a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e08:	682a      	ldr	r2, [r5, #0]
 8000e0a:	0791      	lsls	r1, r2, #30
 8000e0c:	d432      	bmi.n	8000e74 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e0e:	07d2      	lsls	r2, r2, #31
 8000e10:	d438      	bmi.n	8000e84 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e12:	4a46      	ldr	r2, [pc, #280]	; (8000f2c <HAL_RCC_ClockConfig+0x138>)
 8000e14:	6813      	ldr	r3, [r2, #0]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	429e      	cmp	r6, r3
 8000e1c:	d373      	bcc.n	8000f06 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e1e:	682a      	ldr	r2, [r5, #0]
 8000e20:	4c43      	ldr	r4, [pc, #268]	; (8000f30 <HAL_RCC_ClockConfig+0x13c>)
 8000e22:	f012 0f04 	tst.w	r2, #4
 8000e26:	d179      	bne.n	8000f1c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e28:	0713      	lsls	r3, r2, #28
 8000e2a:	d506      	bpl.n	8000e3a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	692a      	ldr	r2, [r5, #16]
 8000e30:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e34:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e38:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e3a:	f7ff ff9f 	bl	8000d7c <HAL_RCC_GetSysClockFreq>
 8000e3e:	6863      	ldr	r3, [r4, #4]
 8000e40:	4a3c      	ldr	r2, [pc, #240]	; (8000f34 <HAL_RCC_ClockConfig+0x140>)
 8000e42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e46:	5cd3      	ldrb	r3, [r2, r3]
 8000e48:	40d8      	lsrs	r0, r3
 8000e4a:	4b3b      	ldr	r3, [pc, #236]	; (8000f38 <HAL_RCC_ClockConfig+0x144>)
 8000e4c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff f9e8 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 8000e54:	2000      	movs	r0, #0
}
 8000e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	f023 0307 	bic.w	r3, r3, #7
 8000e60:	430b      	orrs	r3, r1
 8000e62:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e64:	6813      	ldr	r3, [r2, #0]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	d0cc      	beq.n	8000e08 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000e6e:	2001      	movs	r0, #1
 8000e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e74:	492e      	ldr	r1, [pc, #184]	; (8000f30 <HAL_RCC_ClockConfig+0x13c>)
 8000e76:	68a8      	ldr	r0, [r5, #8]
 8000e78:	684b      	ldr	r3, [r1, #4]
 8000e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e7e:	4303      	orrs	r3, r0
 8000e80:	604b      	str	r3, [r1, #4]
 8000e82:	e7c4      	b.n	8000e0e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e84:	686a      	ldr	r2, [r5, #4]
 8000e86:	4c2a      	ldr	r4, [pc, #168]	; (8000f30 <HAL_RCC_ClockConfig+0x13c>)
 8000e88:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e8c:	d11c      	bne.n	8000ec8 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e92:	d0ec      	beq.n	8000e6e <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e94:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e96:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e9a:	f023 0303 	bic.w	r3, r3, #3
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000ea2:	f7ff fa01 	bl	80002a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ea6:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000ea8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d114      	bne.n	8000ed8 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eae:	6863      	ldr	r3, [r4, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d0ac      	beq.n	8000e12 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eb8:	f7ff f9f6 	bl	80002a8 <HAL_GetTick>
 8000ebc:	1bc0      	subs	r0, r0, r7
 8000ebe:	4540      	cmp	r0, r8
 8000ec0:	d9f5      	bls.n	8000eae <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ec8:	2a02      	cmp	r2, #2
 8000eca:	d102      	bne.n	8000ed2 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ecc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ed0:	e7df      	b.n	8000e92 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed2:	f013 0f02 	tst.w	r3, #2
 8000ed6:	e7dc      	b.n	8000e92 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d10f      	bne.n	8000efc <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000edc:	6863      	ldr	r3, [r4, #4]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d095      	beq.n	8000e12 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ee6:	f7ff f9df 	bl	80002a8 <HAL_GetTick>
 8000eea:	1bc0      	subs	r0, r0, r7
 8000eec:	4540      	cmp	r0, r8
 8000eee:	d9f5      	bls.n	8000edc <HAL_RCC_ClockConfig+0xe8>
 8000ef0:	e7e7      	b.n	8000ec2 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef2:	f7ff f9d9 	bl	80002a8 <HAL_GetTick>
 8000ef6:	1bc0      	subs	r0, r0, r7
 8000ef8:	4540      	cmp	r0, r8
 8000efa:	d8e2      	bhi.n	8000ec2 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	f013 0f0c 	tst.w	r3, #12
 8000f02:	d1f6      	bne.n	8000ef2 <HAL_RCC_ClockConfig+0xfe>
 8000f04:	e785      	b.n	8000e12 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f06:	6813      	ldr	r3, [r2, #0]
 8000f08:	f023 0307 	bic.w	r3, r3, #7
 8000f0c:	4333      	orrs	r3, r6
 8000f0e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f10:	6813      	ldr	r3, [r2, #0]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	429e      	cmp	r6, r3
 8000f18:	d1a9      	bne.n	8000e6e <HAL_RCC_ClockConfig+0x7a>
 8000f1a:	e780      	b.n	8000e1e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f1c:	6863      	ldr	r3, [r4, #4]
 8000f1e:	68e9      	ldr	r1, [r5, #12]
 8000f20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f24:	430b      	orrs	r3, r1
 8000f26:	6063      	str	r3, [r4, #4]
 8000f28:	e77e      	b.n	8000e28 <HAL_RCC_ClockConfig+0x34>
 8000f2a:	bf00      	nop
 8000f2c:	40022000 	.word	0x40022000
 8000f30:	40021000 	.word	0x40021000
 8000f34:	080034ed 	.word	0x080034ed
 8000f38:	20000010 	.word	0x20000010

08000f3c <HAL_RCC_GetHCLKFreq>:
}
 8000f3c:	4b01      	ldr	r3, [pc, #4]	; (8000f44 <HAL_RCC_GetHCLKFreq+0x8>)
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000010 	.word	0x20000010

08000f48 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000f52:	5cd3      	ldrb	r3, [r2, r3]
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f56:	6810      	ldr	r0, [r2, #0]
}    
 8000f58:	40d8      	lsrs	r0, r3
 8000f5a:	4770      	bx	lr
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	080034fd 	.word	0x080034fd
 8000f64:	20000010 	.word	0x20000010

08000f68 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	4a03      	ldr	r2, [pc, #12]	; (8000f84 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f76:	6810      	ldr	r0, [r2, #0]
} 
 8000f78:	40d8      	lsrs	r0, r3
 8000f7a:	4770      	bx	lr
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	080034fd 	.word	0x080034fd
 8000f84:	20000010 	.word	0x20000010

08000f88 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f88:	6803      	ldr	r3, [r0, #0]
{
 8000f8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f8e:	07d9      	lsls	r1, r3, #31
{
 8000f90:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f92:	d520      	bpl.n	8000fd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f94:	4c35      	ldr	r4, [pc, #212]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000f96:	69e3      	ldr	r3, [r4, #28]
 8000f98:	00da      	lsls	r2, r3, #3
 8000f9a:	d432      	bmi.n	8001002 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000f9c:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	69e3      	ldr	r3, [r4, #28]
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	61e3      	str	r3, [r4, #28]
 8000fa6:	69e3      	ldr	r3, [r4, #28]
 8000fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb0:	4e2f      	ldr	r6, [pc, #188]	; (8001070 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000fb2:	6833      	ldr	r3, [r6, #0]
 8000fb4:	05db      	lsls	r3, r3, #23
 8000fb6:	d526      	bpl.n	8001006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000fb8:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000fba:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000fbe:	d136      	bne.n	800102e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000fc0:	6a23      	ldr	r3, [r4, #32]
 8000fc2:	686a      	ldr	r2, [r5, #4]
 8000fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fcc:	b11f      	cbz	r7, 8000fd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fce:	69e3      	ldr	r3, [r4, #28]
 8000fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000fd6:	6828      	ldr	r0, [r5, #0]
 8000fd8:	0783      	lsls	r3, r0, #30
 8000fda:	d506      	bpl.n	8000fea <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000fdc:	4a23      	ldr	r2, [pc, #140]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000fde:	68a9      	ldr	r1, [r5, #8]
 8000fe0:	6853      	ldr	r3, [r2, #4]
 8000fe2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000fea:	f010 0010 	ands.w	r0, r0, #16
 8000fee:	d01b      	beq.n	8001028 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000ff0:	4a1e      	ldr	r2, [pc, #120]	; (800106c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000ff2:	6969      	ldr	r1, [r5, #20]
 8000ff4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000ff6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000ff8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	6053      	str	r3, [r2, #4]
 8001000:	e012      	b.n	8001028 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001002:	2700      	movs	r7, #0
 8001004:	e7d4      	b.n	8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001006:	6833      	ldr	r3, [r6, #0]
 8001008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800100e:	f7ff f94b 	bl	80002a8 <HAL_GetTick>
 8001012:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001014:	6833      	ldr	r3, [r6, #0]
 8001016:	05d8      	lsls	r0, r3, #23
 8001018:	d4ce      	bmi.n	8000fb8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800101a:	f7ff f945 	bl	80002a8 <HAL_GetTick>
 800101e:	eba0 0008 	sub.w	r0, r0, r8
 8001022:	2864      	cmp	r0, #100	; 0x64
 8001024:	d9f6      	bls.n	8001014 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001026:	2003      	movs	r0, #3
}
 8001028:	b002      	add	sp, #8
 800102a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800102e:	686a      	ldr	r2, [r5, #4]
 8001030:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001034:	4293      	cmp	r3, r2
 8001036:	d0c3      	beq.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001038:	2001      	movs	r0, #1
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800103c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800103e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001040:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001042:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001046:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001048:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800104a:	07d9      	lsls	r1, r3, #31
 800104c:	d5b8      	bpl.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800104e:	f7ff f92b 	bl	80002a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001052:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001056:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001058:	6a23      	ldr	r3, [r4, #32]
 800105a:	079a      	lsls	r2, r3, #30
 800105c:	d4b0      	bmi.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105e:	f7ff f923 	bl	80002a8 <HAL_GetTick>
 8001062:	1b80      	subs	r0, r0, r6
 8001064:	4540      	cmp	r0, r8
 8001066:	d9f7      	bls.n	8001058 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001068:	e7dd      	b.n	8001026 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	40007000 	.word	0x40007000
 8001074:	42420440 	.word	0x42420440

08001078 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001078:	4602      	mov	r2, r0
 800107a:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800107c:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
{
 800107e:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001080:	ad02      	add	r5, sp, #8
 8001082:	f103 0610 	add.w	r6, r3, #16
 8001086:	462c      	mov	r4, r5
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	6859      	ldr	r1, [r3, #4]
 800108c:	3308      	adds	r3, #8
 800108e:	c403      	stmia	r4!, {r0, r1}
 8001090:	42b3      	cmp	r3, r6
 8001092:	4625      	mov	r5, r4
 8001094:	d1f7      	bne.n	8001086 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001096:	2301      	movs	r3, #1
 8001098:	f88d 3004 	strb.w	r3, [sp, #4]
 800109c:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800109e:	1e50      	subs	r0, r2, #1
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010a0:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 80010a4:	280f      	cmp	r0, #15
 80010a6:	d85e      	bhi.n	8001166 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80010a8:	e8df f000 	tbb	[pc, r0]
 80010ac:	2d5d5132 	.word	0x2d5d5132
 80010b0:	2d5d5d5d 	.word	0x2d5d5d5d
 80010b4:	5d5d5d5d 	.word	0x5d5d5d5d
 80010b8:	085d5d5d 	.word	0x085d5d5d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80010bc:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80010be:	6859      	ldr	r1, [r3, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80010c6:	d037      	beq.n	8001138 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010c8:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80010cc:	a806      	add	r0, sp, #24
 80010ce:	4402      	add	r2, r0
 80010d0:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010d4:	03ca      	lsls	r2, r1, #15
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010d6:	bf41      	itttt	mi
 80010d8:	685a      	ldrmi	r2, [r3, #4]
 80010da:	a906      	addmi	r1, sp, #24
 80010dc:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80010e0:	1852      	addmi	r2, r2, r1
 80010e2:	bf44      	itt	mi
 80010e4:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80010e8:	4a22      	ldrmi	r2, [pc, #136]	; (8001174 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80010ea:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80010ec:	bf4c      	ite	mi
 80010ee:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010f2:	4a21      	ldrpl	r2, [pc, #132]	; (8001178 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80010f4:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010f6:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80010fa:	d41d      	bmi.n	8001138 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 80010fc:	2303      	movs	r3, #3
 80010fe:	0040      	lsls	r0, r0, #1
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001100:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001104:	e018      	b.n	8001138 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
    {
      break;
    }
  }
  return(frequency);
}
 8001106:	b006      	add	sp, #24
 8001108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      frequency = HAL_RCC_GetSysClockFreq();
 800110c:	f7ff be36 	b.w	8000d7c <HAL_RCC_GetSysClockFreq>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001110:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001114:	4a16      	ldr	r2, [pc, #88]	; (8001170 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8001116:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001118:	4019      	ands	r1, r3
 800111a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800111e:	d01f      	beq.n	8001160 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001128:	d108      	bne.n	800113c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        frequency = LSI_VALUE;
 800112a:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800112e:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8001130:	f013 0f02 	tst.w	r3, #2
        frequency = HSE_VALUE / 128U;
 8001134:	bf08      	it	eq
 8001136:	2000      	moveq	r0, #0
}
 8001138:	b006      	add	sp, #24
 800113a:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800113c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001140:	d111      	bne.n	8001166 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8001142:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001144:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001148:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800114c:	e7f2      	b.n	8001134 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800114e:	f7ff ff0b 	bl	8000f68 <HAL_RCC_GetPCLK2Freq>
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800115a:	3301      	adds	r3, #1
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	e7cf      	b.n	8001100 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        frequency = LSE_VALUE;
 8001160:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001164:	e7e8      	b.n	8001138 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
        frequency = 0U;
 8001166:	2000      	movs	r0, #0
 8001168:	e7e6      	b.n	8001138 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800116a:	bf00      	nop
 800116c:	080034cc 	.word	0x080034cc
 8001170:	40021000 	.word	0x40021000
 8001174:	007a1200 	.word	0x007a1200
 8001178:	003d0900 	.word	0x003d0900

0800117c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800117c:	6a03      	ldr	r3, [r0, #32]
{
 800117e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001180:	f023 0301 	bic.w	r3, r3, #1
 8001184:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001186:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001188:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800118a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800118c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800118e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001192:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001194:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001196:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800119a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800119c:	4d0e      	ldr	r5, [pc, #56]	; (80011d8 <TIM_OC1_SetConfig+0x5c>)
 800119e:	42a8      	cmp	r0, r5
 80011a0:	d002      	beq.n	80011a8 <TIM_OC1_SetConfig+0x2c>
 80011a2:	4e0e      	ldr	r6, [pc, #56]	; (80011dc <TIM_OC1_SetConfig+0x60>)
 80011a4:	42b0      	cmp	r0, r6
 80011a6:	d110      	bne.n	80011ca <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80011a8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80011aa:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80011ae:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80011b0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80011b2:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80011b6:	d002      	beq.n	80011be <TIM_OC1_SetConfig+0x42>
 80011b8:	4d08      	ldr	r5, [pc, #32]	; (80011dc <TIM_OC1_SetConfig+0x60>)
 80011ba:	42a8      	cmp	r0, r5
 80011bc:	d105      	bne.n	80011ca <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80011be:	694d      	ldr	r5, [r1, #20]
 80011c0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80011c2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80011c6:	4335      	orrs	r5, r6
 80011c8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80011cc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80011ce:	684a      	ldr	r2, [r1, #4]
 80011d0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011d2:	6203      	str	r3, [r0, #32]
 80011d4:	bd70      	pop	{r4, r5, r6, pc}
 80011d6:	bf00      	nop
 80011d8:	40012c00 	.word	0x40012c00
 80011dc:	40013400 	.word	0x40013400

080011e0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80011e0:	6a03      	ldr	r3, [r0, #32]
{
 80011e2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80011e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80011ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80011ee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80011f2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80011f6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80011f8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80011fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80011fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001202:	4d11      	ldr	r5, [pc, #68]	; (8001248 <TIM_OC3_SetConfig+0x68>)
 8001204:	42a8      	cmp	r0, r5
 8001206:	d003      	beq.n	8001210 <TIM_OC3_SetConfig+0x30>
 8001208:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800120c:	42a8      	cmp	r0, r5
 800120e:	d114      	bne.n	800123a <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001210:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001216:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800121a:	4d0b      	ldr	r5, [pc, #44]	; (8001248 <TIM_OC3_SetConfig+0x68>)
    tmpccer &= ~TIM_CCER_CC3NE;
 800121c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001220:	42a8      	cmp	r0, r5
 8001222:	d003      	beq.n	800122c <TIM_OC3_SetConfig+0x4c>
 8001224:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001228:	42a8      	cmp	r0, r5
 800122a:	d106      	bne.n	800123a <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800122c:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800122e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001230:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001234:	4335      	orrs	r5, r6
 8001236:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800123a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800123c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800123e:	684a      	ldr	r2, [r1, #4]
 8001240:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001242:	6203      	str	r3, [r0, #32]
 8001244:	bd70      	pop	{r4, r5, r6, pc}
 8001246:	bf00      	nop
 8001248:	40012c00 	.word	0x40012c00

0800124c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800124c:	6a03      	ldr	r3, [r0, #32]
{
 800124e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001250:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001254:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001256:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001258:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800125a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800125c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800125e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001262:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001266:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800126c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001270:	4d08      	ldr	r5, [pc, #32]	; (8001294 <TIM_OC4_SetConfig+0x48>)
 8001272:	42a8      	cmp	r0, r5
 8001274:	d003      	beq.n	800127e <TIM_OC4_SetConfig+0x32>
 8001276:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800127a:	42a8      	cmp	r0, r5
 800127c:	d104      	bne.n	8001288 <TIM_OC4_SetConfig+0x3c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800127e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001280:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001284:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001288:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800128a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800128c:	684a      	ldr	r2, [r1, #4]
 800128e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001290:	6203      	str	r3, [r0, #32]
 8001292:	bd30      	pop	{r4, r5, pc}
 8001294:	40012c00 	.word	0x40012c00

08001298 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001298:	6803      	ldr	r3, [r0, #0]
}
 800129a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	f042 0201 	orr.w	r2, r2, #1
 80012a2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
}
 80012ac:	4770      	bx	lr

080012ae <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80012ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80012b2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	f04f 0302 	mov.w	r3, #2
 80012ba:	d01c      	beq.n	80012f6 <HAL_TIM_ConfigClockSource+0x48>
 80012bc:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80012be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80012c2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80012c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80012c8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012ca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80012ce:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80012d2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80012d4:	680a      	ldr	r2, [r1, #0]
 80012d6:	2a40      	cmp	r2, #64	; 0x40
 80012d8:	d079      	beq.n	80013ce <HAL_TIM_ConfigClockSource+0x120>
 80012da:	d819      	bhi.n	8001310 <HAL_TIM_ConfigClockSource+0x62>
 80012dc:	2a10      	cmp	r2, #16
 80012de:	f000 8093 	beq.w	8001408 <HAL_TIM_ConfigClockSource+0x15a>
 80012e2:	d80a      	bhi.n	80012fa <HAL_TIM_ConfigClockSource+0x4c>
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	f000 8089 	beq.w	80013fc <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80012ea:	2301      	movs	r3, #1
 80012ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80012f0:	2300      	movs	r3, #0
 80012f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80012f6:	4618      	mov	r0, r3
}
 80012f8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80012fa:	2a20      	cmp	r2, #32
 80012fc:	f000 808a 	beq.w	8001414 <HAL_TIM_ConfigClockSource+0x166>
 8001300:	2a30      	cmp	r2, #48	; 0x30
 8001302:	d1f2      	bne.n	80012ea <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001304:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001306:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800130a:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800130e:	e036      	b.n	800137e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001310:	2a70      	cmp	r2, #112	; 0x70
 8001312:	d036      	beq.n	8001382 <HAL_TIM_ConfigClockSource+0xd4>
 8001314:	d81b      	bhi.n	800134e <HAL_TIM_ConfigClockSource+0xa0>
 8001316:	2a50      	cmp	r2, #80	; 0x50
 8001318:	d042      	beq.n	80013a0 <HAL_TIM_ConfigClockSource+0xf2>
 800131a:	2a60      	cmp	r2, #96	; 0x60
 800131c:	d1e5      	bne.n	80012ea <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800131e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001320:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001322:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001326:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001328:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800132a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800132c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800132e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001332:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001336:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800133a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800133e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001340:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001342:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001344:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001348:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800134c:	e017      	b.n	800137e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800134e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001352:	d011      	beq.n	8001378 <HAL_TIM_ConfigClockSource+0xca>
 8001354:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001358:	d1c7      	bne.n	80012ea <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800135a:	688a      	ldr	r2, [r1, #8]
 800135c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800135e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001360:	68c9      	ldr	r1, [r1, #12]
 8001362:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001364:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001368:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800136c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800136e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001376:	e002      	b.n	800137e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	e7b3      	b.n	80012ea <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001382:	688a      	ldr	r2, [r1, #8]
 8001384:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001386:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001388:	68c9      	ldr	r1, [r1, #12]
 800138a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800138c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001390:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001394:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001396:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001398:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800139a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800139e:	e7ee      	b.n	800137e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013a0:	684c      	ldr	r4, [r1, #4]
 80013a2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80013a4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013a6:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013a8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013ac:	f025 0501 	bic.w	r5, r5, #1
 80013b0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013b2:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80013b4:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013ba:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80013c0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80013c2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013c8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80013cc:	e7d7      	b.n	800137e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013ce:	684c      	ldr	r4, [r1, #4]
 80013d0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80013d2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013d4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013d6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013da:	f025 0501 	bic.w	r5, r5, #1
 80013de:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013e0:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80013e2:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013e8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80013ee:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80013f0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013f6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80013fa:	e7c0      	b.n	800137e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80013fc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001402:	f042 0207 	orr.w	r2, r2, #7
 8001406:	e7ba      	b.n	800137e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001408:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800140a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800140e:	f042 0217 	orr.w	r2, r2, #23
 8001412:	e7b4      	b.n	800137e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001414:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001416:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800141a:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800141e:	e7ae      	b.n	800137e <HAL_TIM_ConfigClockSource+0xd0>

08001420 <HAL_TIM_PeriodElapsedCallback>:
 8001420:	4770      	bx	lr

08001422 <HAL_TIM_OC_DelayElapsedCallback>:
 8001422:	4770      	bx	lr

08001424 <HAL_TIM_IC_CaptureCallback>:
 8001424:	4770      	bx	lr

08001426 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001426:	4770      	bx	lr

08001428 <HAL_TIM_TriggerCallback>:
 8001428:	4770      	bx	lr

0800142a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800142a:	6803      	ldr	r3, [r0, #0]
{
 800142c:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800142e:	691a      	ldr	r2, [r3, #16]
{
 8001430:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001432:	0791      	lsls	r1, r2, #30
 8001434:	d50e      	bpl.n	8001454 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	0792      	lsls	r2, r2, #30
 800143a:	d50b      	bpl.n	8001454 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800143c:	f06f 0202 	mvn.w	r2, #2
 8001440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001442:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001444:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001446:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001448:	079b      	lsls	r3, r3, #30
 800144a:	d077      	beq.n	800153c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800144c:	f7ff ffea 	bl	8001424 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001450:	2300      	movs	r3, #0
 8001452:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	0750      	lsls	r0, r2, #29
 800145a:	d510      	bpl.n	800147e <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	0751      	lsls	r1, r2, #29
 8001460:	d50d      	bpl.n	800147e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001462:	f06f 0204 	mvn.w	r2, #4
 8001466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001468:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800146a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800146c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800146e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001472:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001474:	d068      	beq.n	8001548 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001476:	f7ff ffd5 	bl	8001424 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800147a:	2300      	movs	r3, #0
 800147c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	0712      	lsls	r2, r2, #28
 8001484:	d50f      	bpl.n	80014a6 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	0710      	lsls	r0, r2, #28
 800148a:	d50c      	bpl.n	80014a6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800148c:	f06f 0208 	mvn.w	r2, #8
 8001490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001492:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001494:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001496:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001498:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800149a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800149c:	d05a      	beq.n	8001554 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800149e:	f7ff ffc1 	bl	8001424 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014a2:	2300      	movs	r3, #0
 80014a4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	06d2      	lsls	r2, r2, #27
 80014ac:	d510      	bpl.n	80014d0 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	06d0      	lsls	r0, r2, #27
 80014b2:	d50d      	bpl.n	80014d0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014b4:	f06f 0210 	mvn.w	r2, #16
 80014b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014ba:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014bc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014be:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014c0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80014c4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014c6:	d04b      	beq.n	8001560 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80014c8:	f7ff ffac 	bl	8001424 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014cc:	2300      	movs	r3, #0
 80014ce:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	07d1      	lsls	r1, r2, #31
 80014d6:	d508      	bpl.n	80014ea <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	07d2      	lsls	r2, r2, #31
 80014dc:	d505      	bpl.n	80014ea <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014de:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80014e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80014e6:	f7ff ff9b 	bl	8001420 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	0610      	lsls	r0, r2, #24
 80014f0:	d508      	bpl.n	8001504 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	0611      	lsls	r1, r2, #24
 80014f6:	d505      	bpl.n	8001504 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80014fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001500:	f000 f971 	bl	80017e6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	0652      	lsls	r2, r2, #25
 800150a:	d508      	bpl.n	800151e <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	0650      	lsls	r0, r2, #25
 8001510:	d505      	bpl.n	800151e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001512:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001516:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001518:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800151a:	f7ff ff85 	bl	8001428 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	0691      	lsls	r1, r2, #26
 8001524:	d522      	bpl.n	800156c <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	0692      	lsls	r2, r2, #26
 800152a:	d51f      	bpl.n	800156c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800152c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001530:	4620      	mov	r0, r4
}
 8001532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001536:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001538:	f000 b954 	b.w	80017e4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800153c:	f7ff ff71 	bl	8001422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff ff70 	bl	8001426 <HAL_TIM_PWM_PulseFinishedCallback>
 8001546:	e783      	b.n	8001450 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001548:	f7ff ff6b 	bl	8001422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800154c:	4620      	mov	r0, r4
 800154e:	f7ff ff6a 	bl	8001426 <HAL_TIM_PWM_PulseFinishedCallback>
 8001552:	e792      	b.n	800147a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001554:	f7ff ff65 	bl	8001422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001558:	4620      	mov	r0, r4
 800155a:	f7ff ff64 	bl	8001426 <HAL_TIM_PWM_PulseFinishedCallback>
 800155e:	e7a0      	b.n	80014a2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001560:	f7ff ff5f 	bl	8001422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff ff5e 	bl	8001426 <HAL_TIM_PWM_PulseFinishedCallback>
 800156a:	e7af      	b.n	80014cc <HAL_TIM_IRQHandler+0xa2>
 800156c:	bd10      	pop	{r4, pc}
	...

08001570 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001570:	4a24      	ldr	r2, [pc, #144]	; (8001604 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001572:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001574:	4290      	cmp	r0, r2
 8001576:	d012      	beq.n	800159e <TIM_Base_SetConfig+0x2e>
 8001578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800157c:	4290      	cmp	r0, r2
 800157e:	d00e      	beq.n	800159e <TIM_Base_SetConfig+0x2e>
 8001580:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001584:	d00b      	beq.n	800159e <TIM_Base_SetConfig+0x2e>
 8001586:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800158a:	4290      	cmp	r0, r2
 800158c:	d007      	beq.n	800159e <TIM_Base_SetConfig+0x2e>
 800158e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001592:	4290      	cmp	r0, r2
 8001594:	d003      	beq.n	800159e <TIM_Base_SetConfig+0x2e>
 8001596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800159a:	4290      	cmp	r0, r2
 800159c:	d11d      	bne.n	80015da <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800159e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015a4:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015a6:	4a17      	ldr	r2, [pc, #92]	; (8001604 <TIM_Base_SetConfig+0x94>)
 80015a8:	4290      	cmp	r0, r2
 80015aa:	d012      	beq.n	80015d2 <TIM_Base_SetConfig+0x62>
 80015ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015b0:	4290      	cmp	r0, r2
 80015b2:	d00e      	beq.n	80015d2 <TIM_Base_SetConfig+0x62>
 80015b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015b8:	d00b      	beq.n	80015d2 <TIM_Base_SetConfig+0x62>
 80015ba:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80015be:	4290      	cmp	r0, r2
 80015c0:	d007      	beq.n	80015d2 <TIM_Base_SetConfig+0x62>
 80015c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015c6:	4290      	cmp	r0, r2
 80015c8:	d003      	beq.n	80015d2 <TIM_Base_SetConfig+0x62>
 80015ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015ce:	4290      	cmp	r0, r2
 80015d0:	d103      	bne.n	80015da <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015d2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80015d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015d8:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80015da:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80015dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80015e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80015e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015e4:	688b      	ldr	r3, [r1, #8]
 80015e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80015e8:	680b      	ldr	r3, [r1, #0]
 80015ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <TIM_Base_SetConfig+0x94>)
 80015ee:	4298      	cmp	r0, r3
 80015f0:	d003      	beq.n	80015fa <TIM_Base_SetConfig+0x8a>
 80015f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f6:	4298      	cmp	r0, r3
 80015f8:	d101      	bne.n	80015fe <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 80015fa:	690b      	ldr	r3, [r1, #16]
 80015fc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80015fe:	2301      	movs	r3, #1
 8001600:	6143      	str	r3, [r0, #20]
 8001602:	4770      	bx	lr
 8001604:	40012c00 	.word	0x40012c00

08001608 <HAL_TIM_Base_Init>:
{
 8001608:	b510      	push	{r4, lr}
  if(htim == NULL)
 800160a:	4604      	mov	r4, r0
 800160c:	b1a0      	cbz	r0, 8001638 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800160e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001612:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001616:	b91b      	cbnz	r3, 8001620 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001618:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800161c:	f000 fdca 	bl	80021b4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001620:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001622:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001624:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001628:	1d21      	adds	r1, r4, #4
 800162a:	f7ff ffa1 	bl	8001570 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800162e:	2301      	movs	r3, #1
  return HAL_OK;
 8001630:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001632:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001636:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001638:	2001      	movs	r0, #1
}
 800163a:	bd10      	pop	{r4, pc}

0800163c <HAL_TIM_PWM_Init>:
{
 800163c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800163e:	4604      	mov	r4, r0
 8001640:	b1a0      	cbz	r0, 800166c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001642:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001646:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800164a:	b91b      	cbnz	r3, 8001654 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800164c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001650:	f000 fd7c 	bl	800214c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001654:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001656:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001658:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800165c:	1d21      	adds	r1, r4, #4
 800165e:	f7ff ff87 	bl	8001570 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001662:	2301      	movs	r3, #1
  return HAL_OK;
 8001664:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001666:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800166a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800166c:	2001      	movs	r0, #1
}
 800166e:	bd10      	pop	{r4, pc}

08001670 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001670:	6a03      	ldr	r3, [r0, #32]
{
 8001672:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001674:	f023 0310 	bic.w	r3, r3, #16
 8001678:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800167a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800167c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800167e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001680:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001682:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001686:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800168a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800168c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001690:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001694:	4d10      	ldr	r5, [pc, #64]	; (80016d8 <TIM_OC2_SetConfig+0x68>)
 8001696:	42a8      	cmp	r0, r5
 8001698:	d003      	beq.n	80016a2 <TIM_OC2_SetConfig+0x32>
 800169a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800169e:	42a8      	cmp	r0, r5
 80016a0:	d114      	bne.n	80016cc <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016a2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80016a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80016ac:	4d0a      	ldr	r5, [pc, #40]	; (80016d8 <TIM_OC2_SetConfig+0x68>)
    tmpccer &= ~TIM_CCER_CC2NE;
 80016ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80016b2:	42a8      	cmp	r0, r5
 80016b4:	d003      	beq.n	80016be <TIM_OC2_SetConfig+0x4e>
 80016b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80016ba:	42a8      	cmp	r0, r5
 80016bc:	d106      	bne.n	80016cc <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80016be:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80016c0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80016c2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80016c6:	4335      	orrs	r5, r6
 80016c8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80016cc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80016ce:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80016d0:	684a      	ldr	r2, [r1, #4]
 80016d2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80016d4:	6203      	str	r3, [r0, #32]
 80016d6:	bd70      	pop	{r4, r5, r6, pc}
 80016d8:	40012c00 	.word	0x40012c00

080016dc <HAL_TIM_PWM_ConfigChannel>:
{
 80016dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80016de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80016e2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	f04f 0002 	mov.w	r0, #2
 80016ea:	d025      	beq.n	8001738 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80016ec:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80016ee:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80016f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80016f6:	2a0c      	cmp	r2, #12
 80016f8:	d818      	bhi.n	800172c <HAL_TIM_PWM_ConfigChannel+0x50>
 80016fa:	e8df f002 	tbb	[pc, r2]
 80016fe:	1707      	.short	0x1707
 8001700:	171e1717 	.word	0x171e1717
 8001704:	172f1717 	.word	0x172f1717
 8001708:	1717      	.short	0x1717
 800170a:	40          	.byte	0x40
 800170b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800170c:	6820      	ldr	r0, [r4, #0]
 800170e:	f7ff fd35 	bl	800117c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001712:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001714:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001716:	699a      	ldr	r2, [r3, #24]
 8001718:	f042 0208 	orr.w	r2, r2, #8
 800171c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800171e:	699a      	ldr	r2, [r3, #24]
 8001720:	f022 0204 	bic.w	r2, r2, #4
 8001724:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001726:	699a      	ldr	r2, [r3, #24]
 8001728:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800172a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800172c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800172e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001730:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001734:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001738:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	f7ff ff98 	bl	8001670 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001740:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001742:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800174a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800175a:	e7e6      	b.n	800172a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800175c:	6820      	ldr	r0, [r4, #0]
 800175e:	f7ff fd3f 	bl	80011e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001762:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001764:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001766:	69da      	ldr	r2, [r3, #28]
 8001768:	f042 0208 	orr.w	r2, r2, #8
 800176c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800176e:	69da      	ldr	r2, [r3, #28]
 8001770:	f022 0204 	bic.w	r2, r2, #4
 8001774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001776:	69da      	ldr	r2, [r3, #28]
 8001778:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800177a:	61da      	str	r2, [r3, #28]
    break;
 800177c:	e7d6      	b.n	800172c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800177e:	6820      	ldr	r0, [r4, #0]
 8001780:	f7ff fd64 	bl	800124c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001784:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001786:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800178e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001796:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800179e:	e7ec      	b.n	800177a <HAL_TIM_PWM_ConfigChannel+0x9e>

080017a0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80017a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80017a4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	f04f 0302 	mov.w	r3, #2
 80017ac:	d018      	beq.n	80017e0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80017ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017b2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80017b4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017b6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017b8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017be:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4322      	orrs	r2, r4
 80017c4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017cc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80017d4:	2301      	movs	r3, #1
 80017d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017da:	2300      	movs	r3, #0
 80017dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80017e0:	4618      	mov	r0, r3

  return HAL_OK;
}
 80017e2:	bd10      	pop	{r4, pc}

080017e4 <HAL_TIMEx_CommutationCallback>:
 80017e4:	4770      	bx	lr

080017e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017e6:	4770      	bx	lr

080017e8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017ec:	6805      	ldr	r5, [r0, #0]
 80017ee:	68c2      	ldr	r2, [r0, #12]
 80017f0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017f2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017f8:	4313      	orrs	r3, r2
 80017fa:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017fc:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80017fe:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001800:	430b      	orrs	r3, r1
 8001802:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001804:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001808:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800180c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800180e:	4313      	orrs	r3, r2
 8001810:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001812:	696b      	ldr	r3, [r5, #20]
 8001814:	6982      	ldr	r2, [r0, #24]
 8001816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800181a:	4313      	orrs	r3, r2
 800181c:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <UART_SetConfig+0x138>)
{
 8001820:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001822:	429d      	cmp	r5, r3
 8001824:	f04f 0419 	mov.w	r4, #25
 8001828:	d146      	bne.n	80018b8 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800182a:	f7ff fb9d 	bl	8000f68 <HAL_RCC_GetPCLK2Freq>
 800182e:	fb04 f300 	mul.w	r3, r4, r0
 8001832:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001836:	f04f 0864 	mov.w	r8, #100	; 0x64
 800183a:	00b6      	lsls	r6, r6, #2
 800183c:	fbb3 f3f6 	udiv	r3, r3, r6
 8001840:	fbb3 f3f8 	udiv	r3, r3, r8
 8001844:	011e      	lsls	r6, r3, #4
 8001846:	f7ff fb8f 	bl	8000f68 <HAL_RCC_GetPCLK2Freq>
 800184a:	4360      	muls	r0, r4
 800184c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	fbb0 f7f3 	udiv	r7, r0, r3
 8001856:	f7ff fb87 	bl	8000f68 <HAL_RCC_GetPCLK2Freq>
 800185a:	4360      	muls	r0, r4
 800185c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	fbb0 f3f3 	udiv	r3, r0, r3
 8001866:	fbb3 f3f8 	udiv	r3, r3, r8
 800186a:	fb08 7313 	mls	r3, r8, r3, r7
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	3332      	adds	r3, #50	; 0x32
 8001872:	fbb3 f3f8 	udiv	r3, r3, r8
 8001876:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800187a:	f7ff fb75 	bl	8000f68 <HAL_RCC_GetPCLK2Freq>
 800187e:	4360      	muls	r0, r4
 8001880:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	fbb0 faf2 	udiv	sl, r0, r2
 800188a:	f7ff fb6d 	bl	8000f68 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800188e:	4360      	muls	r0, r4
 8001890:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	fbb0 f3f3 	udiv	r3, r0, r3
 800189a:	fbb3 f3f8 	udiv	r3, r3, r8
 800189e:	fb08 a313 	mls	r3, r8, r3, sl
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	3332      	adds	r3, #50	; 0x32
 80018a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	433b      	orrs	r3, r7
 80018b0:	4433      	add	r3, r6
 80018b2:	60ab      	str	r3, [r5, #8]
 80018b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018b8:	f7ff fb46 	bl	8000f48 <HAL_RCC_GetPCLK1Freq>
 80018bc:	fb04 f300 	mul.w	r3, r4, r0
 80018c0:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80018c4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80018c8:	00b6      	lsls	r6, r6, #2
 80018ca:	fbb3 f3f6 	udiv	r3, r3, r6
 80018ce:	fbb3 f3f8 	udiv	r3, r3, r8
 80018d2:	011e      	lsls	r6, r3, #4
 80018d4:	f7ff fb38 	bl	8000f48 <HAL_RCC_GetPCLK1Freq>
 80018d8:	4360      	muls	r0, r4
 80018da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	fbb0 f7f3 	udiv	r7, r0, r3
 80018e4:	f7ff fb30 	bl	8000f48 <HAL_RCC_GetPCLK1Freq>
 80018e8:	4360      	muls	r0, r4
 80018ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f4:	fbb3 f3f8 	udiv	r3, r3, r8
 80018f8:	fb08 7313 	mls	r3, r8, r3, r7
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	3332      	adds	r3, #50	; 0x32
 8001900:	fbb3 f3f8 	udiv	r3, r3, r8
 8001904:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001908:	f7ff fb1e 	bl	8000f48 <HAL_RCC_GetPCLK1Freq>
 800190c:	4360      	muls	r0, r4
 800190e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	fbb0 faf2 	udiv	sl, r0, r2
 8001918:	f7ff fb16 	bl	8000f48 <HAL_RCC_GetPCLK1Freq>
 800191c:	e7b7      	b.n	800188e <UART_SetConfig+0xa6>
 800191e:	bf00      	nop
 8001920:	40013800 	.word	0x40013800

08001924 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001926:	4604      	mov	r4, r0
 8001928:	460e      	mov	r6, r1
 800192a:	4617      	mov	r7, r2
 800192c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800192e:	6821      	ldr	r1, [r4, #0]
 8001930:	680b      	ldr	r3, [r1, #0]
 8001932:	ea36 0303 	bics.w	r3, r6, r3
 8001936:	d101      	bne.n	800193c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001938:	2000      	movs	r0, #0
}
 800193a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800193c:	1c6b      	adds	r3, r5, #1
 800193e:	d0f7      	beq.n	8001930 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001940:	b995      	cbnz	r5, 8001968 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001942:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001944:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800194c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001956:	2320      	movs	r3, #32
 8001958:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800195c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001960:	2300      	movs	r3, #0
 8001962:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001968:	f7fe fc9e 	bl	80002a8 <HAL_GetTick>
 800196c:	1bc0      	subs	r0, r0, r7
 800196e:	4285      	cmp	r5, r0
 8001970:	d2dd      	bcs.n	800192e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001972:	e7e6      	b.n	8001942 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001974 <HAL_UART_Init>:
{
 8001974:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001976:	4604      	mov	r4, r0
 8001978:	b340      	cbz	r0, 80019cc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800197a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800197e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001982:	b91b      	cbnz	r3, 800198c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001984:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001988:	f000 fd46 	bl	8002418 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800198c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800198e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001990:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001994:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001996:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800199c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800199e:	f7ff ff23 	bl	80017e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019a2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019b4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019bc:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80019be:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80019c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80019c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80019ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019cc:	2001      	movs	r0, #1
}
 80019ce:	bd10      	pop	{r4, pc}

080019d0 <HAL_UART_Transmit>:
{
 80019d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80019d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80019da:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 80019dc:	2b20      	cmp	r3, #32
{
 80019de:	460d      	mov	r5, r1
 80019e0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80019e2:	d14e      	bne.n	8001a82 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80019e4:	2900      	cmp	r1, #0
 80019e6:	d049      	beq.n	8001a7c <HAL_UART_Transmit+0xac>
 80019e8:	2a00      	cmp	r2, #0
 80019ea:	d047      	beq.n	8001a7c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80019ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d046      	beq.n	8001a82 <HAL_UART_Transmit+0xb2>
 80019f4:	2301      	movs	r3, #1
 80019f6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019fe:	2321      	movs	r3, #33	; 0x21
 8001a00:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001a04:	f7fe fc50 	bl	80002a8 <HAL_GetTick>
 8001a08:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001a0a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a0e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001a12:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	b96b      	cbnz	r3, 8001a34 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	4632      	mov	r2, r6
 8001a1c:	2140      	movs	r1, #64	; 0x40
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff ff80 	bl	8001924 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a24:	b9a8      	cbnz	r0, 8001a52 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001a26:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001a28:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001a2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001a34:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a36:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a3e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a40:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a46:	4620      	mov	r0, r4
 8001a48:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a4a:	d10e      	bne.n	8001a6a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a4c:	f7ff ff6a 	bl	8001924 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a50:	b110      	cbz	r0, 8001a58 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001a52:	2003      	movs	r0, #3
 8001a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001a58:	882b      	ldrh	r3, [r5, #0]
 8001a5a:	6822      	ldr	r2, [r4, #0]
 8001a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a60:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001a62:	6923      	ldr	r3, [r4, #16]
 8001a64:	b943      	cbnz	r3, 8001a78 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001a66:	3502      	adds	r5, #2
 8001a68:	e7d3      	b.n	8001a12 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a6a:	f7ff ff5b 	bl	8001924 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d1ef      	bne.n	8001a52 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	782a      	ldrb	r2, [r5, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	3501      	adds	r5, #1
 8001a7a:	e7ca      	b.n	8001a12 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001a82:	2002      	movs	r0, #2
}
 8001a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001a8a:	4813      	ldr	r0, [pc, #76]	; (8001ad8 <MX_ADC1_Init+0x50>)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_ADC1_Init+0x54>)
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a8e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 8001a92:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a98:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a9a:	6143      	str	r3, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a9c:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a9e:	2301      	movs	r3, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aa0:	61c2      	str	r2, [r0, #28]
  hadc1.Init.NbrOfConversion = 1;
 8001aa2:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aa4:	f7fe fde8 	bl	8000678 <HAL_ADC_Init>
 8001aa8:	b118      	cbz	r0, 8001ab2 <MX_ADC1_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001aaa:	214d      	movs	r1, #77	; 0x4d
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <MX_ADC1_Init+0x58>)
 8001aae:	f000 fa4b 	bl	8001f48 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001aba:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001abc:	a901      	add	r1, sp, #4
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <MX_ADC1_Init+0x50>)
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001ac0:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac2:	f7fe fc99 	bl	80003f8 <HAL_ADC_ConfigChannel>
 8001ac6:	b118      	cbz	r0, 8001ad0 <MX_ADC1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ac8:	2157      	movs	r1, #87	; 0x57
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_ADC1_Init+0x58>)
 8001acc:	f000 fa3c 	bl	8001f48 <_Error_Handler>
  }

}
 8001ad0:	b005      	add	sp, #20
 8001ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ad6:	bf00      	nop
 8001ad8:	200000d4 	.word	0x200000d4
 8001adc:	40012400 	.word	0x40012400
 8001ae0:	080034dc 	.word	0x080034dc

08001ae4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
 8001ae6:	4813      	ldr	r0, [pc, #76]	; (8001b34 <MX_ADC2_Init+0x50>)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_ADC2_Init+0x54>)
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc2.Instance = ADC2;
 8001aee:	6003      	str	r3, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001af4:	60c3      	str	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001af6:	6143      	str	r3, [r0, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001af8:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001afa:	2301      	movs	r3, #1
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001afc:	61c2      	str	r2, [r0, #28]
  hadc2.Init.NbrOfConversion = 1;
 8001afe:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b00:	f7fe fdba 	bl	8000678 <HAL_ADC_Init>
 8001b04:	b118      	cbz	r0, 8001b0e <MX_ADC2_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b06:	216b      	movs	r1, #107	; 0x6b
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <MX_ADC2_Init+0x58>)
 8001b0a:	f000 fa1d 	bl	8001f48 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001b16:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b18:	a901      	add	r1, sp, #4
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MX_ADC2_Init+0x50>)
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001b1c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b1e:	f7fe fc6b 	bl	80003f8 <HAL_ADC_ConfigChannel>
 8001b22:	b118      	cbz	r0, 8001b2c <MX_ADC2_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b24:	2175      	movs	r1, #117	; 0x75
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_ADC2_Init+0x58>)
 8001b28:	f000 fa0e 	bl	8001f48 <_Error_Handler>
  }

}
 8001b2c:	b005      	add	sp, #20
 8001b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b32:	bf00      	nop
 8001b34:	200000a4 	.word	0x200000a4
 8001b38:	40012800 	.word	0x40012800
 8001b3c:	080034dc 	.word	0x080034dc

08001b40 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
 8001b42:	4813      	ldr	r0, [pc, #76]	; (8001b90 <MX_ADC3_Init+0x50>)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <MX_ADC3_Init+0x54>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b46:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc3.Instance = ADC3;
 8001b4a:	6003      	str	r3, [r0, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	6083      	str	r3, [r0, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b50:	60c3      	str	r3, [r0, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b52:	6143      	str	r3, [r0, #20]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b54:	6043      	str	r3, [r0, #4]
  hadc3.Init.NbrOfConversion = 1;
 8001b56:	2301      	movs	r3, #1
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b58:	61c2      	str	r2, [r0, #28]
  hadc3.Init.NbrOfConversion = 1;
 8001b5a:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b5c:	f7fe fd8c 	bl	8000678 <HAL_ADC_Init>
 8001b60:	b118      	cbz	r0, 8001b6a <MX_ADC3_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b62:	2189      	movs	r1, #137	; 0x89
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <MX_ADC3_Init+0x58>)
 8001b66:	f000 f9ef 	bl	8001f48 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_12;
 8001b6a:	230c      	movs	r3, #12
 8001b6c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001b72:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b74:	a901      	add	r1, sp, #4
 8001b76:	4806      	ldr	r0, [pc, #24]	; (8001b90 <MX_ADC3_Init+0x50>)
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001b78:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b7a:	f7fe fc3d 	bl	80003f8 <HAL_ADC_ConfigChannel>
 8001b7e:	b118      	cbz	r0, 8001b88 <MX_ADC3_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b80:	2193      	movs	r1, #147	; 0x93
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_ADC3_Init+0x58>)
 8001b84:	f000 f9e0 	bl	8001f48 <_Error_Handler>
  }

}
 8001b88:	b005      	add	sp, #20
 8001b8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b8e:	bf00      	nop
 8001b90:	20000104 	.word	0x20000104
 8001b94:	40013c00 	.word	0x40013c00
 8001b98:	080034dc 	.word	0x080034dc

08001b9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b9c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001b9e:	6803      	ldr	r3, [r0, #0]
 8001ba0:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <HAL_ADC_MspInit+0x80>)
{
 8001ba2:	b089      	sub	sp, #36	; 0x24
  if(adcHandle->Instance==ADC1)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d10f      	bne.n	8001bc8 <HAL_ADC_MspInit+0x2c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_ADC_MspInit+0x84>)
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb0:	619a      	str	r2, [r3, #24]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	9304      	str	r3, [sp, #16]
    /**ADC3 GPIO Configuration    
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc2:	a904      	add	r1, sp, #16
 8001bc4:	4817      	ldr	r0, [pc, #92]	; (8001c24 <HAL_ADC_MspInit+0x88>)
 8001bc6:	e012      	b.n	8001bee <HAL_ADC_MspInit+0x52>
  else if(adcHandle->Instance==ADC2)
 8001bc8:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <HAL_ADC_MspInit+0x8c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d114      	bne.n	8001bf8 <HAL_ADC_MspInit+0x5c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_ADC_MspInit+0x84>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	4816      	ldr	r0, [pc, #88]	; (8001c2c <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001bd2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001bd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bda:	619a      	str	r2, [r3, #24]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001be6:	2310      	movs	r3, #16
 8001be8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bea:	2303      	movs	r3, #3
 8001bec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bee:	f7fe fe47 	bl	8000880 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001bf2:	b009      	add	sp, #36	; 0x24
 8001bf4:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(adcHandle->Instance==ADC3)
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <HAL_ADC_MspInit+0x94>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d1f9      	bne.n	8001bf2 <HAL_ADC_MspInit+0x56>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_ADC_MspInit+0x84>)
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c06:	619a      	str	r2, [r3, #24]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c0e:	9303      	str	r3, [sp, #12]
 8001c10:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c12:	230c      	movs	r3, #12
 8001c14:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e7d2      	b.n	8001bc0 <HAL_ADC_MspInit+0x24>
 8001c1a:	bf00      	nop
 8001c1c:	40012400 	.word	0x40012400
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40011000 	.word	0x40011000
 8001c28:	40012800 	.word	0x40012800
 8001c2c:	40010800 	.word	0x40010800
 8001c30:	40013c00 	.word	0x40013c00

08001c34 <update_ADC1>:
 * return   : void
********************************************************************************************/
void update_ADC1(void)
{
  ADC_ChannelConfTypeDef sConfig;
  sConfig.Rank = 1;
 8001c34:	2301      	movs	r3, #1
{
 8001c36:	b530      	push	{r4, r5, lr}
 8001c38:	b085      	sub	sp, #20
  sConfig.Rank = 1;
 8001c3a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001c3c:	2305      	movs	r3, #5
 8001c3e:	9303      	str	r3, [sp, #12]

  sConfig.Channel = ADC_CHANNEL_10;
 8001c40:	230a      	movs	r3, #10
 8001c42:	ac04      	add	r4, sp, #16
 8001c44:	f844 3d0c 	str.w	r3, [r4, #-12]!
  HAL_ADC_ConfigChannel( &hadc1, &sConfig );  // setting store
 8001c48:	4621      	mov	r1, r4
 8001c4a:	4817      	ldr	r0, [pc, #92]	; (8001ca8 <update_ADC1+0x74>)
 8001c4c:	f7fe fbd4 	bl	80003f8 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start( &hadc1 );     // ad convert start
 8001c50:	4815      	ldr	r0, [pc, #84]	; (8001ca8 <update_ADC1+0x74>)
 8001c52:	f7fe fc8d 	bl	8000570 <HAL_ADC_Start>
  while( HAL_ADC_PollForConversion( &hadc1,1000 ) != HAL_OK );
 8001c56:	4d14      	ldr	r5, [pc, #80]	; (8001ca8 <update_ADC1+0x74>)
 8001c58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	f7fe fb29 	bl	80002b4 <HAL_ADC_PollForConversion>
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d1f8      	bne.n	8001c58 <update_ADC1+0x24>
  adc1_ch10 = HAL_ADC_GetValue(&hadc1);
 8001c66:	4810      	ldr	r0, [pc, #64]	; (8001ca8 <update_ADC1+0x74>)
 8001c68:	f7fe fbc2 	bl	80003f0 <HAL_ADC_GetValue>
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <update_ADC1+0x78>)

  sConfig.Rank = 2;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;

  sConfig.Channel = ADC_CHANNEL_11;
  HAL_ADC_ConfigChannel( &hadc1, &sConfig );  // setting store
 8001c6e:	4621      	mov	r1, r4
  adc1_ch10 = HAL_ADC_GetValue(&hadc1);
 8001c70:	8018      	strh	r0, [r3, #0]
  sConfig.Rank = 2;
 8001c72:	2302      	movs	r3, #2
 8001c74:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001c76:	2305      	movs	r3, #5
 8001c78:	9303      	str	r3, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_11;
 8001c7a:	230b      	movs	r3, #11
  HAL_ADC_ConfigChannel( &hadc1, &sConfig );  // setting store
 8001c7c:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <update_ADC1+0x74>)
  sConfig.Channel = ADC_CHANNEL_11;
 8001c7e:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel( &hadc1, &sConfig );  // setting store
 8001c80:	f7fe fbba 	bl	80003f8 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start( &hadc1 );     // ad convert start
 8001c84:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <update_ADC1+0x74>)
 8001c86:	f7fe fc73 	bl	8000570 <HAL_ADC_Start>
  while( HAL_ADC_PollForConversion( &hadc1,1000 ) != HAL_OK );
 8001c8a:	4c07      	ldr	r4, [pc, #28]	; (8001ca8 <update_ADC1+0x74>)
 8001c8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7fe fb0f 	bl	80002b4 <HAL_ADC_PollForConversion>
 8001c96:	2800      	cmp	r0, #0
 8001c98:	d1f8      	bne.n	8001c8c <update_ADC1+0x58>
  adc1_ch11 = HAL_ADC_GetValue(&hadc1);
 8001c9a:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <update_ADC1+0x74>)
 8001c9c:	f7fe fba8 	bl	80003f0 <HAL_ADC_GetValue>
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <update_ADC1+0x7c>)
 8001ca2:	8018      	strh	r0, [r3, #0]
  //HAL_ADC_Stop(&hadc1);
}
 8001ca4:	b005      	add	sp, #20
 8001ca6:	bd30      	pop	{r4, r5, pc}
 8001ca8:	200000d4 	.word	0x200000d4
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	2000000a 	.word	0x2000000a

08001cb4 <update_ADC3>:
 * return   : void
********************************************************************************************/
void update_ADC3(void)
{
  ADC_ChannelConfTypeDef sConfig;
  sConfig.Rank = 1;
 8001cb4:	2301      	movs	r3, #1
{
 8001cb6:	b530      	push	{r4, r5, lr}
 8001cb8:	b085      	sub	sp, #20
  sConfig.Rank = 1;
 8001cba:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001cbc:	2305      	movs	r3, #5
 8001cbe:	9303      	str	r3, [sp, #12]

  sConfig.Channel = ADC_CHANNEL_12;
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	ac04      	add	r4, sp, #16
 8001cc4:	f844 3d0c 	str.w	r3, [r4, #-12]!
  HAL_ADC_ConfigChannel( &hadc3, &sConfig );  // setting store
 8001cc8:	4621      	mov	r1, r4
 8001cca:	4817      	ldr	r0, [pc, #92]	; (8001d28 <update_ADC3+0x74>)
 8001ccc:	f7fe fb94 	bl	80003f8 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start( &hadc3 );     // ad convert start
 8001cd0:	4815      	ldr	r0, [pc, #84]	; (8001d28 <update_ADC3+0x74>)
 8001cd2:	f7fe fc4d 	bl	8000570 <HAL_ADC_Start>
  while( HAL_ADC_PollForConversion( &hadc3,1000 ) != HAL_OK );
 8001cd6:	4d14      	ldr	r5, [pc, #80]	; (8001d28 <update_ADC3+0x74>)
 8001cd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cdc:	4628      	mov	r0, r5
 8001cde:	f7fe fae9 	bl	80002b4 <HAL_ADC_PollForConversion>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d1f8      	bne.n	8001cd8 <update_ADC3+0x24>
  adc3_ch12 = HAL_ADC_GetValue(&hadc3);
 8001ce6:	4810      	ldr	r0, [pc, #64]	; (8001d28 <update_ADC3+0x74>)
 8001ce8:	f7fe fb82 	bl	80003f0 <HAL_ADC_GetValue>
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <update_ADC3+0x78>)

  sConfig.Rank = 2;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;

  sConfig.Channel = ADC_CHANNEL_13;
  HAL_ADC_ConfigChannel( &hadc3, &sConfig );  // setting store
 8001cee:	4621      	mov	r1, r4
  adc3_ch12 = HAL_ADC_GetValue(&hadc3);
 8001cf0:	8018      	strh	r0, [r3, #0]
  sConfig.Rank = 2;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	9303      	str	r3, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_13;
 8001cfa:	230d      	movs	r3, #13
  HAL_ADC_ConfigChannel( &hadc3, &sConfig );  // setting store
 8001cfc:	480a      	ldr	r0, [pc, #40]	; (8001d28 <update_ADC3+0x74>)
  sConfig.Channel = ADC_CHANNEL_13;
 8001cfe:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel( &hadc3, &sConfig );  // setting store
 8001d00:	f7fe fb7a 	bl	80003f8 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start( &hadc3 );     // ad convert start
 8001d04:	4808      	ldr	r0, [pc, #32]	; (8001d28 <update_ADC3+0x74>)
 8001d06:	f7fe fc33 	bl	8000570 <HAL_ADC_Start>
  while( HAL_ADC_PollForConversion( &hadc3,1000 ) != HAL_OK );
 8001d0a:	4c07      	ldr	r4, [pc, #28]	; (8001d28 <update_ADC3+0x74>)
 8001d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d10:	4620      	mov	r0, r4
 8001d12:	f7fe facf 	bl	80002b4 <HAL_ADC_PollForConversion>
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d1f8      	bne.n	8001d0c <update_ADC3+0x58>
  adc3_ch13 = HAL_ADC_GetValue(&hadc3);
 8001d1a:	4803      	ldr	r0, [pc, #12]	; (8001d28 <update_ADC3+0x74>)
 8001d1c:	f7fe fb68 	bl	80003f0 <HAL_ADC_GetValue>
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <update_ADC3+0x7c>)
 8001d22:	8018      	strh	r0, [r3, #0]
  //HAL_ADC_Stop(&hadc3);
}
 8001d24:	b005      	add	sp, #20
 8001d26:	bd30      	pop	{r4, r5, pc}
 8001d28:	20000104 	.word	0x20000104
 8001d2c:	2000000c 	.word	0x2000000c
 8001d30:	2000000e 	.word	0x2000000e

08001d34 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d34:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <MX_GPIO_Init+0xcc>)
{
 8001d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	699a      	ldr	r2, [r3, #24]
{
 8001d3c:	b088      	sub	sp, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	f042 0210 	orr.w	r2, r2, #16
 8001d42:	619a      	str	r2, [r3, #24]
 8001d44:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 8001d46:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001e0c <MX_GPIO_Init+0xd8>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	f002 0210 	and.w	r2, r2, #16
 8001d4e:	9201      	str	r2, [sp, #4]
 8001d50:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led3_Pin|led4_Pin, GPIO_PIN_RESET);
 8001d54:	4c2b      	ldr	r4, [pc, #172]	; (8001e04 <MX_GPIO_Init+0xd0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	f042 0204 	orr.w	r2, r2, #4
 8001d5a:	619a      	str	r2, [r3, #24]
 8001d5c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ir_led1_Pin|ir_led2_Pin|ir_led3_Pin|ir_led4_Pin, GPIO_PIN_RESET);
 8001d5e:	4d2a      	ldr	r5, [pc, #168]	; (8001e08 <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	f002 0204 	and.w	r2, r2, #4
 8001d64:	9202      	str	r2, [sp, #8]
 8001d66:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 8001d6a:	4640      	mov	r0, r8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	f042 0208 	orr.w	r2, r2, #8
 8001d70:	619a      	str	r2, [r3, #24]
 8001d72:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 8001d74:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 8001d7c:	f246 11c0 	movw	r1, #25024	; 0x61c0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d80:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 8001d82:	f7fe fe69 	bl	8000a58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, led3_Pin|led4_Pin, GPIO_PIN_RESET);
 8001d86:	4620      	mov	r0, r4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2103      	movs	r1, #3
 8001d8c:	f7fe fe64 	bl	8000a58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ir_led1_Pin|ir_led2_Pin|ir_led3_Pin|ir_led4_Pin, GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	4628      	mov	r0, r5
 8001d94:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001d98:	f7fe fe5e 	bl	8000a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PC6 PC7 
                           PC8 */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 8001da0:	f246 13c0 	movw	r3, #25024	; 0x61c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	a904      	add	r1, sp, #16
 8001da6:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|GPIO_PIN_6|GPIO_PIN_7 
 8001da8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dae:	f7fe fd67 	bl	8000880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = led3_Pin|led4_Pin;
 8001db2:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	a904      	add	r1, sp, #16
 8001db6:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = led3_Pin|led4_Pin;
 8001db8:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = sw3_Pin|sw2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dba:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbc:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f7fe fd5e 	bl	8000880 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = sw3_Pin|sw2_Pin;
 8001dc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc8:	a904      	add	r1, sp, #16
 8001dca:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = sw3_Pin|sw2_Pin;
 8001dcc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dce:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd2:	f7fe fd55 	bl	8000880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sw1_Pin;
 8001dd6:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(sw1_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	a904      	add	r1, sp, #16
 8001dda:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = sw1_Pin;
 8001ddc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dde:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(sw1_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f7fe fd4d 	bl	8000880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ir_led1_Pin|ir_led2_Pin|ir_led3_Pin|ir_led4_Pin;
 8001de6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	a904      	add	r1, sp, #16
 8001dec:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = ir_led1_Pin|ir_led2_Pin|ir_led3_Pin|ir_led4_Pin;
 8001dee:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df4:	f7fe fd44 	bl	8000880 <HAL_GPIO_Init>

}
 8001df8:	b008      	add	sp, #32
 8001dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010800 	.word	0x40010800
 8001e08:	40010c00 	.word	0x40010c00
 8001e0c:	40011000 	.word	0x40011000

08001e10 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
  HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8001e10:	2301      	movs	r3, #1
void __io_putchar(uint8_t ch) {
 8001e12:	b507      	push	{r0, r1, r2, lr}
 8001e14:	a902      	add	r1, sp, #8
 8001e16:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <__io_putchar+0x18>)
 8001e1e:	f7ff fdd7 	bl	80019d0 <HAL_UART_Transmit>
}
 8001e22:	b003      	add	sp, #12
 8001e24:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e28:	20000234 	.word	0x20000234

08001e2c <SystemClock_Config>:

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001e2c:	2310      	movs	r3, #16
{
 8001e2e:	b530      	push	{r4, r5, lr}
 8001e30:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001e32:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001e34:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e36:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e38:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001e3a:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001e3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e40:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e42:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e44:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e46:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001e48:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e4a:	f7fe fe0b 	bl	8000a64 <HAL_RCC_OscConfig>
 8001e4e:	b100      	cbz	r0, 8001e52 <SystemClock_Config+0x26>
 8001e50:	e7fe      	b.n	8001e50 <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e52:	230f      	movs	r3, #15
 8001e54:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e5a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e5c:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e5e:	4629      	mov	r1, r5
 8001e60:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e62:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e64:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e66:	f7fe ffc5 	bl	8000df4 <HAL_RCC_ClockConfig>
 8001e6a:	b100      	cbz	r0, 8001e6e <SystemClock_Config+0x42>
 8001e6c:	e7fe      	b.n	8001e6c <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001e6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e72:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e74:	9406      	str	r4, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001e76:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e78:	f7ff f886 	bl	8000f88 <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	b100      	cbz	r0, 8001e82 <SystemClock_Config+0x56>
 8001e80:	e7fe      	b.n	8001e80 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001e82:	f7ff f85b 	bl	8000f3c <HAL_RCC_GetHCLKFreq>
 8001e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e8e:	f7fe fccf 	bl	8000830 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e92:	2004      	movs	r0, #4
 8001e94:	f7fe fce2 	bl	800085c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e98:	4622      	mov	r2, r4
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7fe fc86 	bl	80007b0 <HAL_NVIC_SetPriority>
}
 8001ea4:	b017      	add	sp, #92	; 0x5c
 8001ea6:	bd30      	pop	{r4, r5, pc}

08001ea8 <main>:
{
 8001ea8:	b508      	push	{r3, lr}
  HAL_Init();
 8001eaa:	f7fe f9df 	bl	800026c <HAL_Init>
  SystemClock_Config();
 8001eae:	f7ff ffbd 	bl	8001e2c <SystemClock_Config>
  MX_GPIO_Init();
 8001eb2:	f7ff ff3f 	bl	8001d34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001eb6:	f7ff fde7 	bl	8001a88 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001eba:	f7ff fe13 	bl	8001ae4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001ebe:	f7ff fe3f 	bl	8001b40 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001ec2:	f000 f9dd 	bl	8002280 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ec6:	f000 fa13 	bl	80022f0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001eca:	f000 fa4b 	bl	8002364 <MX_TIM5_Init>
  MX_TIM4_Init();
 8001ece:	f000 f907 	bl	80020e0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001ed2:	f000 fa81 	bl	80023d8 <MX_USART1_UART_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 8001ed6:	4816      	ldr	r0, [pc, #88]	; (8001f30 <main+0x88>)
 8001ed8:	f7ff f9de 	bl	8001298 <HAL_TIM_Base_Start_IT>
  setbuf(stdout, NULL);
 8001edc:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <main+0x8c>)
 8001ede:	2100      	movs	r1, #0
 8001ee0:	681b      	ldr	r3, [r3, #0]
	  HAL_GPIO_WritePin(ir_led1_GPIO_Port,ir_led1_Pin,GPIO_PIN_SET);
 8001ee2:	4c15      	ldr	r4, [pc, #84]	; (8001f38 <main+0x90>)
  setbuf(stdout, NULL);
 8001ee4:	6898      	ldr	r0, [r3, #8]
 8001ee6:	f000 fb33 	bl	8002550 <setbuf>
  HAL_GPIO_WritePin(led1_GPIO_Port,led1_Pin,GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef0:	4812      	ldr	r0, [pc, #72]	; (8001f3c <main+0x94>)
 8001ef2:	f7fe fdb1 	bl	8000a58 <HAL_GPIO_WritePin>
	  printf("%d\r",adc1_ch10);
 8001ef6:	4d12      	ldr	r5, [pc, #72]	; (8001f40 <main+0x98>)
	  HAL_GPIO_WritePin(ir_led1_GPIO_Port,ir_led1_Pin,GPIO_PIN_SET);
 8001ef8:	4620      	mov	r0, r4
 8001efa:	2201      	movs	r2, #1
 8001efc:	2140      	movs	r1, #64	; 0x40
 8001efe:	f7fe fdab 	bl	8000a58 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ir_led2_GPIO_Port,ir_led2_Pin,GPIO_PIN_SET);
 8001f02:	4620      	mov	r0, r4
 8001f04:	2201      	movs	r2, #1
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	f7fe fda6 	bl	8000a58 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ir_led3_GPIO_Port,ir_led3_Pin,GPIO_PIN_SET);
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f14:	f7fe fda0 	bl	8000a58 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(ir_led4_GPIO_Port,ir_led4_Pin,GPIO_PIN_SET);
 8001f18:	4620      	mov	r0, r4
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f20:	f7fe fd9a 	bl	8000a58 <HAL_GPIO_WritePin>
	  printf("%d\r",adc1_ch10);
 8001f24:	8829      	ldrh	r1, [r5, #0]
 8001f26:	4807      	ldr	r0, [pc, #28]	; (8001f44 <main+0x9c>)
 8001f28:	f000 fafa 	bl	8002520 <iprintf>
 8001f2c:	e7e4      	b.n	8001ef8 <main+0x50>
 8001f2e:	bf00      	nop
 8001f30:	20000134 	.word	0x20000134
 8001f34:	20000014 	.word	0x20000014
 8001f38:	40010c00 	.word	0x40010c00
 8001f3c:	40011000 	.word	0x40011000
 8001f40:	20000008 	.word	0x20000008
 8001f44:	080034e9 	.word	0x080034e9

08001f48 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001f48:	e7fe      	b.n	8001f48 <_Error_Handler>
	...

08001f4c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f4c:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_MspInit+0x84>)
{
 8001f4e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f50:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f52:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	619a      	str	r2, [r3, #24]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f64:	f7fe fc12 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f06f 000b 	mvn.w	r0, #11
 8001f6e:	4611      	mov	r1, r2
 8001f70:	f7fe fc1e 	bl	80007b0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	f06f 000a 	mvn.w	r0, #10
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	f7fe fc18 	bl	80007b0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f06f 0009 	mvn.w	r0, #9
 8001f86:	4611      	mov	r1, r2
 8001f88:	f7fe fc12 	bl	80007b0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f06f 0004 	mvn.w	r0, #4
 8001f92:	4611      	mov	r1, r2
 8001f94:	f7fe fc0c 	bl	80007b0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f06f 0003 	mvn.w	r0, #3
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	f7fe fc06 	bl	80007b0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f06f 0001 	mvn.w	r0, #1
 8001faa:	4611      	mov	r1, r2
 8001fac:	f7fe fc00 	bl	80007b0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	f7fe fbfa 	bl	80007b0 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001fbc:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <HAL_MspInit+0x88>)
 8001fbe:	6853      	ldr	r3, [r2, #4]
 8001fc0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fca:	b003      	add	sp, #12
 8001fcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000

08001fd8 <NMI_Handler>:
 8001fd8:	4770      	bx	lr

08001fda <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001fda:	e7fe      	b.n	8001fda <HardFault_Handler>

08001fdc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001fdc:	e7fe      	b.n	8001fdc <MemManage_Handler>

08001fde <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001fde:	e7fe      	b.n	8001fde <BusFault_Handler>

08001fe0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001fe0:	e7fe      	b.n	8001fe0 <UsageFault_Handler>

08001fe2 <SVC_Handler>:
 8001fe2:	4770      	bx	lr

08001fe4 <DebugMon_Handler>:
 8001fe4:	4770      	bx	lr

08001fe6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001fe6:	4770      	bx	lr

08001fe8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001fe8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fea:	f7fe f951 	bl	8000290 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001ff2:	f7fe bc40 	b.w	8000876 <HAL_SYSTICK_IRQHandler>
	...

08001ff8 <TIM4_IRQHandler>:

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 8001ff8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ffa:	4804      	ldr	r0, [pc, #16]	; (800200c <TIM4_IRQHandler+0x14>)
 8001ffc:	f7ff fa15 	bl	800142a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  update_ADC1();
 8002000:	f7ff fe18 	bl	8001c34 <update_ADC1>
  update_ADC3();

  /* USER CODE END TIM4_IRQn 1 */
}
 8002004:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  update_ADC3();
 8002008:	f7ff be54 	b.w	8001cb4 <update_ADC3>
 800200c:	20000134 	.word	0x20000134

08002010 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8002010:	b570      	push	{r4, r5, r6, lr}
 8002012:	460e      	mov	r6, r1
 8002014:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	460c      	mov	r4, r1
 8002018:	1ba3      	subs	r3, r4, r6
 800201a:	429d      	cmp	r5, r3
 800201c:	dc01      	bgt.n	8002022 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800201e:	4628      	mov	r0, r5
 8002020:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002022:	f3af 8000 	nop.w
 8002026:	f804 0b01 	strb.w	r0, [r4], #1
 800202a:	e7f5      	b.n	8002018 <_read+0x8>

0800202c <_write>:

int _write(int file, char *ptr, int len)
{
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	460e      	mov	r6, r1
 8002030:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	460c      	mov	r4, r1
 8002034:	1ba3      	subs	r3, r4, r6
 8002036:	429d      	cmp	r5, r3
 8002038:	dc01      	bgt.n	800203e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800203a:	4628      	mov	r0, r5
 800203c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800203e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002042:	f7ff fee5 	bl	8001e10 <__io_putchar>
 8002046:	e7f5      	b.n	8002034 <_write+0x8>

08002048 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002048:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <_sbrk+0x2c>)
{
 800204c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	b909      	cbnz	r1, 8002056 <_sbrk+0xe>
		heap_end = &end;
 8002052:	4909      	ldr	r1, [pc, #36]	; (8002078 <_sbrk+0x30>)
 8002054:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002056:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002058:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800205a:	4402      	add	r2, r0
 800205c:	428a      	cmp	r2, r1
 800205e:	d906      	bls.n	800206e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002060:	f000 fa2c 	bl	80024bc <__errno>
 8002064:	230c      	movs	r3, #12
 8002066:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800206e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002070:	bd08      	pop	{r3, pc}
 8002072:	bf00      	nop
 8002074:	20000094 	.word	0x20000094
 8002078:	20000278 	.word	0x20000278

0800207c <_close>:

int _close(int file)
{
	return -1;
}
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	4770      	bx	lr

08002082 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002086:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002088:	604b      	str	r3, [r1, #4]
}
 800208a:	4770      	bx	lr

0800208c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800208c:	2001      	movs	r0, #1
 800208e:	4770      	bx	lr

08002090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002090:	2000      	movs	r0, #0
 8002092:	4770      	bx	lr

08002094 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <SystemInit+0x40>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <SystemInit+0x44>)
 80020a2:	400a      	ands	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80020ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020b0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020b8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80020c0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80020c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80020c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80020c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <SystemInit+0x48>)
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	f8ff0000 	.word	0xf8ff0000
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 9;
 80020e2:	2309      	movs	r3, #9
  htim4.Instance = TIM4;
 80020e4:	4816      	ldr	r0, [pc, #88]	; (8002140 <MX_TIM4_Init+0x60>)
  htim4.Init.Prescaler = 9;
 80020e6:	4917      	ldr	r1, [pc, #92]	; (8002144 <MX_TIM4_Init+0x64>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 7999;
 80020e8:	f641 723f 	movw	r2, #7999	; 0x1f3f
  htim4.Init.Prescaler = 9;
 80020ec:	e880 000a 	stmia.w	r0, {r1, r3}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f0:	2300      	movs	r3, #0
  htim4.Init.Period = 7999;
 80020f2:	60c2      	str	r2, [r0, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	6083      	str	r3, [r0, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f6:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020fa:	f7ff fa85 	bl	8001608 <HAL_TIM_Base_Init>
 80020fe:	b118      	cbz	r0, 8002108 <MX_TIM4_Init+0x28>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002100:	218a      	movs	r1, #138	; 0x8a
 8002102:	4811      	ldr	r0, [pc, #68]	; (8002148 <MX_TIM4_Init+0x68>)
 8002104:	f7ff ff20 	bl	8001f48 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210c:	a906      	add	r1, sp, #24
 800210e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002112:	480b      	ldr	r0, [pc, #44]	; (8002140 <MX_TIM4_Init+0x60>)
 8002114:	f7ff f8cb 	bl	80012ae <HAL_TIM_ConfigClockSource>
 8002118:	b118      	cbz	r0, 8002122 <MX_TIM4_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 800211a:	2190      	movs	r1, #144	; 0x90
 800211c:	480a      	ldr	r0, [pc, #40]	; (8002148 <MX_TIM4_Init+0x68>)
 800211e:	f7ff ff13 	bl	8001f48 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002122:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002124:	4669      	mov	r1, sp
 8002126:	4806      	ldr	r0, [pc, #24]	; (8002140 <MX_TIM4_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002128:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800212c:	f7ff fb38 	bl	80017a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002130:	b118      	cbz	r0, 800213a <MX_TIM4_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002132:	2197      	movs	r1, #151	; 0x97
 8002134:	4804      	ldr	r0, [pc, #16]	; (8002148 <MX_TIM4_Init+0x68>)
 8002136:	f7ff ff07 	bl	8001f48 <_Error_Handler>
  }

}
 800213a:	b007      	add	sp, #28
 800213c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002140:	20000134 	.word	0x20000134
 8002144:	40000800 	.word	0x40000800
 8002148:	08003505 	.word	0x08003505

0800214c <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM2)
 800214c:	6803      	ldr	r3, [r0, #0]
{
 800214e:	b084      	sub	sp, #16
  if(tim_pwmHandle->Instance==TIM2)
 8002150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002154:	d10c      	bne.n	8002170 <HAL_TIM_PWM_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002156:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800215a:	69da      	ldr	r2, [r3, #28]
 800215c:	f042 0201 	orr.w	r2, r2, #1
 8002160:	61da      	str	r2, [r3, #28]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800216c:	b004      	add	sp, #16
 800216e:	4770      	bx	lr
  else if(tim_pwmHandle->Instance==TIM3)
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <HAL_TIM_PWM_MspInit+0x5c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d10a      	bne.n	800218c <HAL_TIM_PWM_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_TIM_PWM_MspInit+0x60>)
 8002178:	69da      	ldr	r2, [r3, #28]
 800217a:	f042 0202 	orr.w	r2, r2, #2
 800217e:	61da      	str	r2, [r3, #28]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	9302      	str	r3, [sp, #8]
 8002188:	9b02      	ldr	r3, [sp, #8]
 800218a:	e7ef      	b.n	800216c <HAL_TIM_PWM_MspInit+0x20>
  else if(tim_pwmHandle->Instance==TIM5)
 800218c:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <HAL_TIM_PWM_MspInit+0x64>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d1ec      	bne.n	800216c <HAL_TIM_PWM_MspInit+0x20>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_TIM_PWM_MspInit+0x60>)
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	f042 0208 	orr.w	r2, r2, #8
 800219a:	61da      	str	r2, [r3, #28]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	9303      	str	r3, [sp, #12]
 80021a4:	9b03      	ldr	r3, [sp, #12]
}
 80021a6:	e7e1      	b.n	800216c <HAL_TIM_PWM_MspInit+0x20>
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40000c00 	.word	0x40000c00

080021b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021b4:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM4)
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <HAL_TIM_Base_MspInit+0x38>)
 80021b8:	6802      	ldr	r2, [r0, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d112      	bne.n	80021e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021be:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80021c2:	69da      	ldr	r2, [r3, #28]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021c4:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021c6:	f042 0204 	orr.w	r2, r2, #4
 80021ca:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021cc:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ce:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021d0:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021da:	f7fe fae9 	bl	80007b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021de:	201e      	movs	r0, #30
 80021e0:	f7fe fb1a 	bl	8000818 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021e4:	b003      	add	sp, #12
 80021e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80021ea:	bf00      	nop
 80021ec:	40000800 	.word	0x40000800

080021f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 80021f2:	6803      	ldr	r3, [r0, #0]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f8:	d115      	bne.n	8002226 <HAL_TIM_MspPostInit+0x36>

  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fe:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002202:	4669      	mov	r1, sp
 8002204:	4818      	ldr	r0, [pc, #96]	; (8002268 <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220a:	f7fe fb39 	bl	8000880 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800220e:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_TIM_MspPostInit+0x7c>)
 8002210:	6853      	ldr	r3, [r2, #4]
 8002212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002216:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800221a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800221e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002220:	b005      	add	sp, #20
 8002222:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(timHandle->Instance==TIM3)
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <HAL_TIM_MspPostInit+0x80>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d110      	bne.n	800224e <HAL_TIM_MspPostInit+0x5e>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800222c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002230:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002234:	4669      	mov	r1, sp
 8002236:	480f      	ldr	r0, [pc, #60]	; (8002274 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223c:	f7fe fb20 	bl	8000880 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <HAL_TIM_MspPostInit+0x7c>)
 8002242:	6853      	ldr	r3, [r2, #4]
 8002244:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002248:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800224c:	e7e7      	b.n	800221e <HAL_TIM_MspPostInit+0x2e>
  else if(timHandle->Instance==TIM5)
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <HAL_TIM_MspPostInit+0x88>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d1e5      	bne.n	8002220 <HAL_TIM_MspPostInit+0x30>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002254:	2308      	movs	r3, #8
 8002256:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	4669      	mov	r1, sp
 800225c:	4807      	ldr	r0, [pc, #28]	; (800227c <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002262:	f7fe fb0d 	bl	8000880 <HAL_GPIO_Init>
}
 8002266:	e7db      	b.n	8002220 <HAL_TIM_MspPostInit+0x30>
 8002268:	40010c00 	.word	0x40010c00
 800226c:	40010000 	.word	0x40010000
 8002270:	40000400 	.word	0x40000400
 8002274:	40011000 	.word	0x40011000
 8002278:	40000c00 	.word	0x40000c00
 800227c:	40010800 	.word	0x40010800

08002280 <MX_TIM2_Init>:
{
 8002280:	b510      	push	{r4, lr}
  htim2.Init.Prescaler = 0;
 8002282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002286:	2400      	movs	r4, #0
  htim2.Instance = TIM2;
 8002288:	4817      	ldr	r0, [pc, #92]	; (80022e8 <MX_TIM2_Init+0x68>)
{
 800228a:	b08a      	sub	sp, #40	; 0x28
  htim2.Init.Prescaler = 0;
 800228c:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002290:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 8002292:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002294:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002296:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002298:	f7ff f9d0 	bl	800163c <HAL_TIM_PWM_Init>
 800229c:	b118      	cbz	r0, 80022a6 <MX_TIM2_Init+0x26>
    _Error_Handler(__FILE__, __LINE__);
 800229e:	2142      	movs	r1, #66	; 0x42
 80022a0:	4812      	ldr	r0, [pc, #72]	; (80022ec <MX_TIM2_Init+0x6c>)
 80022a2:	f7ff fe51 	bl	8001f48 <_Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022a6:	a901      	add	r1, sp, #4
 80022a8:	480f      	ldr	r0, [pc, #60]	; (80022e8 <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022aa:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ac:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ae:	f7ff fa77 	bl	80017a0 <HAL_TIMEx_MasterConfigSynchronization>
 80022b2:	b118      	cbz	r0, 80022bc <MX_TIM2_Init+0x3c>
    _Error_Handler(__FILE__, __LINE__);
 80022b4:	2149      	movs	r1, #73	; 0x49
 80022b6:	480d      	ldr	r0, [pc, #52]	; (80022ec <MX_TIM2_Init+0x6c>)
 80022b8:	f7ff fe46 	bl	8001f48 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022bc:	2360      	movs	r3, #96	; 0x60
 80022be:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 80022c0:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022c2:	2208      	movs	r2, #8
 80022c4:	a903      	add	r1, sp, #12
 80022c6:	4808      	ldr	r0, [pc, #32]	; (80022e8 <MX_TIM2_Init+0x68>)
  sConfigOC.Pulse = 0;
 80022c8:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ca:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022cc:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022ce:	f7ff fa05 	bl	80016dc <HAL_TIM_PWM_ConfigChannel>
 80022d2:	b118      	cbz	r0, 80022dc <MX_TIM2_Init+0x5c>
    _Error_Handler(__FILE__, __LINE__);
 80022d4:	2152      	movs	r1, #82	; 0x52
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <MX_TIM2_Init+0x6c>)
 80022d8:	f7ff fe36 	bl	8001f48 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <MX_TIM2_Init+0x68>)
 80022de:	f7ff ff87 	bl	80021f0 <HAL_TIM_MspPostInit>
}
 80022e2:	b00a      	add	sp, #40	; 0x28
 80022e4:	bd10      	pop	{r4, pc}
 80022e6:	bf00      	nop
 80022e8:	200001f4 	.word	0x200001f4
 80022ec:	08003505 	.word	0x08003505

080022f0 <MX_TIM3_Init>:
{
 80022f0:	b510      	push	{r4, lr}
  htim3.Init.Prescaler = 0;
 80022f2:	2400      	movs	r4, #0
  htim3.Instance = TIM3;
 80022f4:	4818      	ldr	r0, [pc, #96]	; (8002358 <MX_TIM3_Init+0x68>)
  htim3.Init.Prescaler = 0;
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <MX_TIM3_Init+0x6c>)
{
 80022f8:	b08a      	sub	sp, #40	; 0x28
  htim3.Init.Prescaler = 0;
 80022fa:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fe:	6084      	str	r4, [r0, #8]
  htim3.Init.Period = 0;
 8002300:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002302:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002304:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002306:	f7ff f999 	bl	800163c <HAL_TIM_PWM_Init>
 800230a:	b118      	cbz	r0, 8002314 <MX_TIM3_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 800230c:	2166      	movs	r1, #102	; 0x66
 800230e:	4814      	ldr	r0, [pc, #80]	; (8002360 <MX_TIM3_Init+0x70>)
 8002310:	f7ff fe1a 	bl	8001f48 <_Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002314:	a901      	add	r1, sp, #4
 8002316:	4810      	ldr	r0, [pc, #64]	; (8002358 <MX_TIM3_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002318:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231a:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800231c:	f7ff fa40 	bl	80017a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002320:	b118      	cbz	r0, 800232a <MX_TIM3_Init+0x3a>
    _Error_Handler(__FILE__, __LINE__);
 8002322:	216d      	movs	r1, #109	; 0x6d
 8002324:	480e      	ldr	r0, [pc, #56]	; (8002360 <MX_TIM3_Init+0x70>)
 8002326:	f7ff fe0f 	bl	8001f48 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800232a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800232c:	220c      	movs	r2, #12
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800232e:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8002330:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002332:	eb0d 0102 	add.w	r1, sp, r2
 8002336:	4808      	ldr	r0, [pc, #32]	; (8002358 <MX_TIM3_Init+0x68>)
  sConfigOC.Pulse = 0;
 8002338:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800233a:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800233c:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800233e:	f7ff f9cd 	bl	80016dc <HAL_TIM_PWM_ConfigChannel>
 8002342:	b118      	cbz	r0, 800234c <MX_TIM3_Init+0x5c>
    _Error_Handler(__FILE__, __LINE__);
 8002344:	2176      	movs	r1, #118	; 0x76
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <MX_TIM3_Init+0x70>)
 8002348:	f7ff fdfe 	bl	8001f48 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <MX_TIM3_Init+0x68>)
 800234e:	f7ff ff4f 	bl	80021f0 <HAL_TIM_MspPostInit>
}
 8002352:	b00a      	add	sp, #40	; 0x28
 8002354:	bd10      	pop	{r4, pc}
 8002356:	bf00      	nop
 8002358:	200001b4 	.word	0x200001b4
 800235c:	40000400 	.word	0x40000400
 8002360:	08003505 	.word	0x08003505

08002364 <MX_TIM5_Init>:
{
 8002364:	b510      	push	{r4, lr}
  htim5.Init.Prescaler = 0;
 8002366:	2400      	movs	r4, #0
  htim5.Instance = TIM5;
 8002368:	4818      	ldr	r0, [pc, #96]	; (80023cc <MX_TIM5_Init+0x68>)
  htim5.Init.Prescaler = 0;
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <MX_TIM5_Init+0x6c>)
{
 800236c:	b08a      	sub	sp, #40	; 0x28
  htim5.Init.Prescaler = 0;
 800236e:	e880 0018 	stmia.w	r0, {r3, r4}
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002372:	6084      	str	r4, [r0, #8]
  htim5.Init.Period = 0;
 8002374:	60c4      	str	r4, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002376:	6104      	str	r4, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002378:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800237a:	f7ff f95f 	bl	800163c <HAL_TIM_PWM_Init>
 800237e:	b118      	cbz	r0, 8002388 <MX_TIM5_Init+0x24>
    _Error_Handler(__FILE__, __LINE__);
 8002380:	21a9      	movs	r1, #169	; 0xa9
 8002382:	4814      	ldr	r0, [pc, #80]	; (80023d4 <MX_TIM5_Init+0x70>)
 8002384:	f7ff fde0 	bl	8001f48 <_Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002388:	a901      	add	r1, sp, #4
 800238a:	4810      	ldr	r0, [pc, #64]	; (80023cc <MX_TIM5_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238c:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238e:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002390:	f7ff fa06 	bl	80017a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002394:	b118      	cbz	r0, 800239e <MX_TIM5_Init+0x3a>
    _Error_Handler(__FILE__, __LINE__);
 8002396:	21b0      	movs	r1, #176	; 0xb0
 8002398:	480e      	ldr	r0, [pc, #56]	; (80023d4 <MX_TIM5_Init+0x70>)
 800239a:	f7ff fdd5 	bl	8001f48 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800239e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023a0:	220c      	movs	r2, #12
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a2:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 80023a4:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023a6:	eb0d 0102 	add.w	r1, sp, r2
 80023aa:	4808      	ldr	r0, [pc, #32]	; (80023cc <MX_TIM5_Init+0x68>)
  sConfigOC.Pulse = 0;
 80023ac:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ae:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b0:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023b2:	f7ff f993 	bl	80016dc <HAL_TIM_PWM_ConfigChannel>
 80023b6:	b118      	cbz	r0, 80023c0 <MX_TIM5_Init+0x5c>
    _Error_Handler(__FILE__, __LINE__);
 80023b8:	21b9      	movs	r1, #185	; 0xb9
 80023ba:	4806      	ldr	r0, [pc, #24]	; (80023d4 <MX_TIM5_Init+0x70>)
 80023bc:	f7ff fdc4 	bl	8001f48 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim5);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <MX_TIM5_Init+0x68>)
 80023c2:	f7ff ff15 	bl	80021f0 <HAL_TIM_MspPostInit>
}
 80023c6:	b00a      	add	sp, #40	; 0x28
 80023c8:	bd10      	pop	{r4, pc}
 80023ca:	bf00      	nop
 80023cc:	20000174 	.word	0x20000174
 80023d0:	40000c00 	.word	0x40000c00
 80023d4:	08003505 	.word	0x08003505

080023d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023d8:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 80023da:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart1.Instance = USART1;
 80023de:	480b      	ldr	r0, [pc, #44]	; (800240c <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 9600;
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023e2:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 80023e4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023e8:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023ea:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ec:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023ee:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023f0:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023f6:	f7ff fabd 	bl	8001974 <HAL_UART_Init>
 80023fa:	b128      	cbz	r0, 8002408 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80023fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002400:	2142      	movs	r1, #66	; 0x42
 8002402:	4804      	ldr	r0, [pc, #16]	; (8002414 <MX_USART1_UART_Init+0x3c>)
 8002404:	f7ff bda0 	b.w	8001f48 <_Error_Handler>
 8002408:	bd08      	pop	{r3, pc}
 800240a:	bf00      	nop
 800240c:	20000234 	.word	0x20000234
 8002410:	40013800 	.word	0x40013800
 8002414:	08003512 	.word	0x08003512

08002418 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002418:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 800241a:	6802      	ldr	r2, [r0, #0]
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_UART_MspInit+0x50>)
 800241e:	429a      	cmp	r2, r3
 8002420:	d11f      	bne.n	8002462 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002422:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002426:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800242a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800242e:	619a      	str	r2, [r3, #24]
 8002430:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002432:	480e      	ldr	r0, [pc, #56]	; (800246c <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800243c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002440:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002446:	2303      	movs	r3, #3
 8002448:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f7fe fa19 	bl	8000880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800244e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002452:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002454:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	a902      	add	r1, sp, #8
 8002458:	4804      	ldr	r0, [pc, #16]	; (800246c <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245e:	f7fe fa0f 	bl	8000880 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002462:	b007      	add	sp, #28
 8002464:	f85d fb04 	ldr.w	pc, [sp], #4
 8002468:	40013800 	.word	0x40013800
 800246c:	40010800 	.word	0x40010800

08002470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002470:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002472:	e003      	b.n	800247c <LoopCopyDataInit>

08002474 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002476:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002478:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800247a:	3104      	adds	r1, #4

0800247c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800247c:	480a      	ldr	r0, [pc, #40]	; (80024a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002480:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002482:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002484:	d3f6      	bcc.n	8002474 <CopyDataInit>
  ldr r2, =_sbss
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002488:	e002      	b.n	8002490 <LoopFillZerobss>

0800248a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800248c:	f842 3b04 	str.w	r3, [r2], #4

08002490 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002492:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002494:	d3f9      	bcc.n	800248a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002496:	f7ff fdfd 	bl	8002094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249a:	f000 f815 	bl	80024c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249e:	f7ff fd03 	bl	8001ea8 <main>
  bx lr
 80024a2:	4770      	bx	lr
  ldr r3, =_sidata
 80024a4:	080035c4 	.word	0x080035c4
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024ac:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80024b0:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80024b4:	20000278 	.word	0x20000278

080024b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b8:	e7fe      	b.n	80024b8 <ADC1_2_IRQHandler>
	...

080024bc <__errno>:
 80024bc:	4b01      	ldr	r3, [pc, #4]	; (80024c4 <__errno+0x8>)
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000014 	.word	0x20000014

080024c8 <__libc_init_array>:
 80024c8:	b570      	push	{r4, r5, r6, lr}
 80024ca:	2500      	movs	r5, #0
 80024cc:	4e0c      	ldr	r6, [pc, #48]	; (8002500 <__libc_init_array+0x38>)
 80024ce:	4c0d      	ldr	r4, [pc, #52]	; (8002504 <__libc_init_array+0x3c>)
 80024d0:	1ba4      	subs	r4, r4, r6
 80024d2:	10a4      	asrs	r4, r4, #2
 80024d4:	42a5      	cmp	r5, r4
 80024d6:	d109      	bne.n	80024ec <__libc_init_array+0x24>
 80024d8:	f000 ffe4 	bl	80034a4 <_init>
 80024dc:	2500      	movs	r5, #0
 80024de:	4e0a      	ldr	r6, [pc, #40]	; (8002508 <__libc_init_array+0x40>)
 80024e0:	4c0a      	ldr	r4, [pc, #40]	; (800250c <__libc_init_array+0x44>)
 80024e2:	1ba4      	subs	r4, r4, r6
 80024e4:	10a4      	asrs	r4, r4, #2
 80024e6:	42a5      	cmp	r5, r4
 80024e8:	d105      	bne.n	80024f6 <__libc_init_array+0x2e>
 80024ea:	bd70      	pop	{r4, r5, r6, pc}
 80024ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024f0:	4798      	blx	r3
 80024f2:	3501      	adds	r5, #1
 80024f4:	e7ee      	b.n	80024d4 <__libc_init_array+0xc>
 80024f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024fa:	4798      	blx	r3
 80024fc:	3501      	adds	r5, #1
 80024fe:	e7f2      	b.n	80024e6 <__libc_init_array+0x1e>
 8002500:	080035bc 	.word	0x080035bc
 8002504:	080035bc 	.word	0x080035bc
 8002508:	080035bc 	.word	0x080035bc
 800250c:	080035c0 	.word	0x080035c0

08002510 <memset>:
 8002510:	4603      	mov	r3, r0
 8002512:	4402      	add	r2, r0
 8002514:	4293      	cmp	r3, r2
 8002516:	d100      	bne.n	800251a <memset+0xa>
 8002518:	4770      	bx	lr
 800251a:	f803 1b01 	strb.w	r1, [r3], #1
 800251e:	e7f9      	b.n	8002514 <memset+0x4>

08002520 <iprintf>:
 8002520:	b40f      	push	{r0, r1, r2, r3}
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <iprintf+0x2c>)
 8002524:	b513      	push	{r0, r1, r4, lr}
 8002526:	681c      	ldr	r4, [r3, #0]
 8002528:	b124      	cbz	r4, 8002534 <iprintf+0x14>
 800252a:	69a3      	ldr	r3, [r4, #24]
 800252c:	b913      	cbnz	r3, 8002534 <iprintf+0x14>
 800252e:	4620      	mov	r0, r4
 8002530:	f000 f9b6 	bl	80028a0 <__sinit>
 8002534:	ab05      	add	r3, sp, #20
 8002536:	9a04      	ldr	r2, [sp, #16]
 8002538:	68a1      	ldr	r1, [r4, #8]
 800253a:	4620      	mov	r0, r4
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	f000 fb77 	bl	8002c30 <_vfiprintf_r>
 8002542:	b002      	add	sp, #8
 8002544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002548:	b004      	add	sp, #16
 800254a:	4770      	bx	lr
 800254c:	20000014 	.word	0x20000014

08002550 <setbuf>:
 8002550:	2900      	cmp	r1, #0
 8002552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002556:	bf0c      	ite	eq
 8002558:	2202      	moveq	r2, #2
 800255a:	2200      	movne	r2, #0
 800255c:	f000 b800 	b.w	8002560 <setvbuf>

08002560 <setvbuf>:
 8002560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002564:	461d      	mov	r5, r3
 8002566:	4b51      	ldr	r3, [pc, #324]	; (80026ac <setvbuf+0x14c>)
 8002568:	4604      	mov	r4, r0
 800256a:	681e      	ldr	r6, [r3, #0]
 800256c:	460f      	mov	r7, r1
 800256e:	4690      	mov	r8, r2
 8002570:	b126      	cbz	r6, 800257c <setvbuf+0x1c>
 8002572:	69b3      	ldr	r3, [r6, #24]
 8002574:	b913      	cbnz	r3, 800257c <setvbuf+0x1c>
 8002576:	4630      	mov	r0, r6
 8002578:	f000 f992 	bl	80028a0 <__sinit>
 800257c:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <setvbuf+0x150>)
 800257e:	429c      	cmp	r4, r3
 8002580:	d152      	bne.n	8002628 <setvbuf+0xc8>
 8002582:	6874      	ldr	r4, [r6, #4]
 8002584:	f1b8 0f02 	cmp.w	r8, #2
 8002588:	d006      	beq.n	8002598 <setvbuf+0x38>
 800258a:	f1b8 0f01 	cmp.w	r8, #1
 800258e:	f200 8089 	bhi.w	80026a4 <setvbuf+0x144>
 8002592:	2d00      	cmp	r5, #0
 8002594:	f2c0 8086 	blt.w	80026a4 <setvbuf+0x144>
 8002598:	4621      	mov	r1, r4
 800259a:	4630      	mov	r0, r6
 800259c:	f000 f916 	bl	80027cc <_fflush_r>
 80025a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025a2:	b141      	cbz	r1, 80025b6 <setvbuf+0x56>
 80025a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025a8:	4299      	cmp	r1, r3
 80025aa:	d002      	beq.n	80025b2 <setvbuf+0x52>
 80025ac:	4630      	mov	r0, r6
 80025ae:	f000 fa6d 	bl	8002a8c <_free_r>
 80025b2:	2300      	movs	r3, #0
 80025b4:	6363      	str	r3, [r4, #52]	; 0x34
 80025b6:	2300      	movs	r3, #0
 80025b8:	61a3      	str	r3, [r4, #24]
 80025ba:	6063      	str	r3, [r4, #4]
 80025bc:	89a3      	ldrh	r3, [r4, #12]
 80025be:	061b      	lsls	r3, r3, #24
 80025c0:	d503      	bpl.n	80025ca <setvbuf+0x6a>
 80025c2:	6921      	ldr	r1, [r4, #16]
 80025c4:	4630      	mov	r0, r6
 80025c6:	f000 fa61 	bl	8002a8c <_free_r>
 80025ca:	89a3      	ldrh	r3, [r4, #12]
 80025cc:	f1b8 0f02 	cmp.w	r8, #2
 80025d0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80025d4:	f023 0303 	bic.w	r3, r3, #3
 80025d8:	81a3      	strh	r3, [r4, #12]
 80025da:	d05d      	beq.n	8002698 <setvbuf+0x138>
 80025dc:	ab01      	add	r3, sp, #4
 80025de:	466a      	mov	r2, sp
 80025e0:	4621      	mov	r1, r4
 80025e2:	4630      	mov	r0, r6
 80025e4:	f000 f9e6 	bl	80029b4 <__swhatbuf_r>
 80025e8:	89a3      	ldrh	r3, [r4, #12]
 80025ea:	4318      	orrs	r0, r3
 80025ec:	81a0      	strh	r0, [r4, #12]
 80025ee:	bb2d      	cbnz	r5, 800263c <setvbuf+0xdc>
 80025f0:	9d00      	ldr	r5, [sp, #0]
 80025f2:	4628      	mov	r0, r5
 80025f4:	f000 fa42 	bl	8002a7c <malloc>
 80025f8:	4607      	mov	r7, r0
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d14e      	bne.n	800269c <setvbuf+0x13c>
 80025fe:	f8dd 9000 	ldr.w	r9, [sp]
 8002602:	45a9      	cmp	r9, r5
 8002604:	d13c      	bne.n	8002680 <setvbuf+0x120>
 8002606:	f04f 30ff 	mov.w	r0, #4294967295
 800260a:	89a3      	ldrh	r3, [r4, #12]
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	81a3      	strh	r3, [r4, #12]
 8002612:	2300      	movs	r3, #0
 8002614:	60a3      	str	r3, [r4, #8]
 8002616:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800261a:	6023      	str	r3, [r4, #0]
 800261c:	6123      	str	r3, [r4, #16]
 800261e:	2301      	movs	r3, #1
 8002620:	6163      	str	r3, [r4, #20]
 8002622:	b003      	add	sp, #12
 8002624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002628:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <setvbuf+0x154>)
 800262a:	429c      	cmp	r4, r3
 800262c:	d101      	bne.n	8002632 <setvbuf+0xd2>
 800262e:	68b4      	ldr	r4, [r6, #8]
 8002630:	e7a8      	b.n	8002584 <setvbuf+0x24>
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <setvbuf+0x158>)
 8002634:	429c      	cmp	r4, r3
 8002636:	bf08      	it	eq
 8002638:	68f4      	ldreq	r4, [r6, #12]
 800263a:	e7a3      	b.n	8002584 <setvbuf+0x24>
 800263c:	2f00      	cmp	r7, #0
 800263e:	d0d8      	beq.n	80025f2 <setvbuf+0x92>
 8002640:	69b3      	ldr	r3, [r6, #24]
 8002642:	b913      	cbnz	r3, 800264a <setvbuf+0xea>
 8002644:	4630      	mov	r0, r6
 8002646:	f000 f92b 	bl	80028a0 <__sinit>
 800264a:	f1b8 0f01 	cmp.w	r8, #1
 800264e:	bf08      	it	eq
 8002650:	89a3      	ldrheq	r3, [r4, #12]
 8002652:	6027      	str	r7, [r4, #0]
 8002654:	bf04      	itt	eq
 8002656:	f043 0301 	orreq.w	r3, r3, #1
 800265a:	81a3      	strheq	r3, [r4, #12]
 800265c:	89a3      	ldrh	r3, [r4, #12]
 800265e:	6127      	str	r7, [r4, #16]
 8002660:	f013 0008 	ands.w	r0, r3, #8
 8002664:	6165      	str	r5, [r4, #20]
 8002666:	d01b      	beq.n	80026a0 <setvbuf+0x140>
 8002668:	f013 0001 	ands.w	r0, r3, #1
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	bf1f      	itttt	ne
 8002672:	426d      	negne	r5, r5
 8002674:	60a3      	strne	r3, [r4, #8]
 8002676:	61a5      	strne	r5, [r4, #24]
 8002678:	4618      	movne	r0, r3
 800267a:	bf08      	it	eq
 800267c:	60a5      	streq	r5, [r4, #8]
 800267e:	e7d0      	b.n	8002622 <setvbuf+0xc2>
 8002680:	4648      	mov	r0, r9
 8002682:	f000 f9fb 	bl	8002a7c <malloc>
 8002686:	4607      	mov	r7, r0
 8002688:	2800      	cmp	r0, #0
 800268a:	d0bc      	beq.n	8002606 <setvbuf+0xa6>
 800268c:	89a3      	ldrh	r3, [r4, #12]
 800268e:	464d      	mov	r5, r9
 8002690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002694:	81a3      	strh	r3, [r4, #12]
 8002696:	e7d3      	b.n	8002640 <setvbuf+0xe0>
 8002698:	2000      	movs	r0, #0
 800269a:	e7b6      	b.n	800260a <setvbuf+0xaa>
 800269c:	46a9      	mov	r9, r5
 800269e:	e7f5      	b.n	800268c <setvbuf+0x12c>
 80026a0:	60a0      	str	r0, [r4, #8]
 80026a2:	e7be      	b.n	8002622 <setvbuf+0xc2>
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	e7bb      	b.n	8002622 <setvbuf+0xc2>
 80026aa:	bf00      	nop
 80026ac:	20000014 	.word	0x20000014
 80026b0:	08003548 	.word	0x08003548
 80026b4:	08003568 	.word	0x08003568
 80026b8:	08003528 	.word	0x08003528

080026bc <__sflush_r>:
 80026bc:	898a      	ldrh	r2, [r1, #12]
 80026be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026c2:	4605      	mov	r5, r0
 80026c4:	0710      	lsls	r0, r2, #28
 80026c6:	460c      	mov	r4, r1
 80026c8:	d45a      	bmi.n	8002780 <__sflush_r+0xc4>
 80026ca:	684b      	ldr	r3, [r1, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	dc05      	bgt.n	80026dc <__sflush_r+0x20>
 80026d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	dc02      	bgt.n	80026dc <__sflush_r+0x20>
 80026d6:	2000      	movs	r0, #0
 80026d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026de:	2e00      	cmp	r6, #0
 80026e0:	d0f9      	beq.n	80026d6 <__sflush_r+0x1a>
 80026e2:	2300      	movs	r3, #0
 80026e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80026e8:	682f      	ldr	r7, [r5, #0]
 80026ea:	602b      	str	r3, [r5, #0]
 80026ec:	d033      	beq.n	8002756 <__sflush_r+0x9a>
 80026ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026f0:	89a3      	ldrh	r3, [r4, #12]
 80026f2:	075a      	lsls	r2, r3, #29
 80026f4:	d505      	bpl.n	8002702 <__sflush_r+0x46>
 80026f6:	6863      	ldr	r3, [r4, #4]
 80026f8:	1ac0      	subs	r0, r0, r3
 80026fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026fc:	b10b      	cbz	r3, 8002702 <__sflush_r+0x46>
 80026fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002700:	1ac0      	subs	r0, r0, r3
 8002702:	2300      	movs	r3, #0
 8002704:	4602      	mov	r2, r0
 8002706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002708:	6a21      	ldr	r1, [r4, #32]
 800270a:	4628      	mov	r0, r5
 800270c:	47b0      	blx	r6
 800270e:	1c43      	adds	r3, r0, #1
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	d106      	bne.n	8002722 <__sflush_r+0x66>
 8002714:	6829      	ldr	r1, [r5, #0]
 8002716:	291d      	cmp	r1, #29
 8002718:	d84b      	bhi.n	80027b2 <__sflush_r+0xf6>
 800271a:	4a2b      	ldr	r2, [pc, #172]	; (80027c8 <__sflush_r+0x10c>)
 800271c:	40ca      	lsrs	r2, r1
 800271e:	07d6      	lsls	r6, r2, #31
 8002720:	d547      	bpl.n	80027b2 <__sflush_r+0xf6>
 8002722:	2200      	movs	r2, #0
 8002724:	6062      	str	r2, [r4, #4]
 8002726:	6922      	ldr	r2, [r4, #16]
 8002728:	04d9      	lsls	r1, r3, #19
 800272a:	6022      	str	r2, [r4, #0]
 800272c:	d504      	bpl.n	8002738 <__sflush_r+0x7c>
 800272e:	1c42      	adds	r2, r0, #1
 8002730:	d101      	bne.n	8002736 <__sflush_r+0x7a>
 8002732:	682b      	ldr	r3, [r5, #0]
 8002734:	b903      	cbnz	r3, 8002738 <__sflush_r+0x7c>
 8002736:	6560      	str	r0, [r4, #84]	; 0x54
 8002738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800273a:	602f      	str	r7, [r5, #0]
 800273c:	2900      	cmp	r1, #0
 800273e:	d0ca      	beq.n	80026d6 <__sflush_r+0x1a>
 8002740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002744:	4299      	cmp	r1, r3
 8002746:	d002      	beq.n	800274e <__sflush_r+0x92>
 8002748:	4628      	mov	r0, r5
 800274a:	f000 f99f 	bl	8002a8c <_free_r>
 800274e:	2000      	movs	r0, #0
 8002750:	6360      	str	r0, [r4, #52]	; 0x34
 8002752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002756:	6a21      	ldr	r1, [r4, #32]
 8002758:	2301      	movs	r3, #1
 800275a:	4628      	mov	r0, r5
 800275c:	47b0      	blx	r6
 800275e:	1c41      	adds	r1, r0, #1
 8002760:	d1c6      	bne.n	80026f0 <__sflush_r+0x34>
 8002762:	682b      	ldr	r3, [r5, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0c3      	beq.n	80026f0 <__sflush_r+0x34>
 8002768:	2b1d      	cmp	r3, #29
 800276a:	d001      	beq.n	8002770 <__sflush_r+0xb4>
 800276c:	2b16      	cmp	r3, #22
 800276e:	d101      	bne.n	8002774 <__sflush_r+0xb8>
 8002770:	602f      	str	r7, [r5, #0]
 8002772:	e7b0      	b.n	80026d6 <__sflush_r+0x1a>
 8002774:	89a3      	ldrh	r3, [r4, #12]
 8002776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800277a:	81a3      	strh	r3, [r4, #12]
 800277c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002780:	690f      	ldr	r7, [r1, #16]
 8002782:	2f00      	cmp	r7, #0
 8002784:	d0a7      	beq.n	80026d6 <__sflush_r+0x1a>
 8002786:	0793      	lsls	r3, r2, #30
 8002788:	bf18      	it	ne
 800278a:	2300      	movne	r3, #0
 800278c:	680e      	ldr	r6, [r1, #0]
 800278e:	bf08      	it	eq
 8002790:	694b      	ldreq	r3, [r1, #20]
 8002792:	eba6 0807 	sub.w	r8, r6, r7
 8002796:	600f      	str	r7, [r1, #0]
 8002798:	608b      	str	r3, [r1, #8]
 800279a:	f1b8 0f00 	cmp.w	r8, #0
 800279e:	dd9a      	ble.n	80026d6 <__sflush_r+0x1a>
 80027a0:	4643      	mov	r3, r8
 80027a2:	463a      	mov	r2, r7
 80027a4:	6a21      	ldr	r1, [r4, #32]
 80027a6:	4628      	mov	r0, r5
 80027a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027aa:	47b0      	blx	r6
 80027ac:	2800      	cmp	r0, #0
 80027ae:	dc07      	bgt.n	80027c0 <__sflush_r+0x104>
 80027b0:	89a3      	ldrh	r3, [r4, #12]
 80027b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b6:	81a3      	strh	r3, [r4, #12]
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027c0:	4407      	add	r7, r0
 80027c2:	eba8 0800 	sub.w	r8, r8, r0
 80027c6:	e7e8      	b.n	800279a <__sflush_r+0xde>
 80027c8:	20400001 	.word	0x20400001

080027cc <_fflush_r>:
 80027cc:	b538      	push	{r3, r4, r5, lr}
 80027ce:	690b      	ldr	r3, [r1, #16]
 80027d0:	4605      	mov	r5, r0
 80027d2:	460c      	mov	r4, r1
 80027d4:	b1db      	cbz	r3, 800280e <_fflush_r+0x42>
 80027d6:	b118      	cbz	r0, 80027e0 <_fflush_r+0x14>
 80027d8:	6983      	ldr	r3, [r0, #24]
 80027da:	b90b      	cbnz	r3, 80027e0 <_fflush_r+0x14>
 80027dc:	f000 f860 	bl	80028a0 <__sinit>
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <_fflush_r+0x48>)
 80027e2:	429c      	cmp	r4, r3
 80027e4:	d109      	bne.n	80027fa <_fflush_r+0x2e>
 80027e6:	686c      	ldr	r4, [r5, #4]
 80027e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027ec:	b17b      	cbz	r3, 800280e <_fflush_r+0x42>
 80027ee:	4621      	mov	r1, r4
 80027f0:	4628      	mov	r0, r5
 80027f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027f6:	f7ff bf61 	b.w	80026bc <__sflush_r>
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <_fflush_r+0x4c>)
 80027fc:	429c      	cmp	r4, r3
 80027fe:	d101      	bne.n	8002804 <_fflush_r+0x38>
 8002800:	68ac      	ldr	r4, [r5, #8]
 8002802:	e7f1      	b.n	80027e8 <_fflush_r+0x1c>
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <_fflush_r+0x50>)
 8002806:	429c      	cmp	r4, r3
 8002808:	bf08      	it	eq
 800280a:	68ec      	ldreq	r4, [r5, #12]
 800280c:	e7ec      	b.n	80027e8 <_fflush_r+0x1c>
 800280e:	2000      	movs	r0, #0
 8002810:	bd38      	pop	{r3, r4, r5, pc}
 8002812:	bf00      	nop
 8002814:	08003548 	.word	0x08003548
 8002818:	08003568 	.word	0x08003568
 800281c:	08003528 	.word	0x08003528

08002820 <_cleanup_r>:
 8002820:	4901      	ldr	r1, [pc, #4]	; (8002828 <_cleanup_r+0x8>)
 8002822:	f000 b8a9 	b.w	8002978 <_fwalk_reent>
 8002826:	bf00      	nop
 8002828:	080027cd 	.word	0x080027cd

0800282c <std.isra.0>:
 800282c:	2300      	movs	r3, #0
 800282e:	b510      	push	{r4, lr}
 8002830:	4604      	mov	r4, r0
 8002832:	6003      	str	r3, [r0, #0]
 8002834:	6043      	str	r3, [r0, #4]
 8002836:	6083      	str	r3, [r0, #8]
 8002838:	8181      	strh	r1, [r0, #12]
 800283a:	6643      	str	r3, [r0, #100]	; 0x64
 800283c:	81c2      	strh	r2, [r0, #14]
 800283e:	6103      	str	r3, [r0, #16]
 8002840:	6143      	str	r3, [r0, #20]
 8002842:	6183      	str	r3, [r0, #24]
 8002844:	4619      	mov	r1, r3
 8002846:	2208      	movs	r2, #8
 8002848:	305c      	adds	r0, #92	; 0x5c
 800284a:	f7ff fe61 	bl	8002510 <memset>
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <std.isra.0+0x38>)
 8002850:	6224      	str	r4, [r4, #32]
 8002852:	6263      	str	r3, [r4, #36]	; 0x24
 8002854:	4b04      	ldr	r3, [pc, #16]	; (8002868 <std.isra.0+0x3c>)
 8002856:	62a3      	str	r3, [r4, #40]	; 0x28
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <std.isra.0+0x40>)
 800285a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <std.isra.0+0x44>)
 800285e:	6323      	str	r3, [r4, #48]	; 0x30
 8002860:	bd10      	pop	{r4, pc}
 8002862:	bf00      	nop
 8002864:	080031ad 	.word	0x080031ad
 8002868:	080031cf 	.word	0x080031cf
 800286c:	08003207 	.word	0x08003207
 8002870:	0800322b 	.word	0x0800322b

08002874 <__sfmoreglue>:
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	2568      	movs	r5, #104	; 0x68
 8002878:	1e4a      	subs	r2, r1, #1
 800287a:	4355      	muls	r5, r2
 800287c:	460e      	mov	r6, r1
 800287e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002882:	f000 f94f 	bl	8002b24 <_malloc_r>
 8002886:	4604      	mov	r4, r0
 8002888:	b140      	cbz	r0, 800289c <__sfmoreglue+0x28>
 800288a:	2100      	movs	r1, #0
 800288c:	e880 0042 	stmia.w	r0, {r1, r6}
 8002890:	300c      	adds	r0, #12
 8002892:	60a0      	str	r0, [r4, #8]
 8002894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002898:	f7ff fe3a 	bl	8002510 <memset>
 800289c:	4620      	mov	r0, r4
 800289e:	bd70      	pop	{r4, r5, r6, pc}

080028a0 <__sinit>:
 80028a0:	6983      	ldr	r3, [r0, #24]
 80028a2:	b510      	push	{r4, lr}
 80028a4:	4604      	mov	r4, r0
 80028a6:	bb33      	cbnz	r3, 80028f6 <__sinit+0x56>
 80028a8:	6483      	str	r3, [r0, #72]	; 0x48
 80028aa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80028ac:	6503      	str	r3, [r0, #80]	; 0x50
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <__sinit+0x58>)
 80028b0:	4a12      	ldr	r2, [pc, #72]	; (80028fc <__sinit+0x5c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6282      	str	r2, [r0, #40]	; 0x28
 80028b6:	4298      	cmp	r0, r3
 80028b8:	bf04      	itt	eq
 80028ba:	2301      	moveq	r3, #1
 80028bc:	6183      	streq	r3, [r0, #24]
 80028be:	f000 f81f 	bl	8002900 <__sfp>
 80028c2:	6060      	str	r0, [r4, #4]
 80028c4:	4620      	mov	r0, r4
 80028c6:	f000 f81b 	bl	8002900 <__sfp>
 80028ca:	60a0      	str	r0, [r4, #8]
 80028cc:	4620      	mov	r0, r4
 80028ce:	f000 f817 	bl	8002900 <__sfp>
 80028d2:	2200      	movs	r2, #0
 80028d4:	60e0      	str	r0, [r4, #12]
 80028d6:	2104      	movs	r1, #4
 80028d8:	6860      	ldr	r0, [r4, #4]
 80028da:	f7ff ffa7 	bl	800282c <std.isra.0>
 80028de:	2201      	movs	r2, #1
 80028e0:	2109      	movs	r1, #9
 80028e2:	68a0      	ldr	r0, [r4, #8]
 80028e4:	f7ff ffa2 	bl	800282c <std.isra.0>
 80028e8:	2202      	movs	r2, #2
 80028ea:	2112      	movs	r1, #18
 80028ec:	68e0      	ldr	r0, [r4, #12]
 80028ee:	f7ff ff9d 	bl	800282c <std.isra.0>
 80028f2:	2301      	movs	r3, #1
 80028f4:	61a3      	str	r3, [r4, #24]
 80028f6:	bd10      	pop	{r4, pc}
 80028f8:	08003524 	.word	0x08003524
 80028fc:	08002821 	.word	0x08002821

08002900 <__sfp>:
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002902:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <__sfp+0x74>)
 8002904:	4607      	mov	r7, r0
 8002906:	681e      	ldr	r6, [r3, #0]
 8002908:	69b3      	ldr	r3, [r6, #24]
 800290a:	b913      	cbnz	r3, 8002912 <__sfp+0x12>
 800290c:	4630      	mov	r0, r6
 800290e:	f7ff ffc7 	bl	80028a0 <__sinit>
 8002912:	3648      	adds	r6, #72	; 0x48
 8002914:	68b4      	ldr	r4, [r6, #8]
 8002916:	6873      	ldr	r3, [r6, #4]
 8002918:	3b01      	subs	r3, #1
 800291a:	d503      	bpl.n	8002924 <__sfp+0x24>
 800291c:	6833      	ldr	r3, [r6, #0]
 800291e:	b133      	cbz	r3, 800292e <__sfp+0x2e>
 8002920:	6836      	ldr	r6, [r6, #0]
 8002922:	e7f7      	b.n	8002914 <__sfp+0x14>
 8002924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002928:	b16d      	cbz	r5, 8002946 <__sfp+0x46>
 800292a:	3468      	adds	r4, #104	; 0x68
 800292c:	e7f4      	b.n	8002918 <__sfp+0x18>
 800292e:	2104      	movs	r1, #4
 8002930:	4638      	mov	r0, r7
 8002932:	f7ff ff9f 	bl	8002874 <__sfmoreglue>
 8002936:	6030      	str	r0, [r6, #0]
 8002938:	2800      	cmp	r0, #0
 800293a:	d1f1      	bne.n	8002920 <__sfp+0x20>
 800293c:	230c      	movs	r3, #12
 800293e:	4604      	mov	r4, r0
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	4620      	mov	r0, r4
 8002944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800294a:	81e3      	strh	r3, [r4, #14]
 800294c:	2301      	movs	r3, #1
 800294e:	6665      	str	r5, [r4, #100]	; 0x64
 8002950:	81a3      	strh	r3, [r4, #12]
 8002952:	6025      	str	r5, [r4, #0]
 8002954:	60a5      	str	r5, [r4, #8]
 8002956:	6065      	str	r5, [r4, #4]
 8002958:	6125      	str	r5, [r4, #16]
 800295a:	6165      	str	r5, [r4, #20]
 800295c:	61a5      	str	r5, [r4, #24]
 800295e:	2208      	movs	r2, #8
 8002960:	4629      	mov	r1, r5
 8002962:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002966:	f7ff fdd3 	bl	8002510 <memset>
 800296a:	6365      	str	r5, [r4, #52]	; 0x34
 800296c:	63a5      	str	r5, [r4, #56]	; 0x38
 800296e:	64a5      	str	r5, [r4, #72]	; 0x48
 8002970:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002972:	e7e6      	b.n	8002942 <__sfp+0x42>
 8002974:	08003524 	.word	0x08003524

08002978 <_fwalk_reent>:
 8002978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800297c:	4680      	mov	r8, r0
 800297e:	4689      	mov	r9, r1
 8002980:	2600      	movs	r6, #0
 8002982:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002986:	b914      	cbnz	r4, 800298e <_fwalk_reent+0x16>
 8002988:	4630      	mov	r0, r6
 800298a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800298e:	68a5      	ldr	r5, [r4, #8]
 8002990:	6867      	ldr	r7, [r4, #4]
 8002992:	3f01      	subs	r7, #1
 8002994:	d501      	bpl.n	800299a <_fwalk_reent+0x22>
 8002996:	6824      	ldr	r4, [r4, #0]
 8002998:	e7f5      	b.n	8002986 <_fwalk_reent+0xe>
 800299a:	89ab      	ldrh	r3, [r5, #12]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d907      	bls.n	80029b0 <_fwalk_reent+0x38>
 80029a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80029a4:	3301      	adds	r3, #1
 80029a6:	d003      	beq.n	80029b0 <_fwalk_reent+0x38>
 80029a8:	4629      	mov	r1, r5
 80029aa:	4640      	mov	r0, r8
 80029ac:	47c8      	blx	r9
 80029ae:	4306      	orrs	r6, r0
 80029b0:	3568      	adds	r5, #104	; 0x68
 80029b2:	e7ee      	b.n	8002992 <_fwalk_reent+0x1a>

080029b4 <__swhatbuf_r>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	460e      	mov	r6, r1
 80029b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029bc:	b090      	sub	sp, #64	; 0x40
 80029be:	2900      	cmp	r1, #0
 80029c0:	4614      	mov	r4, r2
 80029c2:	461d      	mov	r5, r3
 80029c4:	da07      	bge.n	80029d6 <__swhatbuf_r+0x22>
 80029c6:	2300      	movs	r3, #0
 80029c8:	602b      	str	r3, [r5, #0]
 80029ca:	89b3      	ldrh	r3, [r6, #12]
 80029cc:	061a      	lsls	r2, r3, #24
 80029ce:	d410      	bmi.n	80029f2 <__swhatbuf_r+0x3e>
 80029d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d4:	e00e      	b.n	80029f4 <__swhatbuf_r+0x40>
 80029d6:	aa01      	add	r2, sp, #4
 80029d8:	f000 fd0e 	bl	80033f8 <_fstat_r>
 80029dc:	2800      	cmp	r0, #0
 80029de:	dbf2      	blt.n	80029c6 <__swhatbuf_r+0x12>
 80029e0:	9a02      	ldr	r2, [sp, #8]
 80029e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80029e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80029ea:	425a      	negs	r2, r3
 80029ec:	415a      	adcs	r2, r3
 80029ee:	602a      	str	r2, [r5, #0]
 80029f0:	e7ee      	b.n	80029d0 <__swhatbuf_r+0x1c>
 80029f2:	2340      	movs	r3, #64	; 0x40
 80029f4:	2000      	movs	r0, #0
 80029f6:	6023      	str	r3, [r4, #0]
 80029f8:	b010      	add	sp, #64	; 0x40
 80029fa:	bd70      	pop	{r4, r5, r6, pc}

080029fc <__smakebuf_r>:
 80029fc:	898b      	ldrh	r3, [r1, #12]
 80029fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a00:	079d      	lsls	r5, r3, #30
 8002a02:	4606      	mov	r6, r0
 8002a04:	460c      	mov	r4, r1
 8002a06:	d507      	bpl.n	8002a18 <__smakebuf_r+0x1c>
 8002a08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a0c:	6023      	str	r3, [r4, #0]
 8002a0e:	6123      	str	r3, [r4, #16]
 8002a10:	2301      	movs	r3, #1
 8002a12:	6163      	str	r3, [r4, #20]
 8002a14:	b002      	add	sp, #8
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	ab01      	add	r3, sp, #4
 8002a1a:	466a      	mov	r2, sp
 8002a1c:	f7ff ffca 	bl	80029b4 <__swhatbuf_r>
 8002a20:	9900      	ldr	r1, [sp, #0]
 8002a22:	4605      	mov	r5, r0
 8002a24:	4630      	mov	r0, r6
 8002a26:	f000 f87d 	bl	8002b24 <_malloc_r>
 8002a2a:	b948      	cbnz	r0, 8002a40 <__smakebuf_r+0x44>
 8002a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a30:	059a      	lsls	r2, r3, #22
 8002a32:	d4ef      	bmi.n	8002a14 <__smakebuf_r+0x18>
 8002a34:	f023 0303 	bic.w	r3, r3, #3
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	81a3      	strh	r3, [r4, #12]
 8002a3e:	e7e3      	b.n	8002a08 <__smakebuf_r+0xc>
 8002a40:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <__smakebuf_r+0x7c>)
 8002a42:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a44:	89a3      	ldrh	r3, [r4, #12]
 8002a46:	6020      	str	r0, [r4, #0]
 8002a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4c:	81a3      	strh	r3, [r4, #12]
 8002a4e:	9b00      	ldr	r3, [sp, #0]
 8002a50:	6120      	str	r0, [r4, #16]
 8002a52:	6163      	str	r3, [r4, #20]
 8002a54:	9b01      	ldr	r3, [sp, #4]
 8002a56:	b15b      	cbz	r3, 8002a70 <__smakebuf_r+0x74>
 8002a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a5c:	4630      	mov	r0, r6
 8002a5e:	f000 fcdd 	bl	800341c <_isatty_r>
 8002a62:	b128      	cbz	r0, 8002a70 <__smakebuf_r+0x74>
 8002a64:	89a3      	ldrh	r3, [r4, #12]
 8002a66:	f023 0303 	bic.w	r3, r3, #3
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	81a3      	strh	r3, [r4, #12]
 8002a70:	89a3      	ldrh	r3, [r4, #12]
 8002a72:	431d      	orrs	r5, r3
 8002a74:	81a5      	strh	r5, [r4, #12]
 8002a76:	e7cd      	b.n	8002a14 <__smakebuf_r+0x18>
 8002a78:	08002821 	.word	0x08002821

08002a7c <malloc>:
 8002a7c:	4b02      	ldr	r3, [pc, #8]	; (8002a88 <malloc+0xc>)
 8002a7e:	4601      	mov	r1, r0
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	f000 b84f 	b.w	8002b24 <_malloc_r>
 8002a86:	bf00      	nop
 8002a88:	20000014 	.word	0x20000014

08002a8c <_free_r>:
 8002a8c:	b538      	push	{r3, r4, r5, lr}
 8002a8e:	4605      	mov	r5, r0
 8002a90:	2900      	cmp	r1, #0
 8002a92:	d043      	beq.n	8002b1c <_free_r+0x90>
 8002a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a98:	1f0c      	subs	r4, r1, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bfb8      	it	lt
 8002a9e:	18e4      	addlt	r4, r4, r3
 8002aa0:	f000 fcec 	bl	800347c <__malloc_lock>
 8002aa4:	4a1e      	ldr	r2, [pc, #120]	; (8002b20 <_free_r+0x94>)
 8002aa6:	6813      	ldr	r3, [r2, #0]
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	b933      	cbnz	r3, 8002aba <_free_r+0x2e>
 8002aac:	6063      	str	r3, [r4, #4]
 8002aae:	6014      	str	r4, [r2, #0]
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ab6:	f000 bce2 	b.w	800347e <__malloc_unlock>
 8002aba:	42a3      	cmp	r3, r4
 8002abc:	d90b      	bls.n	8002ad6 <_free_r+0x4a>
 8002abe:	6821      	ldr	r1, [r4, #0]
 8002ac0:	1862      	adds	r2, r4, r1
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	bf01      	itttt	eq
 8002ac6:	681a      	ldreq	r2, [r3, #0]
 8002ac8:	685b      	ldreq	r3, [r3, #4]
 8002aca:	1852      	addeq	r2, r2, r1
 8002acc:	6022      	streq	r2, [r4, #0]
 8002ace:	6063      	str	r3, [r4, #4]
 8002ad0:	6004      	str	r4, [r0, #0]
 8002ad2:	e7ed      	b.n	8002ab0 <_free_r+0x24>
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	b10a      	cbz	r2, 8002ade <_free_r+0x52>
 8002ada:	42a2      	cmp	r2, r4
 8002adc:	d9fa      	bls.n	8002ad4 <_free_r+0x48>
 8002ade:	6819      	ldr	r1, [r3, #0]
 8002ae0:	1858      	adds	r0, r3, r1
 8002ae2:	42a0      	cmp	r0, r4
 8002ae4:	d10b      	bne.n	8002afe <_free_r+0x72>
 8002ae6:	6820      	ldr	r0, [r4, #0]
 8002ae8:	4401      	add	r1, r0
 8002aea:	1858      	adds	r0, r3, r1
 8002aec:	4282      	cmp	r2, r0
 8002aee:	6019      	str	r1, [r3, #0]
 8002af0:	d1de      	bne.n	8002ab0 <_free_r+0x24>
 8002af2:	6810      	ldr	r0, [r2, #0]
 8002af4:	6852      	ldr	r2, [r2, #4]
 8002af6:	4401      	add	r1, r0
 8002af8:	6019      	str	r1, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	e7d8      	b.n	8002ab0 <_free_r+0x24>
 8002afe:	d902      	bls.n	8002b06 <_free_r+0x7a>
 8002b00:	230c      	movs	r3, #12
 8002b02:	602b      	str	r3, [r5, #0]
 8002b04:	e7d4      	b.n	8002ab0 <_free_r+0x24>
 8002b06:	6820      	ldr	r0, [r4, #0]
 8002b08:	1821      	adds	r1, r4, r0
 8002b0a:	428a      	cmp	r2, r1
 8002b0c:	bf01      	itttt	eq
 8002b0e:	6811      	ldreq	r1, [r2, #0]
 8002b10:	6852      	ldreq	r2, [r2, #4]
 8002b12:	1809      	addeq	r1, r1, r0
 8002b14:	6021      	streq	r1, [r4, #0]
 8002b16:	6062      	str	r2, [r4, #4]
 8002b18:	605c      	str	r4, [r3, #4]
 8002b1a:	e7c9      	b.n	8002ab0 <_free_r+0x24>
 8002b1c:	bd38      	pop	{r3, r4, r5, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000098 	.word	0x20000098

08002b24 <_malloc_r>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	1ccd      	adds	r5, r1, #3
 8002b28:	f025 0503 	bic.w	r5, r5, #3
 8002b2c:	3508      	adds	r5, #8
 8002b2e:	2d0c      	cmp	r5, #12
 8002b30:	bf38      	it	cc
 8002b32:	250c      	movcc	r5, #12
 8002b34:	2d00      	cmp	r5, #0
 8002b36:	4606      	mov	r6, r0
 8002b38:	db01      	blt.n	8002b3e <_malloc_r+0x1a>
 8002b3a:	42a9      	cmp	r1, r5
 8002b3c:	d903      	bls.n	8002b46 <_malloc_r+0x22>
 8002b3e:	230c      	movs	r3, #12
 8002b40:	6033      	str	r3, [r6, #0]
 8002b42:	2000      	movs	r0, #0
 8002b44:	bd70      	pop	{r4, r5, r6, pc}
 8002b46:	f000 fc99 	bl	800347c <__malloc_lock>
 8002b4a:	4a23      	ldr	r2, [pc, #140]	; (8002bd8 <_malloc_r+0xb4>)
 8002b4c:	6814      	ldr	r4, [r2, #0]
 8002b4e:	4621      	mov	r1, r4
 8002b50:	b991      	cbnz	r1, 8002b78 <_malloc_r+0x54>
 8002b52:	4c22      	ldr	r4, [pc, #136]	; (8002bdc <_malloc_r+0xb8>)
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	b91b      	cbnz	r3, 8002b60 <_malloc_r+0x3c>
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f000 fb17 	bl	800318c <_sbrk_r>
 8002b5e:	6020      	str	r0, [r4, #0]
 8002b60:	4629      	mov	r1, r5
 8002b62:	4630      	mov	r0, r6
 8002b64:	f000 fb12 	bl	800318c <_sbrk_r>
 8002b68:	1c43      	adds	r3, r0, #1
 8002b6a:	d126      	bne.n	8002bba <_malloc_r+0x96>
 8002b6c:	230c      	movs	r3, #12
 8002b6e:	4630      	mov	r0, r6
 8002b70:	6033      	str	r3, [r6, #0]
 8002b72:	f000 fc84 	bl	800347e <__malloc_unlock>
 8002b76:	e7e4      	b.n	8002b42 <_malloc_r+0x1e>
 8002b78:	680b      	ldr	r3, [r1, #0]
 8002b7a:	1b5b      	subs	r3, r3, r5
 8002b7c:	d41a      	bmi.n	8002bb4 <_malloc_r+0x90>
 8002b7e:	2b0b      	cmp	r3, #11
 8002b80:	d90f      	bls.n	8002ba2 <_malloc_r+0x7e>
 8002b82:	600b      	str	r3, [r1, #0]
 8002b84:	18cc      	adds	r4, r1, r3
 8002b86:	50cd      	str	r5, [r1, r3]
 8002b88:	4630      	mov	r0, r6
 8002b8a:	f000 fc78 	bl	800347e <__malloc_unlock>
 8002b8e:	f104 000b 	add.w	r0, r4, #11
 8002b92:	1d23      	adds	r3, r4, #4
 8002b94:	f020 0007 	bic.w	r0, r0, #7
 8002b98:	1ac3      	subs	r3, r0, r3
 8002b9a:	d01b      	beq.n	8002bd4 <_malloc_r+0xb0>
 8002b9c:	425a      	negs	r2, r3
 8002b9e:	50e2      	str	r2, [r4, r3]
 8002ba0:	bd70      	pop	{r4, r5, r6, pc}
 8002ba2:	428c      	cmp	r4, r1
 8002ba4:	bf0b      	itete	eq
 8002ba6:	6863      	ldreq	r3, [r4, #4]
 8002ba8:	684b      	ldrne	r3, [r1, #4]
 8002baa:	6013      	streq	r3, [r2, #0]
 8002bac:	6063      	strne	r3, [r4, #4]
 8002bae:	bf18      	it	ne
 8002bb0:	460c      	movne	r4, r1
 8002bb2:	e7e9      	b.n	8002b88 <_malloc_r+0x64>
 8002bb4:	460c      	mov	r4, r1
 8002bb6:	6849      	ldr	r1, [r1, #4]
 8002bb8:	e7ca      	b.n	8002b50 <_malloc_r+0x2c>
 8002bba:	1cc4      	adds	r4, r0, #3
 8002bbc:	f024 0403 	bic.w	r4, r4, #3
 8002bc0:	42a0      	cmp	r0, r4
 8002bc2:	d005      	beq.n	8002bd0 <_malloc_r+0xac>
 8002bc4:	1a21      	subs	r1, r4, r0
 8002bc6:	4630      	mov	r0, r6
 8002bc8:	f000 fae0 	bl	800318c <_sbrk_r>
 8002bcc:	3001      	adds	r0, #1
 8002bce:	d0cd      	beq.n	8002b6c <_malloc_r+0x48>
 8002bd0:	6025      	str	r5, [r4, #0]
 8002bd2:	e7d9      	b.n	8002b88 <_malloc_r+0x64>
 8002bd4:	bd70      	pop	{r4, r5, r6, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000098 	.word	0x20000098
 8002bdc:	2000009c 	.word	0x2000009c

08002be0 <__sfputc_r>:
 8002be0:	6893      	ldr	r3, [r2, #8]
 8002be2:	b410      	push	{r4}
 8002be4:	3b01      	subs	r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	6093      	str	r3, [r2, #8]
 8002bea:	da08      	bge.n	8002bfe <__sfputc_r+0x1e>
 8002bec:	6994      	ldr	r4, [r2, #24]
 8002bee:	42a3      	cmp	r3, r4
 8002bf0:	db02      	blt.n	8002bf8 <__sfputc_r+0x18>
 8002bf2:	b2cb      	uxtb	r3, r1
 8002bf4:	2b0a      	cmp	r3, #10
 8002bf6:	d102      	bne.n	8002bfe <__sfputc_r+0x1e>
 8002bf8:	bc10      	pop	{r4}
 8002bfa:	f000 bb1b 	b.w	8003234 <__swbuf_r>
 8002bfe:	6813      	ldr	r3, [r2, #0]
 8002c00:	1c58      	adds	r0, r3, #1
 8002c02:	6010      	str	r0, [r2, #0]
 8002c04:	7019      	strb	r1, [r3, #0]
 8002c06:	b2c8      	uxtb	r0, r1
 8002c08:	bc10      	pop	{r4}
 8002c0a:	4770      	bx	lr

08002c0c <__sfputs_r>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	4606      	mov	r6, r0
 8002c10:	460f      	mov	r7, r1
 8002c12:	4614      	mov	r4, r2
 8002c14:	18d5      	adds	r5, r2, r3
 8002c16:	42ac      	cmp	r4, r5
 8002c18:	d101      	bne.n	8002c1e <__sfputs_r+0x12>
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	e007      	b.n	8002c2e <__sfputs_r+0x22>
 8002c1e:	463a      	mov	r2, r7
 8002c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c24:	4630      	mov	r0, r6
 8002c26:	f7ff ffdb 	bl	8002be0 <__sfputc_r>
 8002c2a:	1c43      	adds	r3, r0, #1
 8002c2c:	d1f3      	bne.n	8002c16 <__sfputs_r+0xa>
 8002c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c30 <_vfiprintf_r>:
 8002c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	b09d      	sub	sp, #116	; 0x74
 8002c36:	460c      	mov	r4, r1
 8002c38:	4617      	mov	r7, r2
 8002c3a:	9303      	str	r3, [sp, #12]
 8002c3c:	4606      	mov	r6, r0
 8002c3e:	b118      	cbz	r0, 8002c48 <_vfiprintf_r+0x18>
 8002c40:	6983      	ldr	r3, [r0, #24]
 8002c42:	b90b      	cbnz	r3, 8002c48 <_vfiprintf_r+0x18>
 8002c44:	f7ff fe2c 	bl	80028a0 <__sinit>
 8002c48:	4b7c      	ldr	r3, [pc, #496]	; (8002e3c <_vfiprintf_r+0x20c>)
 8002c4a:	429c      	cmp	r4, r3
 8002c4c:	d157      	bne.n	8002cfe <_vfiprintf_r+0xce>
 8002c4e:	6874      	ldr	r4, [r6, #4]
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	0718      	lsls	r0, r3, #28
 8002c54:	d55d      	bpl.n	8002d12 <_vfiprintf_r+0xe2>
 8002c56:	6923      	ldr	r3, [r4, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d05a      	beq.n	8002d12 <_vfiprintf_r+0xe2>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8002c60:	2320      	movs	r3, #32
 8002c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c66:	2330      	movs	r3, #48	; 0x30
 8002c68:	f04f 0b01 	mov.w	fp, #1
 8002c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c70:	46b8      	mov	r8, r7
 8002c72:	4645      	mov	r5, r8
 8002c74:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d155      	bne.n	8002d28 <_vfiprintf_r+0xf8>
 8002c7c:	ebb8 0a07 	subs.w	sl, r8, r7
 8002c80:	d00b      	beq.n	8002c9a <_vfiprintf_r+0x6a>
 8002c82:	4653      	mov	r3, sl
 8002c84:	463a      	mov	r2, r7
 8002c86:	4621      	mov	r1, r4
 8002c88:	4630      	mov	r0, r6
 8002c8a:	f7ff ffbf 	bl	8002c0c <__sfputs_r>
 8002c8e:	3001      	adds	r0, #1
 8002c90:	f000 80c4 	beq.w	8002e1c <_vfiprintf_r+0x1ec>
 8002c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c96:	4453      	add	r3, sl
 8002c98:	9309      	str	r3, [sp, #36]	; 0x24
 8002c9a:	f898 3000 	ldrb.w	r3, [r8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80bc 	beq.w	8002e1c <_vfiprintf_r+0x1ec>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8002caa:	9304      	str	r3, [sp, #16]
 8002cac:	9307      	str	r3, [sp, #28]
 8002cae:	9205      	str	r2, [sp, #20]
 8002cb0:	9306      	str	r3, [sp, #24]
 8002cb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cb6:	931a      	str	r3, [sp, #104]	; 0x68
 8002cb8:	2205      	movs	r2, #5
 8002cba:	7829      	ldrb	r1, [r5, #0]
 8002cbc:	4860      	ldr	r0, [pc, #384]	; (8002e40 <_vfiprintf_r+0x210>)
 8002cbe:	f000 fbcf 	bl	8003460 <memchr>
 8002cc2:	f105 0801 	add.w	r8, r5, #1
 8002cc6:	9b04      	ldr	r3, [sp, #16]
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	d131      	bne.n	8002d30 <_vfiprintf_r+0x100>
 8002ccc:	06d9      	lsls	r1, r3, #27
 8002cce:	bf44      	itt	mi
 8002cd0:	2220      	movmi	r2, #32
 8002cd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cd6:	071a      	lsls	r2, r3, #28
 8002cd8:	bf44      	itt	mi
 8002cda:	222b      	movmi	r2, #43	; 0x2b
 8002cdc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ce0:	782a      	ldrb	r2, [r5, #0]
 8002ce2:	2a2a      	cmp	r2, #42	; 0x2a
 8002ce4:	d02c      	beq.n	8002d40 <_vfiprintf_r+0x110>
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	200a      	movs	r0, #10
 8002cea:	9a07      	ldr	r2, [sp, #28]
 8002cec:	46a8      	mov	r8, r5
 8002cee:	f898 3000 	ldrb.w	r3, [r8]
 8002cf2:	3501      	adds	r5, #1
 8002cf4:	3b30      	subs	r3, #48	; 0x30
 8002cf6:	2b09      	cmp	r3, #9
 8002cf8:	d96d      	bls.n	8002dd6 <_vfiprintf_r+0x1a6>
 8002cfa:	b371      	cbz	r1, 8002d5a <_vfiprintf_r+0x12a>
 8002cfc:	e026      	b.n	8002d4c <_vfiprintf_r+0x11c>
 8002cfe:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <_vfiprintf_r+0x214>)
 8002d00:	429c      	cmp	r4, r3
 8002d02:	d101      	bne.n	8002d08 <_vfiprintf_r+0xd8>
 8002d04:	68b4      	ldr	r4, [r6, #8]
 8002d06:	e7a3      	b.n	8002c50 <_vfiprintf_r+0x20>
 8002d08:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <_vfiprintf_r+0x218>)
 8002d0a:	429c      	cmp	r4, r3
 8002d0c:	bf08      	it	eq
 8002d0e:	68f4      	ldreq	r4, [r6, #12]
 8002d10:	e79e      	b.n	8002c50 <_vfiprintf_r+0x20>
 8002d12:	4621      	mov	r1, r4
 8002d14:	4630      	mov	r0, r6
 8002d16:	f000 faf1 	bl	80032fc <__swsetup_r>
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d09e      	beq.n	8002c5c <_vfiprintf_r+0x2c>
 8002d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d22:	b01d      	add	sp, #116	; 0x74
 8002d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d28:	2b25      	cmp	r3, #37	; 0x25
 8002d2a:	d0a7      	beq.n	8002c7c <_vfiprintf_r+0x4c>
 8002d2c:	46a8      	mov	r8, r5
 8002d2e:	e7a0      	b.n	8002c72 <_vfiprintf_r+0x42>
 8002d30:	4a43      	ldr	r2, [pc, #268]	; (8002e40 <_vfiprintf_r+0x210>)
 8002d32:	4645      	mov	r5, r8
 8002d34:	1a80      	subs	r0, r0, r2
 8002d36:	fa0b f000 	lsl.w	r0, fp, r0
 8002d3a:	4318      	orrs	r0, r3
 8002d3c:	9004      	str	r0, [sp, #16]
 8002d3e:	e7bb      	b.n	8002cb8 <_vfiprintf_r+0x88>
 8002d40:	9a03      	ldr	r2, [sp, #12]
 8002d42:	1d11      	adds	r1, r2, #4
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	9103      	str	r1, [sp, #12]
 8002d48:	2a00      	cmp	r2, #0
 8002d4a:	db01      	blt.n	8002d50 <_vfiprintf_r+0x120>
 8002d4c:	9207      	str	r2, [sp, #28]
 8002d4e:	e004      	b.n	8002d5a <_vfiprintf_r+0x12a>
 8002d50:	4252      	negs	r2, r2
 8002d52:	f043 0302 	orr.w	r3, r3, #2
 8002d56:	9207      	str	r2, [sp, #28]
 8002d58:	9304      	str	r3, [sp, #16]
 8002d5a:	f898 3000 	ldrb.w	r3, [r8]
 8002d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8002d60:	d110      	bne.n	8002d84 <_vfiprintf_r+0x154>
 8002d62:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002d66:	f108 0101 	add.w	r1, r8, #1
 8002d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d6c:	d137      	bne.n	8002dde <_vfiprintf_r+0x1ae>
 8002d6e:	9b03      	ldr	r3, [sp, #12]
 8002d70:	f108 0802 	add.w	r8, r8, #2
 8002d74:	1d1a      	adds	r2, r3, #4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	9203      	str	r2, [sp, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bfb8      	it	lt
 8002d7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d82:	9305      	str	r3, [sp, #20]
 8002d84:	4d31      	ldr	r5, [pc, #196]	; (8002e4c <_vfiprintf_r+0x21c>)
 8002d86:	2203      	movs	r2, #3
 8002d88:	f898 1000 	ldrb.w	r1, [r8]
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	f000 fb67 	bl	8003460 <memchr>
 8002d92:	b140      	cbz	r0, 8002da6 <_vfiprintf_r+0x176>
 8002d94:	2340      	movs	r3, #64	; 0x40
 8002d96:	1b40      	subs	r0, r0, r5
 8002d98:	fa03 f000 	lsl.w	r0, r3, r0
 8002d9c:	9b04      	ldr	r3, [sp, #16]
 8002d9e:	f108 0801 	add.w	r8, r8, #1
 8002da2:	4303      	orrs	r3, r0
 8002da4:	9304      	str	r3, [sp, #16]
 8002da6:	f898 1000 	ldrb.w	r1, [r8]
 8002daa:	2206      	movs	r2, #6
 8002dac:	4828      	ldr	r0, [pc, #160]	; (8002e50 <_vfiprintf_r+0x220>)
 8002dae:	f108 0701 	add.w	r7, r8, #1
 8002db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002db6:	f000 fb53 	bl	8003460 <memchr>
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d034      	beq.n	8002e28 <_vfiprintf_r+0x1f8>
 8002dbe:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <_vfiprintf_r+0x224>)
 8002dc0:	bb03      	cbnz	r3, 8002e04 <_vfiprintf_r+0x1d4>
 8002dc2:	9b03      	ldr	r3, [sp, #12]
 8002dc4:	3307      	adds	r3, #7
 8002dc6:	f023 0307 	bic.w	r3, r3, #7
 8002dca:	3308      	adds	r3, #8
 8002dcc:	9303      	str	r3, [sp, #12]
 8002dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dd0:	444b      	add	r3, r9
 8002dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8002dd4:	e74c      	b.n	8002c70 <_vfiprintf_r+0x40>
 8002dd6:	fb00 3202 	mla	r2, r0, r2, r3
 8002dda:	2101      	movs	r1, #1
 8002ddc:	e786      	b.n	8002cec <_vfiprintf_r+0xbc>
 8002dde:	2300      	movs	r3, #0
 8002de0:	250a      	movs	r5, #10
 8002de2:	4618      	mov	r0, r3
 8002de4:	9305      	str	r3, [sp, #20]
 8002de6:	4688      	mov	r8, r1
 8002de8:	f898 2000 	ldrb.w	r2, [r8]
 8002dec:	3101      	adds	r1, #1
 8002dee:	3a30      	subs	r2, #48	; 0x30
 8002df0:	2a09      	cmp	r2, #9
 8002df2:	d903      	bls.n	8002dfc <_vfiprintf_r+0x1cc>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0c5      	beq.n	8002d84 <_vfiprintf_r+0x154>
 8002df8:	9005      	str	r0, [sp, #20]
 8002dfa:	e7c3      	b.n	8002d84 <_vfiprintf_r+0x154>
 8002dfc:	fb05 2000 	mla	r0, r5, r0, r2
 8002e00:	2301      	movs	r3, #1
 8002e02:	e7f0      	b.n	8002de6 <_vfiprintf_r+0x1b6>
 8002e04:	ab03      	add	r3, sp, #12
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4622      	mov	r2, r4
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <_vfiprintf_r+0x228>)
 8002e0c:	a904      	add	r1, sp, #16
 8002e0e:	4630      	mov	r0, r6
 8002e10:	f3af 8000 	nop.w
 8002e14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002e18:	4681      	mov	r9, r0
 8002e1a:	d1d8      	bne.n	8002dce <_vfiprintf_r+0x19e>
 8002e1c:	89a3      	ldrh	r3, [r4, #12]
 8002e1e:	065b      	lsls	r3, r3, #25
 8002e20:	f53f af7d 	bmi.w	8002d1e <_vfiprintf_r+0xee>
 8002e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e26:	e77c      	b.n	8002d22 <_vfiprintf_r+0xf2>
 8002e28:	ab03      	add	r3, sp, #12
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4622      	mov	r2, r4
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <_vfiprintf_r+0x228>)
 8002e30:	a904      	add	r1, sp, #16
 8002e32:	4630      	mov	r0, r6
 8002e34:	f000 f88a 	bl	8002f4c <_printf_i>
 8002e38:	e7ec      	b.n	8002e14 <_vfiprintf_r+0x1e4>
 8002e3a:	bf00      	nop
 8002e3c:	08003548 	.word	0x08003548
 8002e40:	08003588 	.word	0x08003588
 8002e44:	08003568 	.word	0x08003568
 8002e48:	08003528 	.word	0x08003528
 8002e4c:	0800358e 	.word	0x0800358e
 8002e50:	08003592 	.word	0x08003592
 8002e54:	00000000 	.word	0x00000000
 8002e58:	08002c0d 	.word	0x08002c0d

08002e5c <_printf_common>:
 8002e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e60:	4691      	mov	r9, r2
 8002e62:	461f      	mov	r7, r3
 8002e64:	688a      	ldr	r2, [r1, #8]
 8002e66:	690b      	ldr	r3, [r1, #16]
 8002e68:	4606      	mov	r6, r0
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	bfb8      	it	lt
 8002e6e:	4613      	movlt	r3, r2
 8002e70:	f8c9 3000 	str.w	r3, [r9]
 8002e74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e78:	460c      	mov	r4, r1
 8002e7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e7e:	b112      	cbz	r2, 8002e86 <_printf_common+0x2a>
 8002e80:	3301      	adds	r3, #1
 8002e82:	f8c9 3000 	str.w	r3, [r9]
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	0699      	lsls	r1, r3, #26
 8002e8a:	bf42      	ittt	mi
 8002e8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e90:	3302      	addmi	r3, #2
 8002e92:	f8c9 3000 	strmi.w	r3, [r9]
 8002e96:	6825      	ldr	r5, [r4, #0]
 8002e98:	f015 0506 	ands.w	r5, r5, #6
 8002e9c:	d107      	bne.n	8002eae <_printf_common+0x52>
 8002e9e:	f104 0a19 	add.w	sl, r4, #25
 8002ea2:	68e3      	ldr	r3, [r4, #12]
 8002ea4:	f8d9 2000 	ldr.w	r2, [r9]
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	429d      	cmp	r5, r3
 8002eac:	db2a      	blt.n	8002f04 <_printf_common+0xa8>
 8002eae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	3300      	adds	r3, #0
 8002eb6:	bf18      	it	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	0692      	lsls	r2, r2, #26
 8002ebc:	d42f      	bmi.n	8002f1e <_printf_common+0xc2>
 8002ebe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ec2:	4639      	mov	r1, r7
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	47c0      	blx	r8
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d022      	beq.n	8002f12 <_printf_common+0xb6>
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	68e5      	ldr	r5, [r4, #12]
 8002ed0:	f003 0306 	and.w	r3, r3, #6
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	bf18      	it	ne
 8002ed8:	2500      	movne	r5, #0
 8002eda:	f8d9 2000 	ldr.w	r2, [r9]
 8002ede:	f04f 0900 	mov.w	r9, #0
 8002ee2:	bf08      	it	eq
 8002ee4:	1aad      	subeq	r5, r5, r2
 8002ee6:	68a3      	ldr	r3, [r4, #8]
 8002ee8:	6922      	ldr	r2, [r4, #16]
 8002eea:	bf08      	it	eq
 8002eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	bfc4      	itt	gt
 8002ef4:	1a9b      	subgt	r3, r3, r2
 8002ef6:	18ed      	addgt	r5, r5, r3
 8002ef8:	341a      	adds	r4, #26
 8002efa:	454d      	cmp	r5, r9
 8002efc:	d11b      	bne.n	8002f36 <_printf_common+0xda>
 8002efe:	2000      	movs	r0, #0
 8002f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f04:	2301      	movs	r3, #1
 8002f06:	4652      	mov	r2, sl
 8002f08:	4639      	mov	r1, r7
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	47c0      	blx	r8
 8002f0e:	3001      	adds	r0, #1
 8002f10:	d103      	bne.n	8002f1a <_printf_common+0xbe>
 8002f12:	f04f 30ff 	mov.w	r0, #4294967295
 8002f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f1a:	3501      	adds	r5, #1
 8002f1c:	e7c1      	b.n	8002ea2 <_printf_common+0x46>
 8002f1e:	2030      	movs	r0, #48	; 0x30
 8002f20:	18e1      	adds	r1, r4, r3
 8002f22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f2c:	4422      	add	r2, r4
 8002f2e:	3302      	adds	r3, #2
 8002f30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f34:	e7c3      	b.n	8002ebe <_printf_common+0x62>
 8002f36:	2301      	movs	r3, #1
 8002f38:	4622      	mov	r2, r4
 8002f3a:	4639      	mov	r1, r7
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	47c0      	blx	r8
 8002f40:	3001      	adds	r0, #1
 8002f42:	d0e6      	beq.n	8002f12 <_printf_common+0xb6>
 8002f44:	f109 0901 	add.w	r9, r9, #1
 8002f48:	e7d7      	b.n	8002efa <_printf_common+0x9e>
	...

08002f4c <_printf_i>:
 8002f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f50:	4617      	mov	r7, r2
 8002f52:	7e0a      	ldrb	r2, [r1, #24]
 8002f54:	b085      	sub	sp, #20
 8002f56:	2a6e      	cmp	r2, #110	; 0x6e
 8002f58:	4698      	mov	r8, r3
 8002f5a:	4606      	mov	r6, r0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f60:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002f64:	f000 80bc 	beq.w	80030e0 <_printf_i+0x194>
 8002f68:	d81a      	bhi.n	8002fa0 <_printf_i+0x54>
 8002f6a:	2a63      	cmp	r2, #99	; 0x63
 8002f6c:	d02e      	beq.n	8002fcc <_printf_i+0x80>
 8002f6e:	d80a      	bhi.n	8002f86 <_printf_i+0x3a>
 8002f70:	2a00      	cmp	r2, #0
 8002f72:	f000 80c8 	beq.w	8003106 <_printf_i+0x1ba>
 8002f76:	2a58      	cmp	r2, #88	; 0x58
 8002f78:	f000 808a 	beq.w	8003090 <_printf_i+0x144>
 8002f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f80:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002f84:	e02a      	b.n	8002fdc <_printf_i+0x90>
 8002f86:	2a64      	cmp	r2, #100	; 0x64
 8002f88:	d001      	beq.n	8002f8e <_printf_i+0x42>
 8002f8a:	2a69      	cmp	r2, #105	; 0x69
 8002f8c:	d1f6      	bne.n	8002f7c <_printf_i+0x30>
 8002f8e:	6821      	ldr	r1, [r4, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002f96:	d023      	beq.n	8002fe0 <_printf_i+0x94>
 8002f98:	1d11      	adds	r1, r2, #4
 8002f9a:	6019      	str	r1, [r3, #0]
 8002f9c:	6813      	ldr	r3, [r2, #0]
 8002f9e:	e027      	b.n	8002ff0 <_printf_i+0xa4>
 8002fa0:	2a73      	cmp	r2, #115	; 0x73
 8002fa2:	f000 80b4 	beq.w	800310e <_printf_i+0x1c2>
 8002fa6:	d808      	bhi.n	8002fba <_printf_i+0x6e>
 8002fa8:	2a6f      	cmp	r2, #111	; 0x6f
 8002faa:	d02a      	beq.n	8003002 <_printf_i+0xb6>
 8002fac:	2a70      	cmp	r2, #112	; 0x70
 8002fae:	d1e5      	bne.n	8002f7c <_printf_i+0x30>
 8002fb0:	680a      	ldr	r2, [r1, #0]
 8002fb2:	f042 0220 	orr.w	r2, r2, #32
 8002fb6:	600a      	str	r2, [r1, #0]
 8002fb8:	e003      	b.n	8002fc2 <_printf_i+0x76>
 8002fba:	2a75      	cmp	r2, #117	; 0x75
 8002fbc:	d021      	beq.n	8003002 <_printf_i+0xb6>
 8002fbe:	2a78      	cmp	r2, #120	; 0x78
 8002fc0:	d1dc      	bne.n	8002f7c <_printf_i+0x30>
 8002fc2:	2278      	movs	r2, #120	; 0x78
 8002fc4:	496f      	ldr	r1, [pc, #444]	; (8003184 <_printf_i+0x238>)
 8002fc6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002fca:	e064      	b.n	8003096 <_printf_i+0x14a>
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002fd2:	1d11      	adds	r1, r2, #4
 8002fd4:	6019      	str	r1, [r3, #0]
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0a3      	b.n	8003128 <_printf_i+0x1dc>
 8002fe0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002fe4:	f102 0104 	add.w	r1, r2, #4
 8002fe8:	6019      	str	r1, [r3, #0]
 8002fea:	d0d7      	beq.n	8002f9c <_printf_i+0x50>
 8002fec:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da03      	bge.n	8002ffc <_printf_i+0xb0>
 8002ff4:	222d      	movs	r2, #45	; 0x2d
 8002ff6:	425b      	negs	r3, r3
 8002ff8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ffc:	4962      	ldr	r1, [pc, #392]	; (8003188 <_printf_i+0x23c>)
 8002ffe:	220a      	movs	r2, #10
 8003000:	e017      	b.n	8003032 <_printf_i+0xe6>
 8003002:	6820      	ldr	r0, [r4, #0]
 8003004:	6819      	ldr	r1, [r3, #0]
 8003006:	f010 0f80 	tst.w	r0, #128	; 0x80
 800300a:	d003      	beq.n	8003014 <_printf_i+0xc8>
 800300c:	1d08      	adds	r0, r1, #4
 800300e:	6018      	str	r0, [r3, #0]
 8003010:	680b      	ldr	r3, [r1, #0]
 8003012:	e006      	b.n	8003022 <_printf_i+0xd6>
 8003014:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003018:	f101 0004 	add.w	r0, r1, #4
 800301c:	6018      	str	r0, [r3, #0]
 800301e:	d0f7      	beq.n	8003010 <_printf_i+0xc4>
 8003020:	880b      	ldrh	r3, [r1, #0]
 8003022:	2a6f      	cmp	r2, #111	; 0x6f
 8003024:	bf14      	ite	ne
 8003026:	220a      	movne	r2, #10
 8003028:	2208      	moveq	r2, #8
 800302a:	4957      	ldr	r1, [pc, #348]	; (8003188 <_printf_i+0x23c>)
 800302c:	2000      	movs	r0, #0
 800302e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003032:	6865      	ldr	r5, [r4, #4]
 8003034:	2d00      	cmp	r5, #0
 8003036:	60a5      	str	r5, [r4, #8]
 8003038:	f2c0 809c 	blt.w	8003174 <_printf_i+0x228>
 800303c:	6820      	ldr	r0, [r4, #0]
 800303e:	f020 0004 	bic.w	r0, r0, #4
 8003042:	6020      	str	r0, [r4, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d13f      	bne.n	80030c8 <_printf_i+0x17c>
 8003048:	2d00      	cmp	r5, #0
 800304a:	f040 8095 	bne.w	8003178 <_printf_i+0x22c>
 800304e:	4675      	mov	r5, lr
 8003050:	2a08      	cmp	r2, #8
 8003052:	d10b      	bne.n	800306c <_printf_i+0x120>
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	07da      	lsls	r2, r3, #31
 8003058:	d508      	bpl.n	800306c <_printf_i+0x120>
 800305a:	6923      	ldr	r3, [r4, #16]
 800305c:	6862      	ldr	r2, [r4, #4]
 800305e:	429a      	cmp	r2, r3
 8003060:	bfde      	ittt	le
 8003062:	2330      	movle	r3, #48	; 0x30
 8003064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003068:	f105 35ff 	addle.w	r5, r5, #4294967295
 800306c:	ebae 0305 	sub.w	r3, lr, r5
 8003070:	6123      	str	r3, [r4, #16]
 8003072:	f8cd 8000 	str.w	r8, [sp]
 8003076:	463b      	mov	r3, r7
 8003078:	aa03      	add	r2, sp, #12
 800307a:	4621      	mov	r1, r4
 800307c:	4630      	mov	r0, r6
 800307e:	f7ff feed 	bl	8002e5c <_printf_common>
 8003082:	3001      	adds	r0, #1
 8003084:	d155      	bne.n	8003132 <_printf_i+0x1e6>
 8003086:	f04f 30ff 	mov.w	r0, #4294967295
 800308a:	b005      	add	sp, #20
 800308c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003090:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003094:	493c      	ldr	r1, [pc, #240]	; (8003188 <_printf_i+0x23c>)
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800309e:	f100 0504 	add.w	r5, r0, #4
 80030a2:	601d      	str	r5, [r3, #0]
 80030a4:	d001      	beq.n	80030aa <_printf_i+0x15e>
 80030a6:	6803      	ldr	r3, [r0, #0]
 80030a8:	e002      	b.n	80030b0 <_printf_i+0x164>
 80030aa:	0655      	lsls	r5, r2, #25
 80030ac:	d5fb      	bpl.n	80030a6 <_printf_i+0x15a>
 80030ae:	8803      	ldrh	r3, [r0, #0]
 80030b0:	07d0      	lsls	r0, r2, #31
 80030b2:	bf44      	itt	mi
 80030b4:	f042 0220 	orrmi.w	r2, r2, #32
 80030b8:	6022      	strmi	r2, [r4, #0]
 80030ba:	b91b      	cbnz	r3, 80030c4 <_printf_i+0x178>
 80030bc:	6822      	ldr	r2, [r4, #0]
 80030be:	f022 0220 	bic.w	r2, r2, #32
 80030c2:	6022      	str	r2, [r4, #0]
 80030c4:	2210      	movs	r2, #16
 80030c6:	e7b1      	b.n	800302c <_printf_i+0xe0>
 80030c8:	4675      	mov	r5, lr
 80030ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80030ce:	fb02 3310 	mls	r3, r2, r0, r3
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80030d8:	4603      	mov	r3, r0
 80030da:	2800      	cmp	r0, #0
 80030dc:	d1f5      	bne.n	80030ca <_printf_i+0x17e>
 80030de:	e7b7      	b.n	8003050 <_printf_i+0x104>
 80030e0:	6808      	ldr	r0, [r1, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80030e8:	6949      	ldr	r1, [r1, #20]
 80030ea:	d004      	beq.n	80030f6 <_printf_i+0x1aa>
 80030ec:	1d10      	adds	r0, r2, #4
 80030ee:	6018      	str	r0, [r3, #0]
 80030f0:	6813      	ldr	r3, [r2, #0]
 80030f2:	6019      	str	r1, [r3, #0]
 80030f4:	e007      	b.n	8003106 <_printf_i+0x1ba>
 80030f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030fa:	f102 0004 	add.w	r0, r2, #4
 80030fe:	6018      	str	r0, [r3, #0]
 8003100:	6813      	ldr	r3, [r2, #0]
 8003102:	d0f6      	beq.n	80030f2 <_printf_i+0x1a6>
 8003104:	8019      	strh	r1, [r3, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	4675      	mov	r5, lr
 800310a:	6123      	str	r3, [r4, #16]
 800310c:	e7b1      	b.n	8003072 <_printf_i+0x126>
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	1d11      	adds	r1, r2, #4
 8003112:	6019      	str	r1, [r3, #0]
 8003114:	6815      	ldr	r5, [r2, #0]
 8003116:	2100      	movs	r1, #0
 8003118:	6862      	ldr	r2, [r4, #4]
 800311a:	4628      	mov	r0, r5
 800311c:	f000 f9a0 	bl	8003460 <memchr>
 8003120:	b108      	cbz	r0, 8003126 <_printf_i+0x1da>
 8003122:	1b40      	subs	r0, r0, r5
 8003124:	6060      	str	r0, [r4, #4]
 8003126:	6863      	ldr	r3, [r4, #4]
 8003128:	6123      	str	r3, [r4, #16]
 800312a:	2300      	movs	r3, #0
 800312c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003130:	e79f      	b.n	8003072 <_printf_i+0x126>
 8003132:	6923      	ldr	r3, [r4, #16]
 8003134:	462a      	mov	r2, r5
 8003136:	4639      	mov	r1, r7
 8003138:	4630      	mov	r0, r6
 800313a:	47c0      	blx	r8
 800313c:	3001      	adds	r0, #1
 800313e:	d0a2      	beq.n	8003086 <_printf_i+0x13a>
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	079b      	lsls	r3, r3, #30
 8003144:	d507      	bpl.n	8003156 <_printf_i+0x20a>
 8003146:	2500      	movs	r5, #0
 8003148:	f104 0919 	add.w	r9, r4, #25
 800314c:	68e3      	ldr	r3, [r4, #12]
 800314e:	9a03      	ldr	r2, [sp, #12]
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	429d      	cmp	r5, r3
 8003154:	db05      	blt.n	8003162 <_printf_i+0x216>
 8003156:	68e0      	ldr	r0, [r4, #12]
 8003158:	9b03      	ldr	r3, [sp, #12]
 800315a:	4298      	cmp	r0, r3
 800315c:	bfb8      	it	lt
 800315e:	4618      	movlt	r0, r3
 8003160:	e793      	b.n	800308a <_printf_i+0x13e>
 8003162:	2301      	movs	r3, #1
 8003164:	464a      	mov	r2, r9
 8003166:	4639      	mov	r1, r7
 8003168:	4630      	mov	r0, r6
 800316a:	47c0      	blx	r8
 800316c:	3001      	adds	r0, #1
 800316e:	d08a      	beq.n	8003086 <_printf_i+0x13a>
 8003170:	3501      	adds	r5, #1
 8003172:	e7eb      	b.n	800314c <_printf_i+0x200>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1a7      	bne.n	80030c8 <_printf_i+0x17c>
 8003178:	780b      	ldrb	r3, [r1, #0]
 800317a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800317e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003182:	e765      	b.n	8003050 <_printf_i+0x104>
 8003184:	080035aa 	.word	0x080035aa
 8003188:	08003599 	.word	0x08003599

0800318c <_sbrk_r>:
 800318c:	b538      	push	{r3, r4, r5, lr}
 800318e:	2300      	movs	r3, #0
 8003190:	4c05      	ldr	r4, [pc, #20]	; (80031a8 <_sbrk_r+0x1c>)
 8003192:	4605      	mov	r5, r0
 8003194:	4608      	mov	r0, r1
 8003196:	6023      	str	r3, [r4, #0]
 8003198:	f7fe ff56 	bl	8002048 <_sbrk>
 800319c:	1c43      	adds	r3, r0, #1
 800319e:	d102      	bne.n	80031a6 <_sbrk_r+0x1a>
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	b103      	cbz	r3, 80031a6 <_sbrk_r+0x1a>
 80031a4:	602b      	str	r3, [r5, #0]
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
 80031a8:	20000274 	.word	0x20000274

080031ac <__sread>:
 80031ac:	b510      	push	{r4, lr}
 80031ae:	460c      	mov	r4, r1
 80031b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b4:	f000 f964 	bl	8003480 <_read_r>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	bfab      	itete	ge
 80031bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031be:	89a3      	ldrhlt	r3, [r4, #12]
 80031c0:	181b      	addge	r3, r3, r0
 80031c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031c6:	bfac      	ite	ge
 80031c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80031ca:	81a3      	strhlt	r3, [r4, #12]
 80031cc:	bd10      	pop	{r4, pc}

080031ce <__swrite>:
 80031ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d2:	461f      	mov	r7, r3
 80031d4:	898b      	ldrh	r3, [r1, #12]
 80031d6:	4605      	mov	r5, r0
 80031d8:	05db      	lsls	r3, r3, #23
 80031da:	460c      	mov	r4, r1
 80031dc:	4616      	mov	r6, r2
 80031de:	d505      	bpl.n	80031ec <__swrite+0x1e>
 80031e0:	2302      	movs	r3, #2
 80031e2:	2200      	movs	r2, #0
 80031e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e8:	f000 f928 	bl	800343c <_lseek_r>
 80031ec:	89a3      	ldrh	r3, [r4, #12]
 80031ee:	4632      	mov	r2, r6
 80031f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031f4:	81a3      	strh	r3, [r4, #12]
 80031f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031fa:	463b      	mov	r3, r7
 80031fc:	4628      	mov	r0, r5
 80031fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003202:	f000 b869 	b.w	80032d8 <_write_r>

08003206 <__sseek>:
 8003206:	b510      	push	{r4, lr}
 8003208:	460c      	mov	r4, r1
 800320a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800320e:	f000 f915 	bl	800343c <_lseek_r>
 8003212:	1c43      	adds	r3, r0, #1
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	bf15      	itete	ne
 8003218:	6560      	strne	r0, [r4, #84]	; 0x54
 800321a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800321e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003222:	81a3      	strheq	r3, [r4, #12]
 8003224:	bf18      	it	ne
 8003226:	81a3      	strhne	r3, [r4, #12]
 8003228:	bd10      	pop	{r4, pc}

0800322a <__sclose>:
 800322a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800322e:	f000 b8d3 	b.w	80033d8 <_close_r>
	...

08003234 <__swbuf_r>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	460e      	mov	r6, r1
 8003238:	4614      	mov	r4, r2
 800323a:	4605      	mov	r5, r0
 800323c:	b118      	cbz	r0, 8003246 <__swbuf_r+0x12>
 800323e:	6983      	ldr	r3, [r0, #24]
 8003240:	b90b      	cbnz	r3, 8003246 <__swbuf_r+0x12>
 8003242:	f7ff fb2d 	bl	80028a0 <__sinit>
 8003246:	4b21      	ldr	r3, [pc, #132]	; (80032cc <__swbuf_r+0x98>)
 8003248:	429c      	cmp	r4, r3
 800324a:	d12a      	bne.n	80032a2 <__swbuf_r+0x6e>
 800324c:	686c      	ldr	r4, [r5, #4]
 800324e:	69a3      	ldr	r3, [r4, #24]
 8003250:	60a3      	str	r3, [r4, #8]
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	071a      	lsls	r2, r3, #28
 8003256:	d52e      	bpl.n	80032b6 <__swbuf_r+0x82>
 8003258:	6923      	ldr	r3, [r4, #16]
 800325a:	b363      	cbz	r3, 80032b6 <__swbuf_r+0x82>
 800325c:	6923      	ldr	r3, [r4, #16]
 800325e:	6820      	ldr	r0, [r4, #0]
 8003260:	b2f6      	uxtb	r6, r6
 8003262:	1ac0      	subs	r0, r0, r3
 8003264:	6963      	ldr	r3, [r4, #20]
 8003266:	4637      	mov	r7, r6
 8003268:	4298      	cmp	r0, r3
 800326a:	db04      	blt.n	8003276 <__swbuf_r+0x42>
 800326c:	4621      	mov	r1, r4
 800326e:	4628      	mov	r0, r5
 8003270:	f7ff faac 	bl	80027cc <_fflush_r>
 8003274:	bb28      	cbnz	r0, 80032c2 <__swbuf_r+0x8e>
 8003276:	68a3      	ldr	r3, [r4, #8]
 8003278:	3001      	adds	r0, #1
 800327a:	3b01      	subs	r3, #1
 800327c:	60a3      	str	r3, [r4, #8]
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	6022      	str	r2, [r4, #0]
 8003284:	701e      	strb	r6, [r3, #0]
 8003286:	6963      	ldr	r3, [r4, #20]
 8003288:	4298      	cmp	r0, r3
 800328a:	d004      	beq.n	8003296 <__swbuf_r+0x62>
 800328c:	89a3      	ldrh	r3, [r4, #12]
 800328e:	07db      	lsls	r3, r3, #31
 8003290:	d519      	bpl.n	80032c6 <__swbuf_r+0x92>
 8003292:	2e0a      	cmp	r6, #10
 8003294:	d117      	bne.n	80032c6 <__swbuf_r+0x92>
 8003296:	4621      	mov	r1, r4
 8003298:	4628      	mov	r0, r5
 800329a:	f7ff fa97 	bl	80027cc <_fflush_r>
 800329e:	b190      	cbz	r0, 80032c6 <__swbuf_r+0x92>
 80032a0:	e00f      	b.n	80032c2 <__swbuf_r+0x8e>
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <__swbuf_r+0x9c>)
 80032a4:	429c      	cmp	r4, r3
 80032a6:	d101      	bne.n	80032ac <__swbuf_r+0x78>
 80032a8:	68ac      	ldr	r4, [r5, #8]
 80032aa:	e7d0      	b.n	800324e <__swbuf_r+0x1a>
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <__swbuf_r+0xa0>)
 80032ae:	429c      	cmp	r4, r3
 80032b0:	bf08      	it	eq
 80032b2:	68ec      	ldreq	r4, [r5, #12]
 80032b4:	e7cb      	b.n	800324e <__swbuf_r+0x1a>
 80032b6:	4621      	mov	r1, r4
 80032b8:	4628      	mov	r0, r5
 80032ba:	f000 f81f 	bl	80032fc <__swsetup_r>
 80032be:	2800      	cmp	r0, #0
 80032c0:	d0cc      	beq.n	800325c <__swbuf_r+0x28>
 80032c2:	f04f 37ff 	mov.w	r7, #4294967295
 80032c6:	4638      	mov	r0, r7
 80032c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ca:	bf00      	nop
 80032cc:	08003548 	.word	0x08003548
 80032d0:	08003568 	.word	0x08003568
 80032d4:	08003528 	.word	0x08003528

080032d8 <_write_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4605      	mov	r5, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	2200      	movs	r2, #0
 80032e2:	4c05      	ldr	r4, [pc, #20]	; (80032f8 <_write_r+0x20>)
 80032e4:	6022      	str	r2, [r4, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	f7fe fea0 	bl	800202c <_write>
 80032ec:	1c43      	adds	r3, r0, #1
 80032ee:	d102      	bne.n	80032f6 <_write_r+0x1e>
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	b103      	cbz	r3, 80032f6 <_write_r+0x1e>
 80032f4:	602b      	str	r3, [r5, #0]
 80032f6:	bd38      	pop	{r3, r4, r5, pc}
 80032f8:	20000274 	.word	0x20000274

080032fc <__swsetup_r>:
 80032fc:	4b32      	ldr	r3, [pc, #200]	; (80033c8 <__swsetup_r+0xcc>)
 80032fe:	b570      	push	{r4, r5, r6, lr}
 8003300:	681d      	ldr	r5, [r3, #0]
 8003302:	4606      	mov	r6, r0
 8003304:	460c      	mov	r4, r1
 8003306:	b125      	cbz	r5, 8003312 <__swsetup_r+0x16>
 8003308:	69ab      	ldr	r3, [r5, #24]
 800330a:	b913      	cbnz	r3, 8003312 <__swsetup_r+0x16>
 800330c:	4628      	mov	r0, r5
 800330e:	f7ff fac7 	bl	80028a0 <__sinit>
 8003312:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <__swsetup_r+0xd0>)
 8003314:	429c      	cmp	r4, r3
 8003316:	d10f      	bne.n	8003338 <__swsetup_r+0x3c>
 8003318:	686c      	ldr	r4, [r5, #4]
 800331a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800331e:	b29a      	uxth	r2, r3
 8003320:	0715      	lsls	r5, r2, #28
 8003322:	d42c      	bmi.n	800337e <__swsetup_r+0x82>
 8003324:	06d0      	lsls	r0, r2, #27
 8003326:	d411      	bmi.n	800334c <__swsetup_r+0x50>
 8003328:	2209      	movs	r2, #9
 800332a:	6032      	str	r2, [r6, #0]
 800332c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003330:	81a3      	strh	r3, [r4, #12]
 8003332:	f04f 30ff 	mov.w	r0, #4294967295
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <__swsetup_r+0xd4>)
 800333a:	429c      	cmp	r4, r3
 800333c:	d101      	bne.n	8003342 <__swsetup_r+0x46>
 800333e:	68ac      	ldr	r4, [r5, #8]
 8003340:	e7eb      	b.n	800331a <__swsetup_r+0x1e>
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <__swsetup_r+0xd8>)
 8003344:	429c      	cmp	r4, r3
 8003346:	bf08      	it	eq
 8003348:	68ec      	ldreq	r4, [r5, #12]
 800334a:	e7e6      	b.n	800331a <__swsetup_r+0x1e>
 800334c:	0751      	lsls	r1, r2, #29
 800334e:	d512      	bpl.n	8003376 <__swsetup_r+0x7a>
 8003350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003352:	b141      	cbz	r1, 8003366 <__swsetup_r+0x6a>
 8003354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003358:	4299      	cmp	r1, r3
 800335a:	d002      	beq.n	8003362 <__swsetup_r+0x66>
 800335c:	4630      	mov	r0, r6
 800335e:	f7ff fb95 	bl	8002a8c <_free_r>
 8003362:	2300      	movs	r3, #0
 8003364:	6363      	str	r3, [r4, #52]	; 0x34
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800336c:	81a3      	strh	r3, [r4, #12]
 800336e:	2300      	movs	r3, #0
 8003370:	6063      	str	r3, [r4, #4]
 8003372:	6923      	ldr	r3, [r4, #16]
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	89a3      	ldrh	r3, [r4, #12]
 8003378:	f043 0308 	orr.w	r3, r3, #8
 800337c:	81a3      	strh	r3, [r4, #12]
 800337e:	6923      	ldr	r3, [r4, #16]
 8003380:	b94b      	cbnz	r3, 8003396 <__swsetup_r+0x9a>
 8003382:	89a3      	ldrh	r3, [r4, #12]
 8003384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338c:	d003      	beq.n	8003396 <__swsetup_r+0x9a>
 800338e:	4621      	mov	r1, r4
 8003390:	4630      	mov	r0, r6
 8003392:	f7ff fb33 	bl	80029fc <__smakebuf_r>
 8003396:	89a2      	ldrh	r2, [r4, #12]
 8003398:	f012 0301 	ands.w	r3, r2, #1
 800339c:	d00c      	beq.n	80033b8 <__swsetup_r+0xbc>
 800339e:	2300      	movs	r3, #0
 80033a0:	60a3      	str	r3, [r4, #8]
 80033a2:	6963      	ldr	r3, [r4, #20]
 80033a4:	425b      	negs	r3, r3
 80033a6:	61a3      	str	r3, [r4, #24]
 80033a8:	6923      	ldr	r3, [r4, #16]
 80033aa:	b953      	cbnz	r3, 80033c2 <__swsetup_r+0xc6>
 80033ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80033b4:	d1ba      	bne.n	800332c <__swsetup_r+0x30>
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	0792      	lsls	r2, r2, #30
 80033ba:	bf58      	it	pl
 80033bc:	6963      	ldrpl	r3, [r4, #20]
 80033be:	60a3      	str	r3, [r4, #8]
 80033c0:	e7f2      	b.n	80033a8 <__swsetup_r+0xac>
 80033c2:	2000      	movs	r0, #0
 80033c4:	e7f7      	b.n	80033b6 <__swsetup_r+0xba>
 80033c6:	bf00      	nop
 80033c8:	20000014 	.word	0x20000014
 80033cc:	08003548 	.word	0x08003548
 80033d0:	08003568 	.word	0x08003568
 80033d4:	08003528 	.word	0x08003528

080033d8 <_close_r>:
 80033d8:	b538      	push	{r3, r4, r5, lr}
 80033da:	2300      	movs	r3, #0
 80033dc:	4c05      	ldr	r4, [pc, #20]	; (80033f4 <_close_r+0x1c>)
 80033de:	4605      	mov	r5, r0
 80033e0:	4608      	mov	r0, r1
 80033e2:	6023      	str	r3, [r4, #0]
 80033e4:	f7fe fe4a 	bl	800207c <_close>
 80033e8:	1c43      	adds	r3, r0, #1
 80033ea:	d102      	bne.n	80033f2 <_close_r+0x1a>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	b103      	cbz	r3, 80033f2 <_close_r+0x1a>
 80033f0:	602b      	str	r3, [r5, #0]
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
 80033f4:	20000274 	.word	0x20000274

080033f8 <_fstat_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	2300      	movs	r3, #0
 80033fc:	4c06      	ldr	r4, [pc, #24]	; (8003418 <_fstat_r+0x20>)
 80033fe:	4605      	mov	r5, r0
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	f7fe fe3c 	bl	8002082 <_fstat>
 800340a:	1c43      	adds	r3, r0, #1
 800340c:	d102      	bne.n	8003414 <_fstat_r+0x1c>
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	b103      	cbz	r3, 8003414 <_fstat_r+0x1c>
 8003412:	602b      	str	r3, [r5, #0]
 8003414:	bd38      	pop	{r3, r4, r5, pc}
 8003416:	bf00      	nop
 8003418:	20000274 	.word	0x20000274

0800341c <_isatty_r>:
 800341c:	b538      	push	{r3, r4, r5, lr}
 800341e:	2300      	movs	r3, #0
 8003420:	4c05      	ldr	r4, [pc, #20]	; (8003438 <_isatty_r+0x1c>)
 8003422:	4605      	mov	r5, r0
 8003424:	4608      	mov	r0, r1
 8003426:	6023      	str	r3, [r4, #0]
 8003428:	f7fe fe30 	bl	800208c <_isatty>
 800342c:	1c43      	adds	r3, r0, #1
 800342e:	d102      	bne.n	8003436 <_isatty_r+0x1a>
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	b103      	cbz	r3, 8003436 <_isatty_r+0x1a>
 8003434:	602b      	str	r3, [r5, #0]
 8003436:	bd38      	pop	{r3, r4, r5, pc}
 8003438:	20000274 	.word	0x20000274

0800343c <_lseek_r>:
 800343c:	b538      	push	{r3, r4, r5, lr}
 800343e:	4605      	mov	r5, r0
 8003440:	4608      	mov	r0, r1
 8003442:	4611      	mov	r1, r2
 8003444:	2200      	movs	r2, #0
 8003446:	4c05      	ldr	r4, [pc, #20]	; (800345c <_lseek_r+0x20>)
 8003448:	6022      	str	r2, [r4, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	f7fe fe20 	bl	8002090 <_lseek>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d102      	bne.n	800345a <_lseek_r+0x1e>
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	b103      	cbz	r3, 800345a <_lseek_r+0x1e>
 8003458:	602b      	str	r3, [r5, #0]
 800345a:	bd38      	pop	{r3, r4, r5, pc}
 800345c:	20000274 	.word	0x20000274

08003460 <memchr>:
 8003460:	b510      	push	{r4, lr}
 8003462:	b2c9      	uxtb	r1, r1
 8003464:	4402      	add	r2, r0
 8003466:	4290      	cmp	r0, r2
 8003468:	4603      	mov	r3, r0
 800346a:	d101      	bne.n	8003470 <memchr+0x10>
 800346c:	2000      	movs	r0, #0
 800346e:	bd10      	pop	{r4, pc}
 8003470:	781c      	ldrb	r4, [r3, #0]
 8003472:	3001      	adds	r0, #1
 8003474:	428c      	cmp	r4, r1
 8003476:	d1f6      	bne.n	8003466 <memchr+0x6>
 8003478:	4618      	mov	r0, r3
 800347a:	bd10      	pop	{r4, pc}

0800347c <__malloc_lock>:
 800347c:	4770      	bx	lr

0800347e <__malloc_unlock>:
 800347e:	4770      	bx	lr

08003480 <_read_r>:
 8003480:	b538      	push	{r3, r4, r5, lr}
 8003482:	4605      	mov	r5, r0
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	2200      	movs	r2, #0
 800348a:	4c05      	ldr	r4, [pc, #20]	; (80034a0 <_read_r+0x20>)
 800348c:	6022      	str	r2, [r4, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	f7fe fdbe 	bl	8002010 <_read>
 8003494:	1c43      	adds	r3, r0, #1
 8003496:	d102      	bne.n	800349e <_read_r+0x1e>
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	b103      	cbz	r3, 800349e <_read_r+0x1e>
 800349c:	602b      	str	r3, [r5, #0]
 800349e:	bd38      	pop	{r3, r4, r5, pc}
 80034a0:	20000274 	.word	0x20000274

080034a4 <_init>:
 80034a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a6:	bf00      	nop
 80034a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034aa:	bc08      	pop	{r3}
 80034ac:	469e      	mov	lr, r3
 80034ae:	4770      	bx	lr

080034b0 <_fini>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	bf00      	nop
 80034b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b6:	bc08      	pop	{r3}
 80034b8:	469e      	mov	lr, r3
 80034ba:	4770      	bx	lr
