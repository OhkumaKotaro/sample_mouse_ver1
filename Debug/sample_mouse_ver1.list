
sample_mouse_ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c84  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f30  08002f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08002f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000224  20000078  08002fb0  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000029c  08002fb0  0002029c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017c1c  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000316b  00000000  00000000  00037cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006c6f  00000000  00000000  0003ae28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000aa0  00000000  00000000  00041a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ce0  00000000  00000000  00042538  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000063fd  00000000  00000000  00043218  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003c5a  00000000  00000000  00049615  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004d26f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000023c4  00000000  00000000  0004d2ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	08002e50 	.word	0x08002e50

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	08002e50 	.word	0x08002e50

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <HAL_InitTick+0x3c>)
{
 8000228:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800022a:	7818      	ldrb	r0, [r3, #0]
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	fbb3 f3f0 	udiv	r3, r3, r0
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <HAL_InitTick+0x40>)
 8000236:	6810      	ldr	r0, [r2, #0]
 8000238:	fbb0 f0f3 	udiv	r0, r0, r3
 800023c:	f000 fb0a 	bl	8000854 <HAL_SYSTICK_Config>
 8000240:	4604      	mov	r4, r0
 8000242:	b958      	cbnz	r0, 800025c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000244:	2d0f      	cmp	r5, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	4602      	mov	r2, r0
 800024a:	4629      	mov	r1, r5
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 fac0 	bl	80007d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <HAL_InitTick+0x44>)
 8000256:	4620      	mov	r0, r4
 8000258:	601d      	str	r5, [r3, #0]
 800025a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800025c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800025e:	bd38      	pop	{r3, r4, r5, pc}
 8000260:	20000000 	.word	0x20000000
 8000264:	20000010 	.word	0x20000010
 8000268:	20000004 	.word	0x20000004

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_Init+0x20>)
{
 800026e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000270:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000272:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027a:	f000 fa99 	bl	80007b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffd0 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000284:	f001 fec0 	bl	8002008 <HAL_MspInit>
}
 8000288:	2000      	movs	r0, #0
 800028a:	bd08      	pop	{r3, pc}
 800028c:	40022000 	.word	0x40022000

08000290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000290:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <HAL_IncTick+0x10>)
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <HAL_IncTick+0x14>)
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	440b      	add	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	200000a0 	.word	0x200000a0
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_GetTick+0x8>)
 80002aa:	6818      	ldr	r0, [r3, #0]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	200000a0 	.word	0x200000a0

080002b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b4:	b538      	push	{r3, r4, r5, lr}
 80002b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff fff6 	bl	80002a8 <HAL_GetTick>
 80002bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80002c0:	bf1e      	ittt	ne
 80002c2:	4b04      	ldrne	r3, [pc, #16]	; (80002d4 <HAL_Delay+0x20>)
 80002c4:	781b      	ldrbne	r3, [r3, #0]
 80002c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002c8:	f7ff ffee 	bl	80002a8 <HAL_GetTick>
 80002cc:	1b40      	subs	r0, r0, r5
 80002ce:	4284      	cmp	r4, r0
 80002d0:	d8fa      	bhi.n	80002c8 <HAL_Delay+0x14>
  {
  }
}
 80002d2:	bd38      	pop	{r3, r4, r5, pc}
 80002d4:	20000000 	.word	0x20000000

080002d8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80002d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80002da:	2600      	movs	r6, #0
{
 80002dc:	4604      	mov	r4, r0
 80002de:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80002e0:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80002e2:	f7ff ffe1 	bl	80002a8 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80002e6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80002e8:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80002ea:	689a      	ldr	r2, [r3, #8]
 80002ec:	05d2      	lsls	r2, r2, #23
 80002ee:	d508      	bpl.n	8000302 <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80002f0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80002f4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002f8:	f043 0320 	orr.w	r3, r3, #32
 80002fc:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80002fe:	b003      	add	sp, #12
 8000300:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000302:	685a      	ldr	r2, [r3, #4]
 8000304:	05d6      	lsls	r6, r2, #23
 8000306:	d403      	bmi.n	8000310 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800030a:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800030e:	d03b      	beq.n	8000388 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000310:	4b3a      	ldr	r3, [pc, #232]	; (80003fc <HAL_ADC_PollForConversion+0x124>)
 8000312:	2002      	movs	r0, #2
 8000314:	681e      	ldr	r6, [r3, #0]
 8000316:	f000 fec1 	bl	800109c <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800031a:	6823      	ldr	r3, [r4, #0]
 800031c:	4a38      	ldr	r2, [pc, #224]	; (8000400 <HAL_ADC_PollForConversion+0x128>)
 800031e:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000320:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000324:	4211      	tst	r1, r2
 8000326:	4a37      	ldr	r2, [pc, #220]	; (8000404 <HAL_ADC_PollForConversion+0x12c>)
 8000328:	d14f      	bne.n	80003ca <HAL_ADC_PollForConversion+0xf2>
 800032a:	68de      	ldr	r6, [r3, #12]
 800032c:	4936      	ldr	r1, [pc, #216]	; (8000408 <HAL_ADC_PollForConversion+0x130>)
 800032e:	420e      	tst	r6, r1
 8000330:	d14b      	bne.n	80003ca <HAL_ADC_PollForConversion+0xf2>
 8000332:	6919      	ldr	r1, [r3, #16]
 8000334:	4211      	tst	r1, r2
 8000336:	d159      	bne.n	80003ec <HAL_ADC_PollForConversion+0x114>
 8000338:	68da      	ldr	r2, [r3, #12]
 800033a:	4b34      	ldr	r3, [pc, #208]	; (800040c <HAL_ADC_PollForConversion+0x134>)
 800033c:	421a      	tst	r2, r3
 800033e:	bf14      	ite	ne
 8000340:	2329      	movne	r3, #41	; 0x29
 8000342:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000344:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000348:	9b01      	ldr	r3, [sp, #4]
 800034a:	429e      	cmp	r6, r3
 800034c:	d920      	bls.n	8000390 <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 800034e:	1c6b      	adds	r3, r5, #1
 8000350:	d005      	beq.n	800035e <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000352:	b15d      	cbz	r5, 800036c <HAL_ADC_PollForConversion+0x94>
 8000354:	f7ff ffa8 	bl	80002a8 <HAL_GetTick>
 8000358:	1bc0      	subs	r0, r0, r7
 800035a:	4285      	cmp	r5, r0
 800035c:	d306      	bcc.n	800036c <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 800035e:	9b01      	ldr	r3, [sp, #4]
 8000360:	3301      	adds	r3, #1
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	e7f0      	b.n	8000348 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 8000366:	1c68      	adds	r0, r5, #1
 8000368:	d00f      	beq.n	800038a <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800036a:	b945      	cbnz	r5, 800037e <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800036c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 800036e:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000370:	f043 0304 	orr.w	r3, r3, #4
 8000374:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8000376:	2300      	movs	r3, #0
 8000378:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 800037c:	e7bf      	b.n	80002fe <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800037e:	f7ff ff93 	bl	80002a8 <HAL_GetTick>
 8000382:	1bc0      	subs	r0, r0, r7
 8000384:	4285      	cmp	r5, r0
 8000386:	d3f1      	bcc.n	800036c <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000388:	6822      	ldr	r2, [r4, #0]
 800038a:	6813      	ldr	r3, [r2, #0]
 800038c:	0799      	lsls	r1, r3, #30
 800038e:	d5ea      	bpl.n	8000366 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000390:	f06f 0312 	mvn.w	r3, #18
 8000394:	6822      	ldr	r2, [r4, #0]
 8000396:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000398:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800039a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800039e:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003a0:	6893      	ldr	r3, [r2, #8]
 80003a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80003a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80003aa:	d125      	bne.n	80003f8 <HAL_ADC_PollForConversion+0x120>
 80003ac:	68e3      	ldr	r3, [r4, #12]
 80003ae:	bb1b      	cbnz	r3, 80003f8 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80003b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003b6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80003b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80003ba:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80003be:	d11b      	bne.n	80003f8 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80003c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80003c8:	e799      	b.n	80002fe <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80003ca:	6919      	ldr	r1, [r3, #16]
 80003cc:	4211      	tst	r1, r2
 80003ce:	d103      	bne.n	80003d8 <HAL_ADC_PollForConversion+0x100>
 80003d0:	68d9      	ldr	r1, [r3, #12]
 80003d2:	4a0e      	ldr	r2, [pc, #56]	; (800040c <HAL_ADC_PollForConversion+0x134>)
 80003d4:	4211      	tst	r1, r2
 80003d6:	d00b      	beq.n	80003f0 <HAL_ADC_PollForConversion+0x118>
 80003d8:	6919      	ldr	r1, [r3, #16]
 80003da:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <HAL_ADC_PollForConversion+0x138>)
 80003dc:	4211      	tst	r1, r2
 80003de:	d109      	bne.n	80003f4 <HAL_ADC_PollForConversion+0x11c>
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	4213      	tst	r3, r2
 80003e4:	bf14      	ite	ne
 80003e6:	23fc      	movne	r3, #252	; 0xfc
 80003e8:	2354      	moveq	r3, #84	; 0x54
 80003ea:	e7ab      	b.n	8000344 <HAL_ADC_PollForConversion+0x6c>
 80003ec:	2329      	movs	r3, #41	; 0x29
 80003ee:	e7a9      	b.n	8000344 <HAL_ADC_PollForConversion+0x6c>
 80003f0:	2354      	movs	r3, #84	; 0x54
 80003f2:	e7a7      	b.n	8000344 <HAL_ADC_PollForConversion+0x6c>
 80003f4:	23fc      	movs	r3, #252	; 0xfc
 80003f6:	e7a5      	b.n	8000344 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 80003f8:	2000      	movs	r0, #0
 80003fa:	e780      	b.n	80002fe <HAL_ADC_PollForConversion+0x26>
 80003fc:	20000010 	.word	0x20000010
 8000400:	24924924 	.word	0x24924924
 8000404:	12492492 	.word	0x12492492
 8000408:	00924924 	.word	0x00924924
 800040c:	00492492 	.word	0x00492492
 8000410:	00249249 	.word	0x00249249

08000414 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000414:	6803      	ldr	r3, [r0, #0]
 8000416:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000418:	4770      	bx	lr
	...

0800041c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800041c:	2300      	movs	r3, #0
{ 
 800041e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000420:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000422:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000426:	2b01      	cmp	r3, #1
 8000428:	d074      	beq.n	8000514 <HAL_ADC_ConfigChannel+0xf8>
 800042a:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800042c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800042e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000432:	2d06      	cmp	r5, #6
 8000434:	6802      	ldr	r2, [r0, #0]
 8000436:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800043a:	680c      	ldr	r4, [r1, #0]
 800043c:	d825      	bhi.n	800048a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800043e:	442b      	add	r3, r5
 8000440:	251f      	movs	r5, #31
 8000442:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000444:	3b05      	subs	r3, #5
 8000446:	409d      	lsls	r5, r3
 8000448:	ea26 0505 	bic.w	r5, r6, r5
 800044c:	fa04 f303 	lsl.w	r3, r4, r3
 8000450:	432b      	orrs	r3, r5
 8000452:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000454:	2c09      	cmp	r4, #9
 8000456:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800045a:	688d      	ldr	r5, [r1, #8]
 800045c:	d92f      	bls.n	80004be <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800045e:	2607      	movs	r6, #7
 8000460:	4423      	add	r3, r4
 8000462:	68d1      	ldr	r1, [r2, #12]
 8000464:	3b1e      	subs	r3, #30
 8000466:	409e      	lsls	r6, r3
 8000468:	ea21 0106 	bic.w	r1, r1, r6
 800046c:	fa05 f303 	lsl.w	r3, r5, r3
 8000470:	430b      	orrs	r3, r1
 8000472:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000474:	f1a4 0310 	sub.w	r3, r4, #16
 8000478:	2b01      	cmp	r3, #1
 800047a:	d92b      	bls.n	80004d4 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800047c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800047e:	2200      	movs	r2, #0
 8000480:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000484:	4618      	mov	r0, r3
 8000486:	b002      	add	sp, #8
 8000488:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800048a:	2d0c      	cmp	r5, #12
 800048c:	d80b      	bhi.n	80004a6 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800048e:	442b      	add	r3, r5
 8000490:	251f      	movs	r5, #31
 8000492:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000494:	3b23      	subs	r3, #35	; 0x23
 8000496:	409d      	lsls	r5, r3
 8000498:	ea26 0505 	bic.w	r5, r6, r5
 800049c:	fa04 f303 	lsl.w	r3, r4, r3
 80004a0:	432b      	orrs	r3, r5
 80004a2:	6313      	str	r3, [r2, #48]	; 0x30
 80004a4:	e7d6      	b.n	8000454 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80004a6:	442b      	add	r3, r5
 80004a8:	251f      	movs	r5, #31
 80004aa:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80004ac:	3b41      	subs	r3, #65	; 0x41
 80004ae:	409d      	lsls	r5, r3
 80004b0:	ea26 0505 	bic.w	r5, r6, r5
 80004b4:	fa04 f303 	lsl.w	r3, r4, r3
 80004b8:	432b      	orrs	r3, r5
 80004ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004bc:	e7ca      	b.n	8000454 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80004be:	2607      	movs	r6, #7
 80004c0:	6911      	ldr	r1, [r2, #16]
 80004c2:	4423      	add	r3, r4
 80004c4:	409e      	lsls	r6, r3
 80004c6:	ea21 0106 	bic.w	r1, r1, r6
 80004ca:	fa05 f303 	lsl.w	r3, r5, r3
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6113      	str	r3, [r2, #16]
 80004d2:	e7cf      	b.n	8000474 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80004d4:	4b10      	ldr	r3, [pc, #64]	; (8000518 <HAL_ADC_ConfigChannel+0xfc>)
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d116      	bne.n	8000508 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80004da:	6893      	ldr	r3, [r2, #8]
 80004dc:	021b      	lsls	r3, r3, #8
 80004de:	d4cd      	bmi.n	800047c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80004e0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80004e2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80004e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004e8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80004ea:	d1c7      	bne.n	800047c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <HAL_ADC_ConfigChannel+0x100>)
 80004ee:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <HAL_ADC_ConfigChannel+0x104>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80004f6:	230a      	movs	r3, #10
 80004f8:	4353      	muls	r3, r2
            wait_loop_index--;
 80004fa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0bc      	beq.n	800047c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000502:	9b01      	ldr	r3, [sp, #4]
 8000504:	3b01      	subs	r3, #1
 8000506:	e7f8      	b.n	80004fa <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000508:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800050a:	f043 0320 	orr.w	r3, r3, #32
 800050e:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000510:	2301      	movs	r3, #1
 8000512:	e7b4      	b.n	800047e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000514:	2302      	movs	r3, #2
 8000516:	e7b5      	b.n	8000484 <HAL_ADC_ConfigChannel+0x68>
 8000518:	40012400 	.word	0x40012400
 800051c:	20000010 	.word	0x20000010
 8000520:	000f4240 	.word	0x000f4240

08000524 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000524:	2300      	movs	r3, #0
{
 8000526:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000528:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800052a:	6803      	ldr	r3, [r0, #0]
{
 800052c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	07d2      	lsls	r2, r2, #31
 8000532:	d502      	bpl.n	800053a <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000534:	2000      	movs	r0, #0
}
 8000536:	b002      	add	sp, #8
 8000538:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	f042 0201 	orr.w	r2, r2, #1
 8000540:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000542:	4b12      	ldr	r3, [pc, #72]	; (800058c <ADC_Enable+0x68>)
 8000544:	4a12      	ldr	r2, [pc, #72]	; (8000590 <ADC_Enable+0x6c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800054c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800054e:	9b01      	ldr	r3, [sp, #4]
 8000550:	b9c3      	cbnz	r3, 8000584 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000552:	f7ff fea9 	bl	80002a8 <HAL_GetTick>
 8000556:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000558:	6823      	ldr	r3, [r4, #0]
 800055a:	689d      	ldr	r5, [r3, #8]
 800055c:	f015 0501 	ands.w	r5, r5, #1
 8000560:	d1e8      	bne.n	8000534 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000562:	f7ff fea1 	bl	80002a8 <HAL_GetTick>
 8000566:	1b80      	subs	r0, r0, r6
 8000568:	2802      	cmp	r0, #2
 800056a:	d9f5      	bls.n	8000558 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800056c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800056e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000578:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800057a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000582:	e7d8      	b.n	8000536 <ADC_Enable+0x12>
      wait_loop_index--;
 8000584:	9b01      	ldr	r3, [sp, #4]
 8000586:	3b01      	subs	r3, #1
 8000588:	e7e0      	b.n	800054c <ADC_Enable+0x28>
 800058a:	bf00      	nop
 800058c:	20000010 	.word	0x20000010
 8000590:	000f4240 	.word	0x000f4240

08000594 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000594:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000598:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800059a:	2b01      	cmp	r3, #1
{
 800059c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800059e:	d054      	beq.n	800064a <HAL_ADC_Start+0xb6>
 80005a0:	2301      	movs	r3, #1
 80005a2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80005a6:	f7ff ffbd 	bl	8000524 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d149      	bne.n	8000642 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80005ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80005b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005b6:	f023 0301 	bic.w	r3, r3, #1
 80005ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005be:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005c0:	6823      	ldr	r3, [r4, #0]
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d104      	bne.n	80005d0 <HAL_ADC_Start+0x3c>
 80005c6:	4923      	ldr	r1, [pc, #140]	; (8000654 <HAL_ADC_Start+0xc0>)
 80005c8:	684a      	ldr	r2, [r1, #4]
 80005ca:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80005ce:	d12e      	bne.n	800062e <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005d2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80005d6:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80005d8:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005da:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80005dc:	bf41      	itttt	mi
 80005de:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80005e0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80005e4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80005e8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80005f0:	bf1c      	itt	ne
 80005f2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80005f4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80005f8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000600:	f06f 0202 	mvn.w	r2, #2
 8000604:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000606:	689a      	ldr	r2, [r3, #8]
 8000608:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800060c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000610:	d113      	bne.n	800063a <HAL_ADC_Start+0xa6>
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <HAL_ADC_Start+0xbc>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d105      	bne.n	8000624 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000618:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800061c:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800061e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000622:	d10a      	bne.n	800063a <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800062e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000630:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000634:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000636:	684a      	ldr	r2, [r1, #4]
 8000638:	e7cf      	b.n	80005da <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800063a:	689a      	ldr	r2, [r3, #8]
 800063c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000640:	e7f3      	b.n	800062a <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8000642:	2300      	movs	r3, #0
 8000644:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000648:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800064a:	2002      	movs	r0, #2
}
 800064c:	bd10      	pop	{r4, pc}
 800064e:	bf00      	nop
 8000650:	40012800 	.word	0x40012800
 8000654:	40012400 	.word	0x40012400

08000658 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000658:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800065a:	6803      	ldr	r3, [r0, #0]
{
 800065c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800065e:	689a      	ldr	r2, [r3, #8]
 8000660:	07d2      	lsls	r2, r2, #31
 8000662:	d401      	bmi.n	8000668 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000664:	2000      	movs	r0, #0
 8000666:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000668:	689a      	ldr	r2, [r3, #8]
 800066a:	f022 0201 	bic.w	r2, r2, #1
 800066e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000670:	f7ff fe1a 	bl	80002a8 <HAL_GetTick>
 8000674:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	07db      	lsls	r3, r3, #31
 800067c:	d5f2      	bpl.n	8000664 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800067e:	f7ff fe13 	bl	80002a8 <HAL_GetTick>
 8000682:	1b40      	subs	r0, r0, r5
 8000684:	2802      	cmp	r0, #2
 8000686:	d9f6      	bls.n	8000676 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000688:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800068a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800068c:	f043 0310 	orr.w	r3, r3, #16
 8000690:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000692:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	62e3      	str	r3, [r4, #44]	; 0x2c
 800069a:	bd38      	pop	{r3, r4, r5, pc}

0800069c <HAL_ADC_Init>:
{
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 800069e:	4604      	mov	r4, r0
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d077      	beq.n	8000794 <HAL_ADC_Init+0xf8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80006a6:	b923      	cbnz	r3, 80006b2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80006a8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80006aa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80006ae:	f001 faad 	bl	8001c0c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006b2:	4620      	mov	r0, r4
 80006b4:	f7ff ffd0 	bl	8000658 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006ba:	f013 0310 	ands.w	r3, r3, #16
 80006be:	d16b      	bne.n	8000798 <HAL_ADC_Init+0xfc>
 80006c0:	2800      	cmp	r0, #0
 80006c2:	d169      	bne.n	8000798 <HAL_ADC_Init+0xfc>
    ADC_STATE_CLR_SET(hadc->State,
 80006c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006c6:	4937      	ldr	r1, [pc, #220]	; (80007a4 <HAL_ADC_Init+0x108>)
    ADC_STATE_CLR_SET(hadc->State,
 80006c8:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80006cc:	f022 0202 	bic.w	r2, r2, #2
 80006d0:	f042 0202 	orr.w	r2, r2, #2
 80006d4:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006d6:	e894 0024 	ldmia.w	r4, {r2, r5}
 80006da:	428a      	cmp	r2, r1
 80006dc:	69e1      	ldr	r1, [r4, #28]
 80006de:	d104      	bne.n	80006ea <HAL_ADC_Init+0x4e>
 80006e0:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 80006e4:	bf08      	it	eq
 80006e6:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80006ea:	68e6      	ldr	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006ec:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 80006f0:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006f2:	68a5      	ldr	r5, [r4, #8]
 80006f4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80006f8:	d035      	beq.n	8000766 <HAL_ADC_Init+0xca>
 80006fa:	2d01      	cmp	r5, #1
 80006fc:	bf08      	it	eq
 80006fe:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000702:	6967      	ldr	r7, [r4, #20]
 8000704:	2f01      	cmp	r7, #1
 8000706:	d106      	bne.n	8000716 <HAL_ADC_Init+0x7a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000708:	bb7e      	cbnz	r6, 800076a <HAL_ADC_Init+0xce>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800070a:	69a6      	ldr	r6, [r4, #24]
 800070c:	3e01      	subs	r6, #1
 800070e:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 8000712:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000716:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000718:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800071c:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8000720:	ea43 0306 	orr.w	r3, r3, r6
 8000724:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000726:	6896      	ldr	r6, [r2, #8]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <HAL_ADC_Init+0x10c>)
 800072a:	ea03 0306 	and.w	r3, r3, r6
 800072e:	ea43 0301 	orr.w	r3, r3, r1
 8000732:	6093      	str	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000734:	d001      	beq.n	800073a <HAL_ADC_Init+0x9e>
 8000736:	2d01      	cmp	r5, #1
 8000738:	d120      	bne.n	800077c <HAL_ADC_Init+0xe0>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800073a:	6923      	ldr	r3, [r4, #16]
 800073c:	3b01      	subs	r3, #1
 800073e:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000740:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8000742:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000746:	432b      	orrs	r3, r5
 8000748:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800074a:	6892      	ldr	r2, [r2, #8]
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <HAL_ADC_Init+0x110>)
 800074e:	4013      	ands	r3, r2
 8000750:	4299      	cmp	r1, r3
 8000752:	d115      	bne.n	8000780 <HAL_ADC_Init+0xe4>
      ADC_CLEAR_ERRORCODE(hadc);
 8000754:	2300      	movs	r3, #0
 8000756:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000758:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800075a:	f023 0303 	bic.w	r3, r3, #3
 800075e:	f043 0301 	orr.w	r3, r3, #1
 8000762:	62a3      	str	r3, [r4, #40]	; 0x28
 8000764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000766:	462b      	mov	r3, r5
 8000768:	e7cb      	b.n	8000702 <HAL_ADC_Init+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800076a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800076c:	f046 0620 	orr.w	r6, r6, #32
 8000770:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000774:	f046 0601 	orr.w	r6, r6, #1
 8000778:	62e6      	str	r6, [r4, #44]	; 0x2c
 800077a:	e7cc      	b.n	8000716 <HAL_ADC_Init+0x7a>
  uint32_t tmp_sqr1 = 0U;
 800077c:	2300      	movs	r3, #0
 800077e:	e7df      	b.n	8000740 <HAL_ADC_Init+0xa4>
      ADC_STATE_CLR_SET(hadc->State,
 8000780:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000782:	f023 0312 	bic.w	r3, r3, #18
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800078c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000794:	2001      	movs	r0, #1
}
 8000796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	62a3      	str	r3, [r4, #40]	; 0x28
 80007a0:	e7f8      	b.n	8000794 <HAL_ADC_Init+0xf8>
 80007a2:	bf00      	nop
 80007a4:	40013c00 	.word	0x40013c00
 80007a8:	ffe1f7fd 	.word	0xffe1f7fd
 80007ac:	ff1f0efe 	.word	0xff1f0efe

080007b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007b2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007be:	041b      	lsls	r3, r3, #16
 80007c0:	0c1b      	lsrs	r3, r3, #16
 80007c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80007cc:	60d3      	str	r3, [r2, #12]
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007d6:	b530      	push	{r4, r5, lr}
 80007d8:	68dc      	ldr	r4, [r3, #12]
 80007da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	bf28      	it	cs
 80007e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f0:	bf98      	it	ls
 80007f2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	fa05 f303 	lsl.w	r3, r5, r3
 80007f8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fc:	bf88      	it	hi
 80007fe:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	4019      	ands	r1, r3
 8000802:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000804:	fa05 f404 	lsl.w	r4, r5, r4
 8000808:	3c01      	subs	r4, #1
 800080a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800080c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080e:	ea42 0201 	orr.w	r2, r2, r1
 8000812:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000816:	bfaf      	iteee	ge
 8000818:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081c:	4b06      	ldrlt	r3, [pc, #24]	; (8000838 <HAL_NVIC_SetPriority+0x64>)
 800081e:	f000 000f 	andlt.w	r0, r0, #15
 8000822:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	bfa5      	ittet	ge
 8000826:	b2d2      	uxtbge	r2, r2
 8000828:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000832:	bd30      	pop	{r4, r5, pc}
 8000834:	e000ed00 	.word	0xe000ed00
 8000838:	e000ed14 	.word	0xe000ed14

0800083c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800083c:	2301      	movs	r3, #1
 800083e:	0942      	lsrs	r2, r0, #5
 8000840:	f000 001f 	and.w	r0, r0, #31
 8000844:	fa03 f000 	lsl.w	r0, r3, r0
 8000848:	4b01      	ldr	r3, [pc, #4]	; (8000850 <HAL_NVIC_EnableIRQ+0x14>)
 800084a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800084e:	4770      	bx	lr
 8000850:	e000e100 	.word	0xe000e100

08000854 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000854:	3801      	subs	r0, #1
 8000856:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800085a:	d20a      	bcs.n	8000872 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000862:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800086c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000872:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000e010 	.word	0xe000e010
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000882:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	bf0c      	ite	eq
 8000888:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800088c:	f022 0204 	bicne.w	r2, r2, #4
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	4770      	bx	lr
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000898:	4770      	bx	lr

0800089a <HAL_SYSTICK_IRQHandler>:
{
 800089a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800089c:	f7ff fffc 	bl	8000898 <HAL_SYSTICK_Callback>
 80008a0:	bd08      	pop	{r3, pc}
	...

080008a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80008a8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80008aa:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008ac:	4f6c      	ldr	r7, [pc, #432]	; (8000a60 <HAL_GPIO_Init+0x1bc>)
 80008ae:	4b6d      	ldr	r3, [pc, #436]	; (8000a64 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008b0:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000a6c <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 80008b4:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000a70 <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 80008b8:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008bc:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80008be:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008c2:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80008c6:	45a0      	cmp	r8, r4
 80008c8:	f040 8085 	bne.w	80009d6 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 80008cc:	684d      	ldr	r5, [r1, #4]
 80008ce:	2d12      	cmp	r5, #18
 80008d0:	f000 80b7 	beq.w	8000a42 <HAL_GPIO_Init+0x19e>
 80008d4:	f200 808d 	bhi.w	80009f2 <HAL_GPIO_Init+0x14e>
 80008d8:	2d02      	cmp	r5, #2
 80008da:	f000 80af 	beq.w	8000a3c <HAL_GPIO_Init+0x198>
 80008de:	f200 8081 	bhi.w	80009e4 <HAL_GPIO_Init+0x140>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 8091 	beq.w	8000a0a <HAL_GPIO_Init+0x166>
 80008e8:	2d01      	cmp	r5, #1
 80008ea:	f000 80a5 	beq.w	8000a38 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008ee:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008f2:	2cff      	cmp	r4, #255	; 0xff
 80008f4:	bf93      	iteet	ls
 80008f6:	4682      	movls	sl, r0
 80008f8:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80008fc:	3d08      	subhi	r5, #8
 80008fe:	f8d0 b000 	ldrls.w	fp, [r0]
 8000902:	bf92      	itee	ls
 8000904:	00b5      	lslls	r5, r6, #2
 8000906:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800090a:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800090c:	fa09 f805 	lsl.w	r8, r9, r5
 8000910:	ea2b 0808 	bic.w	r8, fp, r8
 8000914:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000918:	bf88      	it	hi
 800091a:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800091e:	ea48 0505 	orr.w	r5, r8, r5
 8000922:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000926:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800092a:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800092e:	d052      	beq.n	80009d6 <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000930:	69bd      	ldr	r5, [r7, #24]
 8000932:	f026 0803 	bic.w	r8, r6, #3
 8000936:	f045 0501 	orr.w	r5, r5, #1
 800093a:	61bd      	str	r5, [r7, #24]
 800093c:	69bd      	ldr	r5, [r7, #24]
 800093e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000942:	f005 0501 	and.w	r5, r5, #1
 8000946:	9501      	str	r5, [sp, #4]
 8000948:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800094c:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000950:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000952:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000956:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800095a:	fa09 f90b 	lsl.w	r9, r9, fp
 800095e:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000962:	4d41      	ldr	r5, [pc, #260]	; (8000a68 <HAL_GPIO_Init+0x1c4>)
 8000964:	42a8      	cmp	r0, r5
 8000966:	d071      	beq.n	8000a4c <HAL_GPIO_Init+0x1a8>
 8000968:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800096c:	42a8      	cmp	r0, r5
 800096e:	d06f      	beq.n	8000a50 <HAL_GPIO_Init+0x1ac>
 8000970:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000974:	42a8      	cmp	r0, r5
 8000976:	d06d      	beq.n	8000a54 <HAL_GPIO_Init+0x1b0>
 8000978:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800097c:	42a8      	cmp	r0, r5
 800097e:	d06b      	beq.n	8000a58 <HAL_GPIO_Init+0x1b4>
 8000980:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000984:	42a8      	cmp	r0, r5
 8000986:	d069      	beq.n	8000a5c <HAL_GPIO_Init+0x1b8>
 8000988:	4570      	cmp	r0, lr
 800098a:	bf0c      	ite	eq
 800098c:	2505      	moveq	r5, #5
 800098e:	2506      	movne	r5, #6
 8000990:	fa05 f50b 	lsl.w	r5, r5, fp
 8000994:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000998:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800099c:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800099e:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80009a2:	bf14      	ite	ne
 80009a4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009a6:	43a5      	biceq	r5, r4
 80009a8:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009aa:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ac:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80009b0:	bf14      	ite	ne
 80009b2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009b4:	43a5      	biceq	r5, r4
 80009b6:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009b8:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ba:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80009be:	bf14      	ite	ne
 80009c0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009c2:	43a5      	biceq	r5, r4
 80009c4:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009c6:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c8:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80009cc:	bf14      	ite	ne
 80009ce:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009d0:	ea25 0404 	biceq.w	r4, r5, r4
 80009d4:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80009d6:	3601      	adds	r6, #1
 80009d8:	2e10      	cmp	r6, #16
 80009da:	f47f af6d 	bne.w	80008b8 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 80009de:	b003      	add	sp, #12
 80009e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80009e4:	2d03      	cmp	r5, #3
 80009e6:	d025      	beq.n	8000a34 <HAL_GPIO_Init+0x190>
 80009e8:	2d11      	cmp	r5, #17
 80009ea:	d180      	bne.n	80008ee <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009ec:	68ca      	ldr	r2, [r1, #12]
 80009ee:	3204      	adds	r2, #4
          break;
 80009f0:	e77d      	b.n	80008ee <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80009f2:	4565      	cmp	r5, ip
 80009f4:	d009      	beq.n	8000a0a <HAL_GPIO_Init+0x166>
 80009f6:	d812      	bhi.n	8000a1e <HAL_GPIO_Init+0x17a>
 80009f8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000a74 <HAL_GPIO_Init+0x1d0>
 80009fc:	454d      	cmp	r5, r9
 80009fe:	d004      	beq.n	8000a0a <HAL_GPIO_Init+0x166>
 8000a00:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000a04:	454d      	cmp	r5, r9
 8000a06:	f47f af72 	bne.w	80008ee <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a0a:	688a      	ldr	r2, [r1, #8]
 8000a0c:	b1e2      	cbz	r2, 8000a48 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a0e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000a10:	bf0c      	ite	eq
 8000a12:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000a16:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	e767      	b.n	80008ee <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000a1e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000a78 <HAL_GPIO_Init+0x1d4>
 8000a22:	454d      	cmp	r5, r9
 8000a24:	d0f1      	beq.n	8000a0a <HAL_GPIO_Init+0x166>
 8000a26:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000a2a:	454d      	cmp	r5, r9
 8000a2c:	d0ed      	beq.n	8000a0a <HAL_GPIO_Init+0x166>
 8000a2e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000a32:	e7e7      	b.n	8000a04 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a34:	2200      	movs	r2, #0
 8000a36:	e75a      	b.n	80008ee <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a38:	68ca      	ldr	r2, [r1, #12]
          break;
 8000a3a:	e758      	b.n	80008ee <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a3c:	68ca      	ldr	r2, [r1, #12]
 8000a3e:	3208      	adds	r2, #8
          break;
 8000a40:	e755      	b.n	80008ee <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a42:	68ca      	ldr	r2, [r1, #12]
 8000a44:	320c      	adds	r2, #12
          break;
 8000a46:	e752      	b.n	80008ee <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a48:	2204      	movs	r2, #4
 8000a4a:	e750      	b.n	80008ee <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a4c:	2500      	movs	r5, #0
 8000a4e:	e79f      	b.n	8000990 <HAL_GPIO_Init+0xec>
 8000a50:	2501      	movs	r5, #1
 8000a52:	e79d      	b.n	8000990 <HAL_GPIO_Init+0xec>
 8000a54:	2502      	movs	r5, #2
 8000a56:	e79b      	b.n	8000990 <HAL_GPIO_Init+0xec>
 8000a58:	2503      	movs	r5, #3
 8000a5a:	e799      	b.n	8000990 <HAL_GPIO_Init+0xec>
 8000a5c:	2504      	movs	r5, #4
 8000a5e:	e797      	b.n	8000990 <HAL_GPIO_Init+0xec>
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010400 	.word	0x40010400
 8000a68:	40010800 	.word	0x40010800
 8000a6c:	40011c00 	.word	0x40011c00
 8000a70:	10210000 	.word	0x10210000
 8000a74:	10110000 	.word	0x10110000
 8000a78:	10310000 	.word	0x10310000

08000a7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a7c:	b10a      	cbz	r2, 8000a82 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a7e:	6101      	str	r1, [r0, #16]
 8000a80:	4770      	bx	lr
 8000a82:	0409      	lsls	r1, r1, #16
 8000a84:	e7fb      	b.n	8000a7e <HAL_GPIO_WritePin+0x2>
	...

08000a88 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a88:	6803      	ldr	r3, [r0, #0]
{
 8000a8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a8e:	07db      	lsls	r3, r3, #31
{
 8000a90:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a92:	d410      	bmi.n	8000ab6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	079f      	lsls	r7, r3, #30
 8000a98:	d45e      	bmi.n	8000b58 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a9a:	682b      	ldr	r3, [r5, #0]
 8000a9c:	0719      	lsls	r1, r3, #28
 8000a9e:	f100 8095 	bmi.w	8000bcc <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aa2:	682b      	ldr	r3, [r5, #0]
 8000aa4:	075a      	lsls	r2, r3, #29
 8000aa6:	f100 80bf 	bmi.w	8000c28 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aaa:	69ea      	ldr	r2, [r5, #28]
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	f040 812d 	bne.w	8000d0c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	e014      	b.n	8000ae0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ab6:	4c90      	ldr	r4, [pc, #576]	; (8000cf8 <HAL_RCC_OscConfig+0x270>)
 8000ab8:	6863      	ldr	r3, [r4, #4]
 8000aba:	f003 030c 	and.w	r3, r3, #12
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d007      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ac2:	6863      	ldr	r3, [r4, #4]
 8000ac4:	f003 030c 	and.w	r3, r3, #12
 8000ac8:	2b08      	cmp	r3, #8
 8000aca:	d10c      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x5e>
 8000acc:	6863      	ldr	r3, [r4, #4]
 8000ace:	03de      	lsls	r6, r3, #15
 8000ad0:	d509      	bpl.n	8000ae6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	039c      	lsls	r4, r3, #14
 8000ad6:	d5dd      	bpl.n	8000a94 <HAL_RCC_OscConfig+0xc>
 8000ad8:	686b      	ldr	r3, [r5, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1da      	bne.n	8000a94 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000ade:	2001      	movs	r0, #1
}
 8000ae0:	b002      	add	sp, #8
 8000ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae6:	686b      	ldr	r3, [r5, #4]
 8000ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aec:	d110      	bne.n	8000b10 <HAL_RCC_OscConfig+0x88>
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000af6:	f7ff fbd7 	bl	80002a8 <HAL_GetTick>
 8000afa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000afc:	6823      	ldr	r3, [r4, #0]
 8000afe:	0398      	lsls	r0, r3, #14
 8000b00:	d4c8      	bmi.n	8000a94 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b02:	f7ff fbd1 	bl	80002a8 <HAL_GetTick>
 8000b06:	1b80      	subs	r0, r0, r6
 8000b08:	2864      	cmp	r0, #100	; 0x64
 8000b0a:	d9f7      	bls.n	8000afc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	e7e7      	b.n	8000ae0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b10:	b99b      	cbnz	r3, 8000b3a <HAL_RCC_OscConfig+0xb2>
 8000b12:	6823      	ldr	r3, [r4, #0]
 8000b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b18:	6023      	str	r3, [r4, #0]
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b22:	f7ff fbc1 	bl	80002a8 <HAL_GetTick>
 8000b26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	0399      	lsls	r1, r3, #14
 8000b2c:	d5b2      	bpl.n	8000a94 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fbbb 	bl	80002a8 <HAL_GetTick>
 8000b32:	1b80      	subs	r0, r0, r6
 8000b34:	2864      	cmp	r0, #100	; 0x64
 8000b36:	d9f7      	bls.n	8000b28 <HAL_RCC_OscConfig+0xa0>
 8000b38:	e7e8      	b.n	8000b0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b3e:	6823      	ldr	r3, [r4, #0]
 8000b40:	d103      	bne.n	8000b4a <HAL_RCC_OscConfig+0xc2>
 8000b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b46:	6023      	str	r3, [r4, #0]
 8000b48:	e7d1      	b.n	8000aee <HAL_RCC_OscConfig+0x66>
 8000b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b4e:	6023      	str	r3, [r4, #0]
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b56:	e7cd      	b.n	8000af4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b58:	4c67      	ldr	r4, [pc, #412]	; (8000cf8 <HAL_RCC_OscConfig+0x270>)
 8000b5a:	6863      	ldr	r3, [r4, #4]
 8000b5c:	f013 0f0c 	tst.w	r3, #12
 8000b60:	d007      	beq.n	8000b72 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b62:	6863      	ldr	r3, [r4, #4]
 8000b64:	f003 030c 	and.w	r3, r3, #12
 8000b68:	2b08      	cmp	r3, #8
 8000b6a:	d110      	bne.n	8000b8e <HAL_RCC_OscConfig+0x106>
 8000b6c:	6863      	ldr	r3, [r4, #4]
 8000b6e:	03da      	lsls	r2, r3, #15
 8000b70:	d40d      	bmi.n	8000b8e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	079b      	lsls	r3, r3, #30
 8000b76:	d502      	bpl.n	8000b7e <HAL_RCC_OscConfig+0xf6>
 8000b78:	692b      	ldr	r3, [r5, #16]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d1af      	bne.n	8000ade <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	696a      	ldr	r2, [r5, #20]
 8000b82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b8a:	6023      	str	r3, [r4, #0]
 8000b8c:	e785      	b.n	8000a9a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b8e:	692a      	ldr	r2, [r5, #16]
 8000b90:	4b5a      	ldr	r3, [pc, #360]	; (8000cfc <HAL_RCC_OscConfig+0x274>)
 8000b92:	b16a      	cbz	r2, 8000bb0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000b94:	2201      	movs	r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b98:	f7ff fb86 	bl	80002a8 <HAL_GetTick>
 8000b9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b9e:	6823      	ldr	r3, [r4, #0]
 8000ba0:	079f      	lsls	r7, r3, #30
 8000ba2:	d4ec      	bmi.n	8000b7e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ba4:	f7ff fb80 	bl	80002a8 <HAL_GetTick>
 8000ba8:	1b80      	subs	r0, r0, r6
 8000baa:	2802      	cmp	r0, #2
 8000bac:	d9f7      	bls.n	8000b9e <HAL_RCC_OscConfig+0x116>
 8000bae:	e7ad      	b.n	8000b0c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000bb0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bb2:	f7ff fb79 	bl	80002a8 <HAL_GetTick>
 8000bb6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bb8:	6823      	ldr	r3, [r4, #0]
 8000bba:	0798      	lsls	r0, r3, #30
 8000bbc:	f57f af6d 	bpl.w	8000a9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bc0:	f7ff fb72 	bl	80002a8 <HAL_GetTick>
 8000bc4:	1b80      	subs	r0, r0, r6
 8000bc6:	2802      	cmp	r0, #2
 8000bc8:	d9f6      	bls.n	8000bb8 <HAL_RCC_OscConfig+0x130>
 8000bca:	e79f      	b.n	8000b0c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bcc:	69aa      	ldr	r2, [r5, #24]
 8000bce:	4c4a      	ldr	r4, [pc, #296]	; (8000cf8 <HAL_RCC_OscConfig+0x270>)
 8000bd0:	4b4b      	ldr	r3, [pc, #300]	; (8000d00 <HAL_RCC_OscConfig+0x278>)
 8000bd2:	b1da      	cbz	r2, 8000c0c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bd8:	f7ff fb66 	bl	80002a8 <HAL_GetTick>
 8000bdc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000be0:	079b      	lsls	r3, r3, #30
 8000be2:	d50d      	bpl.n	8000c00 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000be4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000be8:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <HAL_RCC_OscConfig+0x27c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bf0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000bf2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000bf4:	9b01      	ldr	r3, [sp, #4]
 8000bf6:	1e5a      	subs	r2, r3, #1
 8000bf8:	9201      	str	r2, [sp, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f9      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x16a>
 8000bfe:	e750      	b.n	8000aa2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c00:	f7ff fb52 	bl	80002a8 <HAL_GetTick>
 8000c04:	1b80      	subs	r0, r0, r6
 8000c06:	2802      	cmp	r0, #2
 8000c08:	d9e9      	bls.n	8000bde <HAL_RCC_OscConfig+0x156>
 8000c0a:	e77f      	b.n	8000b0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000c0c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c0e:	f7ff fb4b 	bl	80002a8 <HAL_GetTick>
 8000c12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c16:	079f      	lsls	r7, r3, #30
 8000c18:	f57f af43 	bpl.w	8000aa2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fb44 	bl	80002a8 <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9f6      	bls.n	8000c14 <HAL_RCC_OscConfig+0x18c>
 8000c26:	e771      	b.n	8000b0c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c28:	4c33      	ldr	r4, [pc, #204]	; (8000cf8 <HAL_RCC_OscConfig+0x270>)
 8000c2a:	69e3      	ldr	r3, [r4, #28]
 8000c2c:	00d8      	lsls	r0, r3, #3
 8000c2e:	d424      	bmi.n	8000c7a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000c30:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	69e3      	ldr	r3, [r4, #28]
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	61e3      	str	r3, [r4, #28]
 8000c3a:	69e3      	ldr	r3, [r4, #28]
 8000c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c44:	4e30      	ldr	r6, [pc, #192]	; (8000d08 <HAL_RCC_OscConfig+0x280>)
 8000c46:	6833      	ldr	r3, [r6, #0]
 8000c48:	05d9      	lsls	r1, r3, #23
 8000c4a:	d518      	bpl.n	8000c7e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c4c:	68eb      	ldr	r3, [r5, #12]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d126      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x218>
 8000c52:	6a23      	ldr	r3, [r4, #32]
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c5a:	f7ff fb25 	bl	80002a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c5e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c62:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c64:	6a23      	ldr	r3, [r4, #32]
 8000c66:	079b      	lsls	r3, r3, #30
 8000c68:	d53f      	bpl.n	8000cea <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000c6a:	2f00      	cmp	r7, #0
 8000c6c:	f43f af1d 	beq.w	8000aaa <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c70:	69e3      	ldr	r3, [r4, #28]
 8000c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c76:	61e3      	str	r3, [r4, #28]
 8000c78:	e717      	b.n	8000aaa <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000c7a:	2700      	movs	r7, #0
 8000c7c:	e7e2      	b.n	8000c44 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c7e:	6833      	ldr	r3, [r6, #0]
 8000c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c84:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c86:	f7ff fb0f 	bl	80002a8 <HAL_GetTick>
 8000c8a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c8c:	6833      	ldr	r3, [r6, #0]
 8000c8e:	05da      	lsls	r2, r3, #23
 8000c90:	d4dc      	bmi.n	8000c4c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c92:	f7ff fb09 	bl	80002a8 <HAL_GetTick>
 8000c96:	eba0 0008 	sub.w	r0, r0, r8
 8000c9a:	2864      	cmp	r0, #100	; 0x64
 8000c9c:	d9f6      	bls.n	8000c8c <HAL_RCC_OscConfig+0x204>
 8000c9e:	e735      	b.n	8000b0c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca0:	b9ab      	cbnz	r3, 8000cce <HAL_RCC_OscConfig+0x246>
 8000ca2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ca4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca8:	f023 0301 	bic.w	r3, r3, #1
 8000cac:	6223      	str	r3, [r4, #32]
 8000cae:	6a23      	ldr	r3, [r4, #32]
 8000cb0:	f023 0304 	bic.w	r3, r3, #4
 8000cb4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000cb6:	f7ff faf7 	bl	80002a8 <HAL_GetTick>
 8000cba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cbc:	6a23      	ldr	r3, [r4, #32]
 8000cbe:	0798      	lsls	r0, r3, #30
 8000cc0:	d5d3      	bpl.n	8000c6a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cc2:	f7ff faf1 	bl	80002a8 <HAL_GetTick>
 8000cc6:	1b80      	subs	r0, r0, r6
 8000cc8:	4540      	cmp	r0, r8
 8000cca:	d9f7      	bls.n	8000cbc <HAL_RCC_OscConfig+0x234>
 8000ccc:	e71e      	b.n	8000b0c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	6a23      	ldr	r3, [r4, #32]
 8000cd2:	d103      	bne.n	8000cdc <HAL_RCC_OscConfig+0x254>
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6223      	str	r3, [r4, #32]
 8000cda:	e7ba      	b.n	8000c52 <HAL_RCC_OscConfig+0x1ca>
 8000cdc:	f023 0301 	bic.w	r3, r3, #1
 8000ce0:	6223      	str	r3, [r4, #32]
 8000ce2:	6a23      	ldr	r3, [r4, #32]
 8000ce4:	f023 0304 	bic.w	r3, r3, #4
 8000ce8:	e7b6      	b.n	8000c58 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cea:	f7ff fadd 	bl	80002a8 <HAL_GetTick>
 8000cee:	eba0 0008 	sub.w	r0, r0, r8
 8000cf2:	42b0      	cmp	r0, r6
 8000cf4:	d9b6      	bls.n	8000c64 <HAL_RCC_OscConfig+0x1dc>
 8000cf6:	e709      	b.n	8000b0c <HAL_RCC_OscConfig+0x84>
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	42420000 	.word	0x42420000
 8000d00:	42420480 	.word	0x42420480
 8000d04:	20000010 	.word	0x20000010
 8000d08:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d0c:	4c22      	ldr	r4, [pc, #136]	; (8000d98 <HAL_RCC_OscConfig+0x310>)
 8000d0e:	6863      	ldr	r3, [r4, #4]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	f43f aee2 	beq.w	8000ade <HAL_RCC_OscConfig+0x56>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	4e1f      	ldr	r6, [pc, #124]	; (8000d9c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d1e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000d20:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d22:	d12b      	bne.n	8000d7c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000d24:	f7ff fac0 	bl	80002a8 <HAL_GetTick>
 8000d28:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	0199      	lsls	r1, r3, #6
 8000d2e:	d41f      	bmi.n	8000d70 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d30:	6a2b      	ldr	r3, [r5, #32]
 8000d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d36:	d105      	bne.n	8000d44 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d38:	6862      	ldr	r2, [r4, #4]
 8000d3a:	68a9      	ldr	r1, [r5, #8]
 8000d3c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000d40:	430a      	orrs	r2, r1
 8000d42:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d44:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d46:	6862      	ldr	r2, [r4, #4]
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d52:	2301      	movs	r3, #1
 8000d54:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d56:	f7ff faa7 	bl	80002a8 <HAL_GetTick>
 8000d5a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	019a      	lsls	r2, r3, #6
 8000d60:	f53f aea7 	bmi.w	8000ab2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d64:	f7ff faa0 	bl	80002a8 <HAL_GetTick>
 8000d68:	1b40      	subs	r0, r0, r5
 8000d6a:	2802      	cmp	r0, #2
 8000d6c:	d9f6      	bls.n	8000d5c <HAL_RCC_OscConfig+0x2d4>
 8000d6e:	e6cd      	b.n	8000b0c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d70:	f7ff fa9a 	bl	80002a8 <HAL_GetTick>
 8000d74:	1bc0      	subs	r0, r0, r7
 8000d76:	2802      	cmp	r0, #2
 8000d78:	d9d7      	bls.n	8000d2a <HAL_RCC_OscConfig+0x2a2>
 8000d7a:	e6c7      	b.n	8000b0c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fa94 	bl	80002a8 <HAL_GetTick>
 8000d80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	019b      	lsls	r3, r3, #6
 8000d86:	f57f ae94 	bpl.w	8000ab2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d8a:	f7ff fa8d 	bl	80002a8 <HAL_GetTick>
 8000d8e:	1b40      	subs	r0, r0, r5
 8000d90:	2802      	cmp	r0, #2
 8000d92:	d9f6      	bls.n	8000d82 <HAL_RCC_OscConfig+0x2fa>
 8000d94:	e6ba      	b.n	8000b0c <HAL_RCC_OscConfig+0x84>
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	42420060 	.word	0x42420060

08000da0 <HAL_RCC_GetSysClockFreq>:
{
 8000da0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000da4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000da6:	ac02      	add	r4, sp, #8
 8000da8:	f103 0510 	add.w	r5, r3, #16
 8000dac:	4622      	mov	r2, r4
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	6859      	ldr	r1, [r3, #4]
 8000db2:	3308      	adds	r3, #8
 8000db4:	c203      	stmia	r2!, {r0, r1}
 8000db6:	42ab      	cmp	r3, r5
 8000db8:	4614      	mov	r4, r2
 8000dba:	d1f7      	bne.n	8000dac <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f88d 3004 	strb.w	r3, [sp, #4]
 8000dc2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000dc4:	4911      	ldr	r1, [pc, #68]	; (8000e0c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000dc6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000dca:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000dcc:	f003 020c 	and.w	r2, r3, #12
 8000dd0:	2a08      	cmp	r2, #8
 8000dd2:	d117      	bne.n	8000e04 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000dd4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000dd8:	a806      	add	r0, sp, #24
 8000dda:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ddc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000dde:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000de2:	d50c      	bpl.n	8000dfe <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000de4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000de6:	480a      	ldr	r0, [pc, #40]	; (8000e10 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000de8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000dec:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dee:	aa06      	add	r2, sp, #24
 8000df0:	4413      	add	r3, r2
 8000df2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000df6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000dfa:	b007      	add	sp, #28
 8000dfc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <HAL_RCC_GetSysClockFreq+0x74>)
 8000e00:	4350      	muls	r0, r2
 8000e02:	e7fa      	b.n	8000dfa <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000e06:	e7f8      	b.n	8000dfa <HAL_RCC_GetSysClockFreq+0x5a>
 8000e08:	08002e68 	.word	0x08002e68
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	007a1200 	.word	0x007a1200
 8000e14:	003d0900 	.word	0x003d0900

08000e18 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e18:	4a4d      	ldr	r2, [pc, #308]	; (8000f50 <HAL_RCC_ClockConfig+0x138>)
{
 8000e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e1e:	6813      	ldr	r3, [r2, #0]
{
 8000e20:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	428b      	cmp	r3, r1
{
 8000e28:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e2a:	d328      	bcc.n	8000e7e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e2c:	682a      	ldr	r2, [r5, #0]
 8000e2e:	0791      	lsls	r1, r2, #30
 8000e30:	d432      	bmi.n	8000e98 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e32:	07d2      	lsls	r2, r2, #31
 8000e34:	d438      	bmi.n	8000ea8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e36:	4a46      	ldr	r2, [pc, #280]	; (8000f50 <HAL_RCC_ClockConfig+0x138>)
 8000e38:	6813      	ldr	r3, [r2, #0]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	d373      	bcc.n	8000f2a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e42:	682a      	ldr	r2, [r5, #0]
 8000e44:	4c43      	ldr	r4, [pc, #268]	; (8000f54 <HAL_RCC_ClockConfig+0x13c>)
 8000e46:	f012 0f04 	tst.w	r2, #4
 8000e4a:	d179      	bne.n	8000f40 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e4c:	0713      	lsls	r3, r2, #28
 8000e4e:	d506      	bpl.n	8000e5e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e50:	6863      	ldr	r3, [r4, #4]
 8000e52:	692a      	ldr	r2, [r5, #16]
 8000e54:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e5c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e5e:	f7ff ff9f 	bl	8000da0 <HAL_RCC_GetSysClockFreq>
 8000e62:	6863      	ldr	r3, [r4, #4]
 8000e64:	4a3c      	ldr	r2, [pc, #240]	; (8000f58 <HAL_RCC_ClockConfig+0x140>)
 8000e66:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e6a:	5cd3      	ldrb	r3, [r2, r3]
 8000e6c:	40d8      	lsrs	r0, r3
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <HAL_RCC_ClockConfig+0x144>)
 8000e70:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f7ff f9d6 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 8000e78:	2000      	movs	r0, #0
}
 8000e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e7e:	6813      	ldr	r3, [r2, #0]
 8000e80:	f023 0307 	bic.w	r3, r3, #7
 8000e84:	430b      	orrs	r3, r1
 8000e86:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e88:	6813      	ldr	r3, [r2, #0]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d0cc      	beq.n	8000e2c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000e92:	2001      	movs	r0, #1
 8000e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e98:	492e      	ldr	r1, [pc, #184]	; (8000f54 <HAL_RCC_ClockConfig+0x13c>)
 8000e9a:	68a8      	ldr	r0, [r5, #8]
 8000e9c:	684b      	ldr	r3, [r1, #4]
 8000e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	604b      	str	r3, [r1, #4]
 8000ea6:	e7c4      	b.n	8000e32 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ea8:	686a      	ldr	r2, [r5, #4]
 8000eaa:	4c2a      	ldr	r4, [pc, #168]	; (8000f54 <HAL_RCC_ClockConfig+0x13c>)
 8000eac:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eae:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eb0:	d11c      	bne.n	8000eec <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb6:	d0ec      	beq.n	8000e92 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eb8:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eba:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ebe:	f023 0303 	bic.w	r3, r3, #3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000ec6:	f7ff f9ef 	bl	80002a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eca:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000ecc:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d114      	bne.n	8000efc <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ed2:	6863      	ldr	r3, [r4, #4]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d0ac      	beq.n	8000e36 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000edc:	f7ff f9e4 	bl	80002a8 <HAL_GetTick>
 8000ee0:	1bc0      	subs	r0, r0, r7
 8000ee2:	4540      	cmp	r0, r8
 8000ee4:	d9f5      	bls.n	8000ed2 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eec:	2a02      	cmp	r2, #2
 8000eee:	d102      	bne.n	8000ef6 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ef0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ef4:	e7df      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef6:	f013 0f02 	tst.w	r3, #2
 8000efa:	e7dc      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d10f      	bne.n	8000f20 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f00:	6863      	ldr	r3, [r4, #4]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d095      	beq.n	8000e36 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f0a:	f7ff f9cd 	bl	80002a8 <HAL_GetTick>
 8000f0e:	1bc0      	subs	r0, r0, r7
 8000f10:	4540      	cmp	r0, r8
 8000f12:	d9f5      	bls.n	8000f00 <HAL_RCC_ClockConfig+0xe8>
 8000f14:	e7e7      	b.n	8000ee6 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f16:	f7ff f9c7 	bl	80002a8 <HAL_GetTick>
 8000f1a:	1bc0      	subs	r0, r0, r7
 8000f1c:	4540      	cmp	r0, r8
 8000f1e:	d8e2      	bhi.n	8000ee6 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f20:	6863      	ldr	r3, [r4, #4]
 8000f22:	f013 0f0c 	tst.w	r3, #12
 8000f26:	d1f6      	bne.n	8000f16 <HAL_RCC_ClockConfig+0xfe>
 8000f28:	e785      	b.n	8000e36 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f2a:	6813      	ldr	r3, [r2, #0]
 8000f2c:	f023 0307 	bic.w	r3, r3, #7
 8000f30:	4333      	orrs	r3, r6
 8000f32:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f34:	6813      	ldr	r3, [r2, #0]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	429e      	cmp	r6, r3
 8000f3c:	d1a9      	bne.n	8000e92 <HAL_RCC_ClockConfig+0x7a>
 8000f3e:	e780      	b.n	8000e42 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f40:	6863      	ldr	r3, [r4, #4]
 8000f42:	68e9      	ldr	r1, [r5, #12]
 8000f44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	6063      	str	r3, [r4, #4]
 8000f4c:	e77e      	b.n	8000e4c <HAL_RCC_ClockConfig+0x34>
 8000f4e:	bf00      	nop
 8000f50:	40022000 	.word	0x40022000
 8000f54:	40021000 	.word	0x40021000
 8000f58:	08002e95 	.word	0x08002e95
 8000f5c:	20000010 	.word	0x20000010

08000f60 <HAL_RCC_GetHCLKFreq>:
}
 8000f60:	4b01      	ldr	r3, [pc, #4]	; (8000f68 <HAL_RCC_GetHCLKFreq+0x8>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000010 	.word	0x20000010

08000f6c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000f76:	5cd3      	ldrb	r3, [r2, r3]
 8000f78:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f7a:	6810      	ldr	r0, [r2, #0]
}    
 8000f7c:	40d8      	lsrs	r0, r3
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000
 8000f84:	08002ea5 	.word	0x08002ea5
 8000f88:	20000010 	.word	0x20000010

08000f8c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000f96:	5cd3      	ldrb	r3, [r2, r3]
 8000f98:	4a03      	ldr	r2, [pc, #12]	; (8000fa8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f9a:	6810      	ldr	r0, [r2, #0]
} 
 8000f9c:	40d8      	lsrs	r0, r3
 8000f9e:	4770      	bx	lr
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	08002ea5 	.word	0x08002ea5
 8000fa8:	20000010 	.word	0x20000010

08000fac <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000fac:	6803      	ldr	r3, [r0, #0]
{
 8000fae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000fb2:	07d9      	lsls	r1, r3, #31
{
 8000fb4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000fb6:	d520      	bpl.n	8000ffa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fb8:	4c35      	ldr	r4, [pc, #212]	; (8001090 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000fba:	69e3      	ldr	r3, [r4, #28]
 8000fbc:	00da      	lsls	r2, r3, #3
 8000fbe:	d432      	bmi.n	8001026 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000fc0:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	69e3      	ldr	r3, [r4, #28]
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	61e3      	str	r3, [r4, #28]
 8000fca:	69e3      	ldr	r3, [r4, #28]
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd4:	4e2f      	ldr	r6, [pc, #188]	; (8001094 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000fd6:	6833      	ldr	r3, [r6, #0]
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	d526      	bpl.n	800102a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000fdc:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000fde:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000fe2:	d136      	bne.n	8001052 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000fe4:	6a23      	ldr	r3, [r4, #32]
 8000fe6:	686a      	ldr	r2, [r5, #4]
 8000fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fec:	4313      	orrs	r3, r2
 8000fee:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ff0:	b11f      	cbz	r7, 8000ffa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ff2:	69e3      	ldr	r3, [r4, #28]
 8000ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000ffa:	6828      	ldr	r0, [r5, #0]
 8000ffc:	0783      	lsls	r3, r0, #30
 8000ffe:	d506      	bpl.n	800100e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001000:	4a23      	ldr	r2, [pc, #140]	; (8001090 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001002:	68a9      	ldr	r1, [r5, #8]
 8001004:	6853      	ldr	r3, [r2, #4]
 8001006:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800100a:	430b      	orrs	r3, r1
 800100c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800100e:	f010 0010 	ands.w	r0, r0, #16
 8001012:	d01b      	beq.n	800104c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001014:	4a1e      	ldr	r2, [pc, #120]	; (8001090 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001016:	6969      	ldr	r1, [r5, #20]
 8001018:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800101a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800101c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001020:	430b      	orrs	r3, r1
 8001022:	6053      	str	r3, [r2, #4]
 8001024:	e012      	b.n	800104c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001026:	2700      	movs	r7, #0
 8001028:	e7d4      	b.n	8000fd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800102a:	6833      	ldr	r3, [r6, #0]
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001032:	f7ff f939 	bl	80002a8 <HAL_GetTick>
 8001036:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	6833      	ldr	r3, [r6, #0]
 800103a:	05d8      	lsls	r0, r3, #23
 800103c:	d4ce      	bmi.n	8000fdc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800103e:	f7ff f933 	bl	80002a8 <HAL_GetTick>
 8001042:	eba0 0008 	sub.w	r0, r0, r8
 8001046:	2864      	cmp	r0, #100	; 0x64
 8001048:	d9f6      	bls.n	8001038 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800104a:	2003      	movs	r0, #3
}
 800104c:	b002      	add	sp, #8
 800104e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001052:	686a      	ldr	r2, [r5, #4]
 8001054:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001058:	4293      	cmp	r3, r2
 800105a:	d0c3      	beq.n	8000fe4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800105c:	2001      	movs	r0, #1
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001060:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001062:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001064:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001066:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800106a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800106c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800106e:	07d9      	lsls	r1, r3, #31
 8001070:	d5b8      	bpl.n	8000fe4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001072:	f7ff f919 	bl	80002a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001076:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800107a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107c:	6a23      	ldr	r3, [r4, #32]
 800107e:	079a      	lsls	r2, r3, #30
 8001080:	d4b0      	bmi.n	8000fe4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001082:	f7ff f911 	bl	80002a8 <HAL_GetTick>
 8001086:	1b80      	subs	r0, r0, r6
 8001088:	4540      	cmp	r0, r8
 800108a:	d9f7      	bls.n	800107c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800108c:	e7dd      	b.n	800104a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000
 8001094:	40007000 	.word	0x40007000
 8001098:	42420440 	.word	0x42420440

0800109c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800109c:	4602      	mov	r2, r0
 800109e:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010a0:	4b3b      	ldr	r3, [pc, #236]	; (8001190 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
{
 80010a2:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010a4:	ad02      	add	r5, sp, #8
 80010a6:	f103 0610 	add.w	r6, r3, #16
 80010aa:	462c      	mov	r4, r5
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	6859      	ldr	r1, [r3, #4]
 80010b0:	3308      	adds	r3, #8
 80010b2:	c403      	stmia	r4!, {r0, r1}
 80010b4:	42b3      	cmp	r3, r6
 80010b6:	4625      	mov	r5, r4
 80010b8:	d1f7      	bne.n	80010aa <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010ba:	2301      	movs	r3, #1
 80010bc:	f88d 3004 	strb.w	r3, [sp, #4]
 80010c0:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80010c2:	1e50      	subs	r0, r2, #1
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010c4:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 80010c8:	280f      	cmp	r0, #15
 80010ca:	d85e      	bhi.n	800118a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80010cc:	e8df f000 	tbb	[pc, r0]
 80010d0:	2d5d5132 	.word	0x2d5d5132
 80010d4:	2d5d5d5d 	.word	0x2d5d5d5d
 80010d8:	5d5d5d5d 	.word	0x5d5d5d5d
 80010dc:	085d5d5d 	.word	0x085d5d5d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80010e2:	6859      	ldr	r1, [r3, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80010ea:	d037      	beq.n	800115c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010ec:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80010f0:	a806      	add	r0, sp, #24
 80010f2:	4402      	add	r2, r0
 80010f4:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010f8:	03ca      	lsls	r2, r1, #15
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010fa:	bf41      	itttt	mi
 80010fc:	685a      	ldrmi	r2, [r3, #4]
 80010fe:	a906      	addmi	r1, sp, #24
 8001100:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001104:	1852      	addmi	r2, r2, r1
 8001106:	bf44      	itt	mi
 8001108:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800110c:	4a22      	ldrmi	r2, [pc, #136]	; (8001198 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800110e:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001110:	bf4c      	ite	mi
 8001112:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001116:	4a21      	ldrpl	r2, [pc, #132]	; (800119c <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001118:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800111a:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800111e:	d41d      	bmi.n	800115c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 8001120:	2303      	movs	r3, #3
 8001122:	0040      	lsls	r0, r0, #1
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001124:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001128:	e018      	b.n	800115c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
    {
      break;
    }
  }
  return(frequency);
}
 800112a:	b006      	add	sp, #24
 800112c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      frequency = HAL_RCC_GetSysClockFreq();
 8001130:	f7ff be36 	b.w	8000da0 <HAL_RCC_GetSysClockFreq>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001134:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001138:	4a16      	ldr	r2, [pc, #88]	; (8001194 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 800113a:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800113c:	4019      	ands	r1, r3
 800113e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8001142:	d01f      	beq.n	8001184 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800114c:	d108      	bne.n	8001160 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        frequency = LSI_VALUE;
 800114e:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001152:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8001154:	f013 0f02 	tst.w	r3, #2
        frequency = HSE_VALUE / 128U;
 8001158:	bf08      	it	eq
 800115a:	2000      	moveq	r0, #0
}
 800115c:	b006      	add	sp, #24
 800115e:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001164:	d111      	bne.n	800118a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8001166:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001168:	f24f 4024 	movw	r0, #62500	; 0xf424
 800116c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001170:	e7f2      	b.n	8001158 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001172:	f7ff ff0b 	bl	8000f8c <HAL_RCC_GetPCLK2Freq>
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800117e:	3301      	adds	r3, #1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	e7cf      	b.n	8001124 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        frequency = LSE_VALUE;
 8001184:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001188:	e7e8      	b.n	800115c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
        frequency = 0U;
 800118a:	2000      	movs	r0, #0
 800118c:	e7e6      	b.n	800115c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800118e:	bf00      	nop
 8001190:	08002e78 	.word	0x08002e78
 8001194:	40021000 	.word	0x40021000
 8001198:	007a1200 	.word	0x007a1200
 800119c:	003d0900 	.word	0x003d0900

080011a0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011a0:	6a03      	ldr	r3, [r0, #32]
{
 80011a2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80011ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80011ae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80011b2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80011b6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80011b8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80011ba:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80011be:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80011c0:	4d0e      	ldr	r5, [pc, #56]	; (80011fc <TIM_OC1_SetConfig+0x5c>)
 80011c2:	42a8      	cmp	r0, r5
 80011c4:	d002      	beq.n	80011cc <TIM_OC1_SetConfig+0x2c>
 80011c6:	4e0e      	ldr	r6, [pc, #56]	; (8001200 <TIM_OC1_SetConfig+0x60>)
 80011c8:	42b0      	cmp	r0, r6
 80011ca:	d110      	bne.n	80011ee <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80011cc:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80011ce:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80011d2:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80011d4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80011d6:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80011da:	d002      	beq.n	80011e2 <TIM_OC1_SetConfig+0x42>
 80011dc:	4d08      	ldr	r5, [pc, #32]	; (8001200 <TIM_OC1_SetConfig+0x60>)
 80011de:	42a8      	cmp	r0, r5
 80011e0:	d105      	bne.n	80011ee <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80011e2:	694d      	ldr	r5, [r1, #20]
 80011e4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80011e6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80011ea:	4335      	orrs	r5, r6
 80011ec:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011ee:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80011f0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80011f2:	684a      	ldr	r2, [r1, #4]
 80011f4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011f6:	6203      	str	r3, [r0, #32]
 80011f8:	bd70      	pop	{r4, r5, r6, pc}
 80011fa:	bf00      	nop
 80011fc:	40012c00 	.word	0x40012c00
 8001200:	40013400 	.word	0x40013400

08001204 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001204:	6a03      	ldr	r3, [r0, #32]
{
 8001206:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800120c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800120e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001210:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001212:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001214:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001216:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800121a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800121c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800121e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001222:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001226:	4d11      	ldr	r5, [pc, #68]	; (800126c <TIM_OC3_SetConfig+0x68>)
 8001228:	42a8      	cmp	r0, r5
 800122a:	d003      	beq.n	8001234 <TIM_OC3_SetConfig+0x30>
 800122c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001230:	42a8      	cmp	r0, r5
 8001232:	d114      	bne.n	800125e <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001234:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800123a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800123e:	4d0b      	ldr	r5, [pc, #44]	; (800126c <TIM_OC3_SetConfig+0x68>)
    tmpccer &= ~TIM_CCER_CC3NE;
 8001240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001244:	42a8      	cmp	r0, r5
 8001246:	d003      	beq.n	8001250 <TIM_OC3_SetConfig+0x4c>
 8001248:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800124c:	42a8      	cmp	r0, r5
 800124e:	d106      	bne.n	800125e <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001250:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001252:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001254:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001258:	4335      	orrs	r5, r6
 800125a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800125e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001260:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001262:	684a      	ldr	r2, [r1, #4]
 8001264:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001266:	6203      	str	r3, [r0, #32]
 8001268:	bd70      	pop	{r4, r5, r6, pc}
 800126a:	bf00      	nop
 800126c:	40012c00 	.word	0x40012c00

08001270 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001270:	6a03      	ldr	r3, [r0, #32]
{
 8001272:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001278:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800127a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800127c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800127e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001280:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001282:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001286:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800128a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800128c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001290:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001294:	4d08      	ldr	r5, [pc, #32]	; (80012b8 <TIM_OC4_SetConfig+0x48>)
 8001296:	42a8      	cmp	r0, r5
 8001298:	d003      	beq.n	80012a2 <TIM_OC4_SetConfig+0x32>
 800129a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800129e:	42a8      	cmp	r0, r5
 80012a0:	d104      	bne.n	80012ac <TIM_OC4_SetConfig+0x3c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80012a2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80012a4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80012a8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012ac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80012ae:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80012b0:	684a      	ldr	r2, [r1, #4]
 80012b2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012b4:	6203      	str	r3, [r0, #32]
 80012b6:	bd30      	pop	{r4, r5, pc}
 80012b8:	40012c00 	.word	0x40012c00

080012bc <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012bc:	6803      	ldr	r3, [r0, #0]
}
 80012be:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	f042 0201 	orr.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
}
 80012d0:	4770      	bx	lr

080012d2 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80012d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80012d6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80012d8:	2b01      	cmp	r3, #1
 80012da:	f04f 0302 	mov.w	r3, #2
 80012de:	d01c      	beq.n	800131a <HAL_TIM_ConfigClockSource+0x48>
 80012e0:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80012e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80012e6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80012e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80012ec:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012ee:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80012f2:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80012f6:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80012f8:	680a      	ldr	r2, [r1, #0]
 80012fa:	2a40      	cmp	r2, #64	; 0x40
 80012fc:	d079      	beq.n	80013f2 <HAL_TIM_ConfigClockSource+0x120>
 80012fe:	d819      	bhi.n	8001334 <HAL_TIM_ConfigClockSource+0x62>
 8001300:	2a10      	cmp	r2, #16
 8001302:	f000 8093 	beq.w	800142c <HAL_TIM_ConfigClockSource+0x15a>
 8001306:	d80a      	bhi.n	800131e <HAL_TIM_ConfigClockSource+0x4c>
 8001308:	2a00      	cmp	r2, #0
 800130a:	f000 8089 	beq.w	8001420 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 800130e:	2301      	movs	r3, #1
 8001310:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001314:	2300      	movs	r3, #0
 8001316:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800131a:	4618      	mov	r0, r3
}
 800131c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800131e:	2a20      	cmp	r2, #32
 8001320:	f000 808a 	beq.w	8001438 <HAL_TIM_ConfigClockSource+0x166>
 8001324:	2a30      	cmp	r2, #48	; 0x30
 8001326:	d1f2      	bne.n	800130e <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001328:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800132a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800132e:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001332:	e036      	b.n	80013a2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001334:	2a70      	cmp	r2, #112	; 0x70
 8001336:	d036      	beq.n	80013a6 <HAL_TIM_ConfigClockSource+0xd4>
 8001338:	d81b      	bhi.n	8001372 <HAL_TIM_ConfigClockSource+0xa0>
 800133a:	2a50      	cmp	r2, #80	; 0x50
 800133c:	d042      	beq.n	80013c4 <HAL_TIM_ConfigClockSource+0xf2>
 800133e:	2a60      	cmp	r2, #96	; 0x60
 8001340:	d1e5      	bne.n	800130e <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001342:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001344:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001346:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800134a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800134c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800134e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001350:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001352:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001356:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800135a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800135e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001362:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001364:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001366:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001368:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800136c:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001370:	e017      	b.n	80013a2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001372:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001376:	d011      	beq.n	800139c <HAL_TIM_ConfigClockSource+0xca>
 8001378:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800137c:	d1c7      	bne.n	800130e <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800137e:	688a      	ldr	r2, [r1, #8]
 8001380:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001382:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001384:	68c9      	ldr	r1, [r1, #12]
 8001386:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001388:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800138c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001390:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001392:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800139a:	e002      	b.n	80013a2 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	e7b3      	b.n	800130e <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013a6:	688a      	ldr	r2, [r1, #8]
 80013a8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80013aa:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013ac:	68c9      	ldr	r1, [r1, #12]
 80013ae:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80013b0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80013b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013b8:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80013ba:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80013bc:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80013be:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80013c2:	e7ee      	b.n	80013a2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013c4:	684c      	ldr	r4, [r1, #4]
 80013c6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80013c8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013ca:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013cc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013d0:	f025 0501 	bic.w	r5, r5, #1
 80013d4:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013d6:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80013d8:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80013de:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80013e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80013e4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80013e6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013ec:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80013f0:	e7d7      	b.n	80013a2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013f2:	684c      	ldr	r4, [r1, #4]
 80013f4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80013f6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013f8:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013fa:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013fe:	f025 0501 	bic.w	r5, r5, #1
 8001402:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001404:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001406:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001408:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800140c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001412:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001414:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001416:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800141a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800141e:	e7c0      	b.n	80013a2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001420:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001422:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001426:	f042 0207 	orr.w	r2, r2, #7
 800142a:	e7ba      	b.n	80013a2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800142c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800142e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001432:	f042 0217 	orr.w	r2, r2, #23
 8001436:	e7b4      	b.n	80013a2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001438:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800143a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800143e:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001442:	e7ae      	b.n	80013a2 <HAL_TIM_ConfigClockSource+0xd0>

08001444 <HAL_TIM_PeriodElapsedCallback>:
 8001444:	4770      	bx	lr

08001446 <HAL_TIM_OC_DelayElapsedCallback>:
 8001446:	4770      	bx	lr

08001448 <HAL_TIM_IC_CaptureCallback>:
 8001448:	4770      	bx	lr

0800144a <HAL_TIM_PWM_PulseFinishedCallback>:
 800144a:	4770      	bx	lr

0800144c <HAL_TIM_TriggerCallback>:
 800144c:	4770      	bx	lr

0800144e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800144e:	6803      	ldr	r3, [r0, #0]
{
 8001450:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001452:	691a      	ldr	r2, [r3, #16]
{
 8001454:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001456:	0791      	lsls	r1, r2, #30
 8001458:	d50e      	bpl.n	8001478 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	0792      	lsls	r2, r2, #30
 800145e:	d50b      	bpl.n	8001478 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001460:	f06f 0202 	mvn.w	r2, #2
 8001464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001466:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001468:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800146a:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800146c:	079b      	lsls	r3, r3, #30
 800146e:	d077      	beq.n	8001560 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001470:	f7ff ffea 	bl	8001448 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001474:	2300      	movs	r3, #0
 8001476:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	0750      	lsls	r0, r2, #29
 800147e:	d510      	bpl.n	80014a2 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	0751      	lsls	r1, r2, #29
 8001484:	d50d      	bpl.n	80014a2 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001486:	f06f 0204 	mvn.w	r2, #4
 800148a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800148c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800148e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001490:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001492:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001496:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001498:	d068      	beq.n	800156c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800149a:	f7ff ffd5 	bl	8001448 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800149e:	2300      	movs	r3, #0
 80014a0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	0712      	lsls	r2, r2, #28
 80014a8:	d50f      	bpl.n	80014ca <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	0710      	lsls	r0, r2, #28
 80014ae:	d50c      	bpl.n	80014ca <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014b0:	f06f 0208 	mvn.w	r2, #8
 80014b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014b6:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014b8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014ba:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014bc:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80014be:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014c0:	d05a      	beq.n	8001578 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80014c2:	f7ff ffc1 	bl	8001448 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014c6:	2300      	movs	r3, #0
 80014c8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	06d2      	lsls	r2, r2, #27
 80014d0:	d510      	bpl.n	80014f4 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	06d0      	lsls	r0, r2, #27
 80014d6:	d50d      	bpl.n	80014f4 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014d8:	f06f 0210 	mvn.w	r2, #16
 80014dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014de:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014e0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014e2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014e4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80014e8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014ea:	d04b      	beq.n	8001584 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80014ec:	f7ff ffac 	bl	8001448 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014f0:	2300      	movs	r3, #0
 80014f2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	07d1      	lsls	r1, r2, #31
 80014fa:	d508      	bpl.n	800150e <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	07d2      	lsls	r2, r2, #31
 8001500:	d505      	bpl.n	800150e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001502:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001506:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001508:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800150a:	f7ff ff9b 	bl	8001444 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	691a      	ldr	r2, [r3, #16]
 8001512:	0610      	lsls	r0, r2, #24
 8001514:	d508      	bpl.n	8001528 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	0611      	lsls	r1, r2, #24
 800151a:	d505      	bpl.n	8001528 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800151c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001520:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001522:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001524:	f000 f997 	bl	8001856 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	0652      	lsls	r2, r2, #25
 800152e:	d508      	bpl.n	8001542 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	0650      	lsls	r0, r2, #25
 8001534:	d505      	bpl.n	8001542 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001536:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800153a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800153c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800153e:	f7ff ff85 	bl	800144c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	0691      	lsls	r1, r2, #26
 8001548:	d522      	bpl.n	8001590 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	0692      	lsls	r2, r2, #26
 800154e:	d51f      	bpl.n	8001590 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001550:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001554:	4620      	mov	r0, r4
}
 8001556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800155a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800155c:	f000 b97a 	b.w	8001854 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001560:	f7ff ff71 	bl	8001446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff ff70 	bl	800144a <HAL_TIM_PWM_PulseFinishedCallback>
 800156a:	e783      	b.n	8001474 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800156c:	f7ff ff6b 	bl	8001446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff ff6a 	bl	800144a <HAL_TIM_PWM_PulseFinishedCallback>
 8001576:	e792      	b.n	800149e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001578:	f7ff ff65 	bl	8001446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800157c:	4620      	mov	r0, r4
 800157e:	f7ff ff64 	bl	800144a <HAL_TIM_PWM_PulseFinishedCallback>
 8001582:	e7a0      	b.n	80014c6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001584:	f7ff ff5f 	bl	8001446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001588:	4620      	mov	r0, r4
 800158a:	f7ff ff5e 	bl	800144a <HAL_TIM_PWM_PulseFinishedCallback>
 800158e:	e7af      	b.n	80014f0 <HAL_TIM_IRQHandler+0xa2>
 8001590:	bd10      	pop	{r4, pc}
	...

08001594 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001594:	4a24      	ldr	r2, [pc, #144]	; (8001628 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001596:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001598:	4290      	cmp	r0, r2
 800159a:	d012      	beq.n	80015c2 <TIM_Base_SetConfig+0x2e>
 800159c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015a0:	4290      	cmp	r0, r2
 80015a2:	d00e      	beq.n	80015c2 <TIM_Base_SetConfig+0x2e>
 80015a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015a8:	d00b      	beq.n	80015c2 <TIM_Base_SetConfig+0x2e>
 80015aa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80015ae:	4290      	cmp	r0, r2
 80015b0:	d007      	beq.n	80015c2 <TIM_Base_SetConfig+0x2e>
 80015b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015b6:	4290      	cmp	r0, r2
 80015b8:	d003      	beq.n	80015c2 <TIM_Base_SetConfig+0x2e>
 80015ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015be:	4290      	cmp	r0, r2
 80015c0:	d11d      	bne.n	80015fe <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80015c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015c8:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015ca:	4a17      	ldr	r2, [pc, #92]	; (8001628 <TIM_Base_SetConfig+0x94>)
 80015cc:	4290      	cmp	r0, r2
 80015ce:	d012      	beq.n	80015f6 <TIM_Base_SetConfig+0x62>
 80015d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015d4:	4290      	cmp	r0, r2
 80015d6:	d00e      	beq.n	80015f6 <TIM_Base_SetConfig+0x62>
 80015d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015dc:	d00b      	beq.n	80015f6 <TIM_Base_SetConfig+0x62>
 80015de:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80015e2:	4290      	cmp	r0, r2
 80015e4:	d007      	beq.n	80015f6 <TIM_Base_SetConfig+0x62>
 80015e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015ea:	4290      	cmp	r0, r2
 80015ec:	d003      	beq.n	80015f6 <TIM_Base_SetConfig+0x62>
 80015ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015f2:	4290      	cmp	r0, r2
 80015f4:	d103      	bne.n	80015fe <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015f6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80015f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015fc:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80015fe:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001604:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001606:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001608:	688b      	ldr	r3, [r1, #8]
 800160a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800160c:	680b      	ldr	r3, [r1, #0]
 800160e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <TIM_Base_SetConfig+0x94>)
 8001612:	4298      	cmp	r0, r3
 8001614:	d003      	beq.n	800161e <TIM_Base_SetConfig+0x8a>
 8001616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800161a:	4298      	cmp	r0, r3
 800161c:	d101      	bne.n	8001622 <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 800161e:	690b      	ldr	r3, [r1, #16]
 8001620:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001622:	2301      	movs	r3, #1
 8001624:	6143      	str	r3, [r0, #20]
 8001626:	4770      	bx	lr
 8001628:	40012c00 	.word	0x40012c00

0800162c <HAL_TIM_Base_Init>:
{
 800162c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800162e:	4604      	mov	r4, r0
 8001630:	b1a0      	cbz	r0, 800165c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001632:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001636:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800163a:	b91b      	cbnz	r3, 8001644 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800163c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001640:	f000 fe14 	bl	800226c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001644:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001646:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001648:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800164c:	1d21      	adds	r1, r4, #4
 800164e:	f7ff ffa1 	bl	8001594 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001652:	2301      	movs	r3, #1
  return HAL_OK;
 8001654:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001656:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800165a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800165c:	2001      	movs	r0, #1
}
 800165e:	bd10      	pop	{r4, pc}

08001660 <HAL_TIM_PWM_Init>:
{
 8001660:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001662:	4604      	mov	r4, r0
 8001664:	b1a0      	cbz	r0, 8001690 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001666:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800166a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800166e:	b91b      	cbnz	r3, 8001678 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001670:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001674:	f000 fdc6 	bl	8002204 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001678:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800167a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800167c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001680:	1d21      	adds	r1, r4, #4
 8001682:	f7ff ff87 	bl	8001594 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001686:	2301      	movs	r3, #1
  return HAL_OK;
 8001688:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800168a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800168e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001690:	2001      	movs	r0, #1
}
 8001692:	bd10      	pop	{r4, pc}

08001694 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001694:	6a03      	ldr	r3, [r0, #32]
{
 8001696:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001698:	f023 0310 	bic.w	r3, r3, #16
 800169c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800169e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80016a0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80016a2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80016a6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016aa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80016ae:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80016b0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80016b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80016b8:	4d10      	ldr	r5, [pc, #64]	; (80016fc <TIM_OC2_SetConfig+0x68>)
 80016ba:	42a8      	cmp	r0, r5
 80016bc:	d003      	beq.n	80016c6 <TIM_OC2_SetConfig+0x32>
 80016be:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80016c2:	42a8      	cmp	r0, r5
 80016c4:	d114      	bne.n	80016f0 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016c6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80016c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80016cc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80016d0:	4d0a      	ldr	r5, [pc, #40]	; (80016fc <TIM_OC2_SetConfig+0x68>)
    tmpccer &= ~TIM_CCER_CC2NE;
 80016d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80016d6:	42a8      	cmp	r0, r5
 80016d8:	d003      	beq.n	80016e2 <TIM_OC2_SetConfig+0x4e>
 80016da:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80016de:	42a8      	cmp	r0, r5
 80016e0:	d106      	bne.n	80016f0 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80016e2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80016e4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80016e6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80016ea:	4335      	orrs	r5, r6
 80016ec:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80016f0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80016f2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80016f4:	684a      	ldr	r2, [r1, #4]
 80016f6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80016f8:	6203      	str	r3, [r0, #32]
 80016fa:	bd70      	pop	{r4, r5, r6, pc}
 80016fc:	40012c00 	.word	0x40012c00

08001700 <HAL_TIM_PWM_ConfigChannel>:
{
 8001700:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001702:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001706:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001708:	2b01      	cmp	r3, #1
 800170a:	f04f 0002 	mov.w	r0, #2
 800170e:	d025      	beq.n	800175c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001710:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001712:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001716:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800171a:	2a0c      	cmp	r2, #12
 800171c:	d818      	bhi.n	8001750 <HAL_TIM_PWM_ConfigChannel+0x50>
 800171e:	e8df f002 	tbb	[pc, r2]
 8001722:	1707      	.short	0x1707
 8001724:	171e1717 	.word	0x171e1717
 8001728:	172f1717 	.word	0x172f1717
 800172c:	1717      	.short	0x1717
 800172e:	40          	.byte	0x40
 800172f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001730:	6820      	ldr	r0, [r4, #0]
 8001732:	f7ff fd35 	bl	80011a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001736:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001738:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	f042 0208 	orr.w	r2, r2, #8
 8001740:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001742:	699a      	ldr	r2, [r3, #24]
 8001744:	f022 0204 	bic.w	r2, r2, #4
 8001748:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800174a:	699a      	ldr	r2, [r3, #24]
 800174c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800174e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001750:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001752:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001754:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001758:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800175c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800175e:	6820      	ldr	r0, [r4, #0]
 8001760:	f7ff ff98 	bl	8001694 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001764:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001766:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001768:	699a      	ldr	r2, [r3, #24]
 800176a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800176e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800177e:	e7e6      	b.n	800174e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001780:	6820      	ldr	r0, [r4, #0]
 8001782:	f7ff fd3f 	bl	8001204 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001786:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001788:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	f042 0208 	orr.w	r2, r2, #8
 8001790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001792:	69da      	ldr	r2, [r3, #28]
 8001794:	f022 0204 	bic.w	r2, r2, #4
 8001798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800179a:	69da      	ldr	r2, [r3, #28]
 800179c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800179e:	61da      	str	r2, [r3, #28]
    break;
 80017a0:	e7d6      	b.n	8001750 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80017a2:	6820      	ldr	r0, [r4, #0]
 80017a4:	f7ff fd64 	bl	8001270 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017a8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80017aa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80017ac:	69da      	ldr	r2, [r3, #28]
 80017ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80017b4:	69da      	ldr	r2, [r3, #28]
 80017b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80017bc:	69da      	ldr	r2, [r3, #28]
 80017be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80017c2:	e7ec      	b.n	800179e <HAL_TIM_PWM_ConfigChannel+0x9e>

080017c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80017c4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80017c6:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80017c8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80017ca:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80017cc:	ea23 0304 	bic.w	r3, r3, r4
 80017d0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80017d2:	6a03      	ldr	r3, [r0, #32]
 80017d4:	408a      	lsls	r2, r1
 80017d6:	431a      	orrs	r2, r3
 80017d8:	6202      	str	r2, [r0, #32]
 80017da:	bd10      	pop	{r4, pc}

080017dc <HAL_TIM_PWM_Start>:
{
 80017dc:	b510      	push	{r4, lr}
 80017de:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80017e0:	2201      	movs	r2, #1
 80017e2:	6800      	ldr	r0, [r0, #0]
 80017e4:	f7ff ffee 	bl	80017c4 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_TIM_PWM_Start+0x30>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d003      	beq.n	80017f8 <HAL_TIM_PWM_Start+0x1c>
 80017f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d103      	bne.n	8001800 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80017f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017fe:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001800:	681a      	ldr	r2, [r3, #0]
}
 8001802:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001804:	f042 0201 	orr.w	r2, r2, #1
 8001808:	601a      	str	r2, [r3, #0]
}
 800180a:	bd10      	pop	{r4, pc}
 800180c:	40012c00 	.word	0x40012c00

08001810 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001810:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001814:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001816:	2b01      	cmp	r3, #1
 8001818:	f04f 0302 	mov.w	r3, #2
 800181c:	d018      	beq.n	8001850 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800181e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001822:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001824:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001826:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001828:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800182a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800182e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4322      	orrs	r2, r4
 8001834:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800183c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	430a      	orrs	r2, r1
 8001842:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001844:	2301      	movs	r3, #1
 8001846:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800184a:	2300      	movs	r3, #0
 800184c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001850:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001852:	bd10      	pop	{r4, pc}

08001854 <HAL_TIMEx_CommutationCallback>:
 8001854:	4770      	bx	lr

08001856 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001856:	4770      	bx	lr

08001858 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800185c:	6805      	ldr	r5, [r0, #0]
 800185e:	68c2      	ldr	r2, [r0, #12]
 8001860:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001862:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001864:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001868:	4313      	orrs	r3, r2
 800186a:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800186c:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800186e:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001870:	430b      	orrs	r3, r1
 8001872:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001874:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001878:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800187c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800187e:	4313      	orrs	r3, r2
 8001880:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001882:	696b      	ldr	r3, [r5, #20]
 8001884:	6982      	ldr	r2, [r0, #24]
 8001886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800188a:	4313      	orrs	r3, r2
 800188c:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800188e:	4b40      	ldr	r3, [pc, #256]	; (8001990 <UART_SetConfig+0x138>)
{
 8001890:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001892:	429d      	cmp	r5, r3
 8001894:	f04f 0419 	mov.w	r4, #25
 8001898:	d146      	bne.n	8001928 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800189a:	f7ff fb77 	bl	8000f8c <HAL_RCC_GetPCLK2Freq>
 800189e:	fb04 f300 	mul.w	r3, r4, r0
 80018a2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80018a6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80018aa:	00b6      	lsls	r6, r6, #2
 80018ac:	fbb3 f3f6 	udiv	r3, r3, r6
 80018b0:	fbb3 f3f8 	udiv	r3, r3, r8
 80018b4:	011e      	lsls	r6, r3, #4
 80018b6:	f7ff fb69 	bl	8000f8c <HAL_RCC_GetPCLK2Freq>
 80018ba:	4360      	muls	r0, r4
 80018bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	fbb0 f7f3 	udiv	r7, r0, r3
 80018c6:	f7ff fb61 	bl	8000f8c <HAL_RCC_GetPCLK2Freq>
 80018ca:	4360      	muls	r0, r4
 80018cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018d6:	fbb3 f3f8 	udiv	r3, r3, r8
 80018da:	fb08 7313 	mls	r3, r8, r3, r7
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	3332      	adds	r3, #50	; 0x32
 80018e2:	fbb3 f3f8 	udiv	r3, r3, r8
 80018e6:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80018ea:	f7ff fb4f 	bl	8000f8c <HAL_RCC_GetPCLK2Freq>
 80018ee:	4360      	muls	r0, r4
 80018f0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	fbb0 faf2 	udiv	sl, r0, r2
 80018fa:	f7ff fb47 	bl	8000f8c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018fe:	4360      	muls	r0, r4
 8001900:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	fbb0 f3f3 	udiv	r3, r0, r3
 800190a:	fbb3 f3f8 	udiv	r3, r3, r8
 800190e:	fb08 a313 	mls	r3, r8, r3, sl
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	3332      	adds	r3, #50	; 0x32
 8001916:	fbb3 f3f8 	udiv	r3, r3, r8
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	433b      	orrs	r3, r7
 8001920:	4433      	add	r3, r6
 8001922:	60ab      	str	r3, [r5, #8]
 8001924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001928:	f7ff fb20 	bl	8000f6c <HAL_RCC_GetPCLK1Freq>
 800192c:	fb04 f300 	mul.w	r3, r4, r0
 8001930:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001934:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001938:	00b6      	lsls	r6, r6, #2
 800193a:	fbb3 f3f6 	udiv	r3, r3, r6
 800193e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001942:	011e      	lsls	r6, r3, #4
 8001944:	f7ff fb12 	bl	8000f6c <HAL_RCC_GetPCLK1Freq>
 8001948:	4360      	muls	r0, r4
 800194a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fbb0 f7f3 	udiv	r7, r0, r3
 8001954:	f7ff fb0a 	bl	8000f6c <HAL_RCC_GetPCLK1Freq>
 8001958:	4360      	muls	r0, r4
 800195a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	fbb0 f3f3 	udiv	r3, r0, r3
 8001964:	fbb3 f3f8 	udiv	r3, r3, r8
 8001968:	fb08 7313 	mls	r3, r8, r3, r7
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	3332      	adds	r3, #50	; 0x32
 8001970:	fbb3 f3f8 	udiv	r3, r3, r8
 8001974:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001978:	f7ff faf8 	bl	8000f6c <HAL_RCC_GetPCLK1Freq>
 800197c:	4360      	muls	r0, r4
 800197e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	fbb0 faf2 	udiv	sl, r0, r2
 8001988:	f7ff faf0 	bl	8000f6c <HAL_RCC_GetPCLK1Freq>
 800198c:	e7b7      	b.n	80018fe <UART_SetConfig+0xa6>
 800198e:	bf00      	nop
 8001990:	40013800 	.word	0x40013800

08001994 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001996:	4604      	mov	r4, r0
 8001998:	460e      	mov	r6, r1
 800199a:	4617      	mov	r7, r2
 800199c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800199e:	6821      	ldr	r1, [r4, #0]
 80019a0:	680b      	ldr	r3, [r1, #0]
 80019a2:	ea36 0303 	bics.w	r3, r6, r3
 80019a6:	d101      	bne.n	80019ac <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80019a8:	2000      	movs	r0, #0
}
 80019aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80019ac:	1c6b      	adds	r3, r5, #1
 80019ae:	d0f7      	beq.n	80019a0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80019b0:	b995      	cbnz	r5, 80019d8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019b2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80019b4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80019bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	f022 0201 	bic.w	r2, r2, #1
 80019c4:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80019c6:	2320      	movs	r3, #32
 80019c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80019cc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80019d0:	2300      	movs	r3, #0
 80019d2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80019d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80019d8:	f7fe fc66 	bl	80002a8 <HAL_GetTick>
 80019dc:	1bc0      	subs	r0, r0, r7
 80019de:	4285      	cmp	r5, r0
 80019e0:	d2dd      	bcs.n	800199e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80019e2:	e7e6      	b.n	80019b2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080019e4 <HAL_UART_Init>:
{
 80019e4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80019e6:	4604      	mov	r4, r0
 80019e8:	b340      	cbz	r0, 8001a3c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80019ea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019f2:	b91b      	cbnz	r3, 80019fc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80019f4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80019f8:	f000 fdf0 	bl	80025dc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80019fc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80019fe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001a04:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a06:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001a08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a0c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a0e:	f7ff ff23 	bl	8001858 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a12:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a14:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a24:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a2c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001a2e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a30:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001a32:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001a36:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001a3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a3c:	2001      	movs	r0, #1
}
 8001a3e:	bd10      	pop	{r4, pc}

08001a40 <HAL_UART_Transmit>:
{
 8001a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a44:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001a46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001a4a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001a4c:	2b20      	cmp	r3, #32
{
 8001a4e:	460d      	mov	r5, r1
 8001a50:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001a52:	d14e      	bne.n	8001af2 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001a54:	2900      	cmp	r1, #0
 8001a56:	d049      	beq.n	8001aec <HAL_UART_Transmit+0xac>
 8001a58:	2a00      	cmp	r2, #0
 8001a5a:	d047      	beq.n	8001aec <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001a5c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d046      	beq.n	8001af2 <HAL_UART_Transmit+0xb2>
 8001a64:	2301      	movs	r3, #1
 8001a66:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a6e:	2321      	movs	r3, #33	; 0x21
 8001a70:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001a74:	f7fe fc18 	bl	80002a8 <HAL_GetTick>
 8001a78:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001a7a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a7e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001a82:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b96b      	cbnz	r3, 8001aa4 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a88:	463b      	mov	r3, r7
 8001a8a:	4632      	mov	r2, r6
 8001a8c:	2140      	movs	r1, #64	; 0x40
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff ff80 	bl	8001994 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a94:	b9a8      	cbnz	r0, 8001ac2 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001a96:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001a98:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001a9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001aa4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aa6:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001aae:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ab0:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001aba:	d10e      	bne.n	8001ada <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001abc:	f7ff ff6a 	bl	8001994 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ac0:	b110      	cbz	r0, 8001ac8 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001ac2:	2003      	movs	r0, #3
 8001ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ac8:	882b      	ldrh	r3, [r5, #0]
 8001aca:	6822      	ldr	r2, [r4, #0]
 8001acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad0:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001ad2:	6923      	ldr	r3, [r4, #16]
 8001ad4:	b943      	cbnz	r3, 8001ae8 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001ad6:	3502      	adds	r5, #2
 8001ad8:	e7d3      	b.n	8001a82 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ada:	f7ff ff5b 	bl	8001994 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	d1ef      	bne.n	8001ac2 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	782a      	ldrb	r2, [r5, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	3501      	adds	r5, #1
 8001aea:	e7ca      	b.n	8001a82 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001aec:	2001      	movs	r0, #1
 8001aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001af2:	2002      	movs	r0, #2
}
 8001af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001af8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001afa:	4813      	ldr	r0, [pc, #76]	; (8001b48 <MX_ADC1_Init+0x50>)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_ADC1_Init+0x54>)
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001afe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 8001b02:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b08:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b0a:	6143      	str	r3, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b0c:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b0e:	2301      	movs	r3, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b10:	61c2      	str	r2, [r0, #28]
  hadc1.Init.NbrOfConversion = 1;
 8001b12:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b14:	f7fe fdc2 	bl	800069c <HAL_ADC_Init>
 8001b18:	b118      	cbz	r0, 8001b22 <MX_ADC1_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b1a:	214d      	movs	r1, #77	; 0x4d
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <MX_ADC1_Init+0x58>)
 8001b1e:	f000 fa71 	bl	8002004 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b22:	230a      	movs	r3, #10
 8001b24:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001b2a:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2c:	a901      	add	r1, sp, #4
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <MX_ADC1_Init+0x50>)
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001b30:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b32:	f7fe fc73 	bl	800041c <HAL_ADC_ConfigChannel>
 8001b36:	b118      	cbz	r0, 8001b40 <MX_ADC1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b38:	2157      	movs	r1, #87	; 0x57
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_ADC1_Init+0x58>)
 8001b3c:	f000 fa62 	bl	8002004 <_Error_Handler>
  }

}
 8001b40:	b005      	add	sp, #20
 8001b42:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b46:	bf00      	nop
 8001b48:	200000d4 	.word	0x200000d4
 8001b4c:	40012400 	.word	0x40012400
 8001b50:	08002e88 	.word	0x08002e88

08001b54 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc2.Instance = ADC2;
 8001b56:	4813      	ldr	r0, [pc, #76]	; (8001ba4 <MX_ADC2_Init+0x50>)
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <MX_ADC2_Init+0x54>)
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b5a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc2.Instance = ADC2;
 8001b5e:	6003      	str	r3, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001b64:	60c3      	str	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b66:	6143      	str	r3, [r0, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b68:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001b6a:	2301      	movs	r3, #1
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b6c:	61c2      	str	r2, [r0, #28]
  hadc2.Init.NbrOfConversion = 1;
 8001b6e:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b70:	f7fe fd94 	bl	800069c <HAL_ADC_Init>
 8001b74:	b118      	cbz	r0, 8001b7e <MX_ADC2_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b76:	216b      	movs	r1, #107	; 0x6b
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <MX_ADC2_Init+0x58>)
 8001b7a:	f000 fa43 	bl	8002004 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001b86:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b88:	a901      	add	r1, sp, #4
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_ADC2_Init+0x50>)
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001b8c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b8e:	f7fe fc45 	bl	800041c <HAL_ADC_ConfigChannel>
 8001b92:	b118      	cbz	r0, 8001b9c <MX_ADC2_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001b94:	2175      	movs	r1, #117	; 0x75
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_ADC2_Init+0x58>)
 8001b98:	f000 fa34 	bl	8002004 <_Error_Handler>
  }

}
 8001b9c:	b005      	add	sp, #20
 8001b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ba2:	bf00      	nop
 8001ba4:	200000a4 	.word	0x200000a4
 8001ba8:	40012800 	.word	0x40012800
 8001bac:	08002e88 	.word	0x08002e88

08001bb0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc3.Instance = ADC3;
 8001bb2:	4813      	ldr	r0, [pc, #76]	; (8001c00 <MX_ADC3_Init+0x50>)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <MX_ADC3_Init+0x54>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bb6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc3.Instance = ADC3;
 8001bba:	6003      	str	r3, [r0, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6083      	str	r3, [r0, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001bc0:	60c3      	str	r3, [r0, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001bc2:	6143      	str	r3, [r0, #20]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bc4:	6043      	str	r3, [r0, #4]
  hadc3.Init.NbrOfConversion = 1;
 8001bc6:	2301      	movs	r3, #1
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bc8:	61c2      	str	r2, [r0, #28]
  hadc3.Init.NbrOfConversion = 1;
 8001bca:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001bcc:	f7fe fd66 	bl	800069c <HAL_ADC_Init>
 8001bd0:	b118      	cbz	r0, 8001bda <MX_ADC3_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001bd2:	2189      	movs	r1, #137	; 0x89
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <MX_ADC3_Init+0x58>)
 8001bd6:	f000 fa15 	bl	8002004 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_12;
 8001bda:	230c      	movs	r3, #12
 8001bdc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001be2:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001be4:	a901      	add	r1, sp, #4
 8001be6:	4806      	ldr	r0, [pc, #24]	; (8001c00 <MX_ADC3_Init+0x50>)
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001be8:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bea:	f7fe fc17 	bl	800041c <HAL_ADC_ConfigChannel>
 8001bee:	b118      	cbz	r0, 8001bf8 <MX_ADC3_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001bf0:	2193      	movs	r1, #147	; 0x93
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_ADC3_Init+0x58>)
 8001bf4:	f000 fa06 	bl	8002004 <_Error_Handler>
  }

}
 8001bf8:	b005      	add	sp, #20
 8001bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bfe:	bf00      	nop
 8001c00:	20000104 	.word	0x20000104
 8001c04:	40013c00 	.word	0x40013c00
 8001c08:	08002e88 	.word	0x08002e88

08001c0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c0c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8001c0e:	6803      	ldr	r3, [r0, #0]
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_ADC_MspInit+0x80>)
{
 8001c12:	b089      	sub	sp, #36	; 0x24
  if(adcHandle->Instance==ADC1)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d10f      	bne.n	8001c38 <HAL_ADC_MspInit+0x2c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_ADC_MspInit+0x84>)
 8001c1a:	699a      	ldr	r2, [r3, #24]
 8001c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c20:	619a      	str	r2, [r3, #24]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	9304      	str	r3, [sp, #16]
    /**ADC3 GPIO Configuration    
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c30:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	a904      	add	r1, sp, #16
 8001c34:	4817      	ldr	r0, [pc, #92]	; (8001c94 <HAL_ADC_MspInit+0x88>)
 8001c36:	e012      	b.n	8001c5e <HAL_ADC_MspInit+0x52>
  else if(adcHandle->Instance==ADC2)
 8001c38:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_ADC_MspInit+0x8c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d114      	bne.n	8001c68 <HAL_ADC_MspInit+0x5c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_ADC_MspInit+0x84>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	4816      	ldr	r0, [pc, #88]	; (8001c9c <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c42:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c4a:	619a      	str	r2, [r3, #24]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	9302      	str	r3, [sp, #8]
 8001c54:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c56:	2310      	movs	r3, #16
 8001c58:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	f7fe fe21 	bl	80008a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001c62:	b009      	add	sp, #36	; 0x24
 8001c64:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(adcHandle->Instance==ADC3)
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <HAL_ADC_MspInit+0x94>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d1f9      	bne.n	8001c62 <HAL_ADC_MspInit+0x56>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_ADC_MspInit+0x84>)
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c76:	619a      	str	r2, [r3, #24]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c7e:	9303      	str	r3, [sp, #12]
 8001c80:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c82:	230c      	movs	r3, #12
 8001c84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e7d2      	b.n	8001c30 <HAL_ADC_MspInit+0x24>
 8001c8a:	bf00      	nop
 8001c8c:	40012400 	.word	0x40012400
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40011000 	.word	0x40011000
 8001c98:	40012800 	.word	0x40012800
 8001c9c:	40010800 	.word	0x40010800
 8001ca0:	40013c00 	.word	0x40013c00

08001ca4 <update_ADC1>:
 * return   : void
********************************************************************************************/
void update_ADC1(void)
{
  ADC_ChannelConfTypeDef sConfig;
  sConfig.Rank = 1;
 8001ca4:	2301      	movs	r3, #1
{
 8001ca6:	b530      	push	{r4, r5, lr}
 8001ca8:	b085      	sub	sp, #20
  sConfig.Rank = 1;
 8001caa:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001cac:	2305      	movs	r3, #5
 8001cae:	9303      	str	r3, [sp, #12]

  sConfig.Channel = ADC_CHANNEL_10;
 8001cb0:	230a      	movs	r3, #10
 8001cb2:	ac04      	add	r4, sp, #16
 8001cb4:	f844 3d0c 	str.w	r3, [r4, #-12]!
  HAL_ADC_ConfigChannel( &hadc1, &sConfig );  // setting store
 8001cb8:	4621      	mov	r1, r4
 8001cba:	4817      	ldr	r0, [pc, #92]	; (8001d18 <update_ADC1+0x74>)
 8001cbc:	f7fe fbae 	bl	800041c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start( &hadc1 );     // ad convert start
 8001cc0:	4815      	ldr	r0, [pc, #84]	; (8001d18 <update_ADC1+0x74>)
 8001cc2:	f7fe fc67 	bl	8000594 <HAL_ADC_Start>
  while( HAL_ADC_PollForConversion( &hadc1,1000 ) != HAL_OK );
 8001cc6:	4d14      	ldr	r5, [pc, #80]	; (8001d18 <update_ADC1+0x74>)
 8001cc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f7fe fb03 	bl	80002d8 <HAL_ADC_PollForConversion>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d1f8      	bne.n	8001cc8 <update_ADC1+0x24>
  adc1_ch10 = HAL_ADC_GetValue(&hadc1);
 8001cd6:	4810      	ldr	r0, [pc, #64]	; (8001d18 <update_ADC1+0x74>)
 8001cd8:	f7fe fb9c 	bl	8000414 <HAL_ADC_GetValue>
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <update_ADC1+0x78>)

  sConfig.Rank = 2;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;

  sConfig.Channel = ADC_CHANNEL_11;
  HAL_ADC_ConfigChannel( &hadc1, &sConfig );  // setting store
 8001cde:	4621      	mov	r1, r4
  adc1_ch10 = HAL_ADC_GetValue(&hadc1);
 8001ce0:	8018      	strh	r0, [r3, #0]
  sConfig.Rank = 2;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	9303      	str	r3, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_11;
 8001cea:	230b      	movs	r3, #11
  HAL_ADC_ConfigChannel( &hadc1, &sConfig );  // setting store
 8001cec:	480a      	ldr	r0, [pc, #40]	; (8001d18 <update_ADC1+0x74>)
  sConfig.Channel = ADC_CHANNEL_11;
 8001cee:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel( &hadc1, &sConfig );  // setting store
 8001cf0:	f7fe fb94 	bl	800041c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start( &hadc1 );     // ad convert start
 8001cf4:	4808      	ldr	r0, [pc, #32]	; (8001d18 <update_ADC1+0x74>)
 8001cf6:	f7fe fc4d 	bl	8000594 <HAL_ADC_Start>
  while( HAL_ADC_PollForConversion( &hadc1,1000 ) != HAL_OK );
 8001cfa:	4c07      	ldr	r4, [pc, #28]	; (8001d18 <update_ADC1+0x74>)
 8001cfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7fe fae9 	bl	80002d8 <HAL_ADC_PollForConversion>
 8001d06:	2800      	cmp	r0, #0
 8001d08:	d1f8      	bne.n	8001cfc <update_ADC1+0x58>
  adc1_ch11 = HAL_ADC_GetValue(&hadc1);
 8001d0a:	4803      	ldr	r0, [pc, #12]	; (8001d18 <update_ADC1+0x74>)
 8001d0c:	f7fe fb82 	bl	8000414 <HAL_ADC_GetValue>
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <update_ADC1+0x7c>)
 8001d12:	8018      	strh	r0, [r3, #0]
  //HAL_ADC_Stop(&hadc1);
}
 8001d14:	b005      	add	sp, #20
 8001d16:	bd30      	pop	{r4, r5, pc}
 8001d18:	200000d4 	.word	0x200000d4
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	2000000a 	.word	0x2000000a

08001d24 <update_ADC3>:
 * return   : void
********************************************************************************************/
void update_ADC3(void)
{
  ADC_ChannelConfTypeDef sConfig;
  sConfig.Rank = 1;
 8001d24:	2301      	movs	r3, #1
{
 8001d26:	b530      	push	{r4, r5, lr}
 8001d28:	b085      	sub	sp, #20
  sConfig.Rank = 1;
 8001d2a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001d2c:	2305      	movs	r3, #5
 8001d2e:	9303      	str	r3, [sp, #12]

  sConfig.Channel = ADC_CHANNEL_12;
 8001d30:	230c      	movs	r3, #12
 8001d32:	ac04      	add	r4, sp, #16
 8001d34:	f844 3d0c 	str.w	r3, [r4, #-12]!
  HAL_ADC_ConfigChannel( &hadc3, &sConfig );  // setting store
 8001d38:	4621      	mov	r1, r4
 8001d3a:	4817      	ldr	r0, [pc, #92]	; (8001d98 <update_ADC3+0x74>)
 8001d3c:	f7fe fb6e 	bl	800041c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start( &hadc3 );     // ad convert start
 8001d40:	4815      	ldr	r0, [pc, #84]	; (8001d98 <update_ADC3+0x74>)
 8001d42:	f7fe fc27 	bl	8000594 <HAL_ADC_Start>
  while( HAL_ADC_PollForConversion( &hadc3,1000 ) != HAL_OK );
 8001d46:	4d14      	ldr	r5, [pc, #80]	; (8001d98 <update_ADC3+0x74>)
 8001d48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	f7fe fac3 	bl	80002d8 <HAL_ADC_PollForConversion>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d1f8      	bne.n	8001d48 <update_ADC3+0x24>
  adc3_ch12 = HAL_ADC_GetValue(&hadc3);
 8001d56:	4810      	ldr	r0, [pc, #64]	; (8001d98 <update_ADC3+0x74>)
 8001d58:	f7fe fb5c 	bl	8000414 <HAL_ADC_GetValue>
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <update_ADC3+0x78>)

  sConfig.Rank = 2;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;

  sConfig.Channel = ADC_CHANNEL_13;
  HAL_ADC_ConfigChannel( &hadc3, &sConfig );  // setting store
 8001d5e:	4621      	mov	r1, r4
  adc3_ch12 = HAL_ADC_GetValue(&hadc3);
 8001d60:	8018      	strh	r0, [r3, #0]
  sConfig.Rank = 2;
 8001d62:	2302      	movs	r3, #2
 8001d64:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001d66:	2305      	movs	r3, #5
 8001d68:	9303      	str	r3, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_13;
 8001d6a:	230d      	movs	r3, #13
  HAL_ADC_ConfigChannel( &hadc3, &sConfig );  // setting store
 8001d6c:	480a      	ldr	r0, [pc, #40]	; (8001d98 <update_ADC3+0x74>)
  sConfig.Channel = ADC_CHANNEL_13;
 8001d6e:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel( &hadc3, &sConfig );  // setting store
 8001d70:	f7fe fb54 	bl	800041c <HAL_ADC_ConfigChannel>
  HAL_ADC_Start( &hadc3 );     // ad convert start
 8001d74:	4808      	ldr	r0, [pc, #32]	; (8001d98 <update_ADC3+0x74>)
 8001d76:	f7fe fc0d 	bl	8000594 <HAL_ADC_Start>
  while( HAL_ADC_PollForConversion( &hadc3,1000 ) != HAL_OK );
 8001d7a:	4c07      	ldr	r4, [pc, #28]	; (8001d98 <update_ADC3+0x74>)
 8001d7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7fe faa9 	bl	80002d8 <HAL_ADC_PollForConversion>
 8001d86:	2800      	cmp	r0, #0
 8001d88:	d1f8      	bne.n	8001d7c <update_ADC3+0x58>
  adc3_ch13 = HAL_ADC_GetValue(&hadc3);
 8001d8a:	4803      	ldr	r0, [pc, #12]	; (8001d98 <update_ADC3+0x74>)
 8001d8c:	f7fe fb42 	bl	8000414 <HAL_ADC_GetValue>
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <update_ADC3+0x7c>)
 8001d92:	8018      	strh	r0, [r3, #0]
  //HAL_ADC_Stop(&hadc3);
}
 8001d94:	b005      	add	sp, #20
 8001d96:	bd30      	pop	{r4, r5, pc}
 8001d98:	20000104 	.word	0x20000104
 8001d9c:	2000000c 	.word	0x2000000c
 8001da0:	2000000e 	.word	0x2000000e

08001da4 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da4:	4b32      	ldr	r3, [pc, #200]	; (8001e70 <MX_GPIO_Init+0xcc>)
{
 8001da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001daa:	699a      	ldr	r2, [r3, #24]
{
 8001dac:	b088      	sub	sp, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dae:	f042 0210 	orr.w	r2, r2, #16
 8001db2:	619a      	str	r2, [r3, #24]
 8001db4:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|motor_en_Pin|l_cw_Pin 
 8001db6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001e7c <MX_GPIO_Init+0xd8>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	f002 0210 	and.w	r2, r2, #16
 8001dbe:	9201      	str	r2, [sp, #4]
 8001dc0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	699a      	ldr	r2, [r3, #24]
                          |r_cw_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led3_Pin|led4_Pin, GPIO_PIN_RESET);
 8001dc4:	4c2b      	ldr	r4, [pc, #172]	; (8001e74 <MX_GPIO_Init+0xd0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	f042 0204 	orr.w	r2, r2, #4
 8001dca:	619a      	str	r2, [r3, #24]
 8001dcc:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ir_led1_Pin|ir_led2_Pin|ir_led3_Pin|ir_led4_Pin, GPIO_PIN_RESET);
 8001dce:	4d2a      	ldr	r5, [pc, #168]	; (8001e78 <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	f002 0204 	and.w	r2, r2, #4
 8001dd4:	9202      	str	r2, [sp, #8]
 8001dd6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|motor_en_Pin|l_cw_Pin 
 8001dda:	4640      	mov	r0, r8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ddc:	f042 0208 	orr.w	r2, r2, #8
 8001de0:	619a      	str	r2, [r3, #24]
 8001de2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|motor_en_Pin|l_cw_Pin 
 8001de4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|motor_en_Pin|l_cw_Pin 
 8001dec:	f246 11c0 	movw	r1, #25024	; 0x61c0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, led1_Pin|led2_Pin|motor_en_Pin|l_cw_Pin 
 8001df2:	f7fe fe43 	bl	8000a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, led3_Pin|led4_Pin, GPIO_PIN_RESET);
 8001df6:	4620      	mov	r0, r4
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2103      	movs	r1, #3
 8001dfc:	f7fe fe3e 	bl	8000a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ir_led1_Pin|ir_led2_Pin|ir_led3_Pin|ir_led4_Pin, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	4628      	mov	r0, r5
 8001e04:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001e08:	f7fe fe38 	bl	8000a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|motor_en_Pin|l_cw_Pin 
                          |r_cw_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|motor_en_Pin|l_cw_Pin 
 8001e10:	f246 13c0 	movw	r3, #25024	; 0x61c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e14:	a904      	add	r1, sp, #16
 8001e16:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|motor_en_Pin|l_cw_Pin 
 8001e18:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1e:	f7fe fd41 	bl	80008a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = led3_Pin|led4_Pin;
 8001e22:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	a904      	add	r1, sp, #16
 8001e26:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = led3_Pin|led4_Pin;
 8001e28:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = sw3_Pin|sw2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2a:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f7fe fd38 	bl	80008a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = sw3_Pin|sw2_Pin;
 8001e34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e38:	a904      	add	r1, sp, #16
 8001e3a:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = sw3_Pin|sw2_Pin;
 8001e3c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e42:	f7fe fd2f 	bl	80008a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sw1_Pin;
 8001e46:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(sw1_GPIO_Port, &GPIO_InitStruct);
 8001e48:	a904      	add	r1, sp, #16
 8001e4a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = sw1_Pin;
 8001e4c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(sw1_GPIO_Port, &GPIO_InitStruct);
 8001e52:	f7fe fd27 	bl	80008a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ir_led1_Pin|ir_led2_Pin|ir_led3_Pin|ir_led4_Pin;
 8001e56:	f44f 7370 	mov.w	r3, #960	; 0x3c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	a904      	add	r1, sp, #16
 8001e5c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = ir_led1_Pin|ir_led2_Pin|ir_led3_Pin|ir_led4_Pin;
 8001e5e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f7fe fd1e 	bl	80008a4 <HAL_GPIO_Init>

}
 8001e68:	b008      	add	sp, #32
 8001e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010800 	.word	0x40010800
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	40011000 	.word	0x40011000

08001e80 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
  HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8001e80:	2301      	movs	r3, #1
void __io_putchar(uint8_t ch) {
 8001e82:	b507      	push	{r0, r1, r2, lr}
 8001e84:	a902      	add	r1, sp, #8
 8001e86:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <__io_putchar+0x18>)
 8001e8e:	f7ff fdd7 	bl	8001a40 <HAL_UART_Transmit>
}
 8001e92:	b003      	add	sp, #12
 8001e94:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e98:	20000258 	.word	0x20000258

08001e9c <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e9c:	2301      	movs	r3, #1
{
 8001e9e:	b510      	push	{r4, lr}
 8001ea0:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001ea4:	2310      	movs	r3, #16
 8001ea6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001ea8:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eaa:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001eac:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001eae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb2:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eb4:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb6:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001eb8:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eba:	f7fe fde5 	bl	8000a88 <HAL_RCC_OscConfig>
 8001ebe:	b100      	cbz	r0, 8001ec2 <SystemClock_Config+0x26>
 8001ec0:	e7fe      	b.n	8001ec0 <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec2:	230f      	movs	r3, #15
 8001ec4:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eca:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ecc:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ece:	4621      	mov	r1, r4
 8001ed0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed2:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed4:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ed6:	f7fe ff9f 	bl	8000e18 <HAL_RCC_ClockConfig>
 8001eda:	b100      	cbz	r0, 8001ede <SystemClock_Config+0x42>
 8001edc:	e7fe      	b.n	8001edc <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001ede:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee2:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ee4:	9406      	str	r4, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001ee6:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee8:	f7ff f860 	bl	8000fac <HAL_RCCEx_PeriphCLKConfig>
 8001eec:	4604      	mov	r4, r0
 8001eee:	b100      	cbz	r0, 8001ef2 <SystemClock_Config+0x56>
 8001ef0:	e7fe      	b.n	8001ef0 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001ef2:	f7ff f835 	bl	8000f60 <HAL_RCC_GetHCLKFreq>
 8001ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efa:	fbb0 f0f3 	udiv	r0, r0, r3
 8001efe:	f7fe fca9 	bl	8000854 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f02:	2004      	movs	r0, #4
 8001f04:	f7fe fcbc 	bl	8000880 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f08:	4622      	mov	r2, r4
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7fe fc60 	bl	80007d4 <HAL_NVIC_SetPriority>
}
 8001f14:	b016      	add	sp, #88	; 0x58
 8001f16:	bd10      	pop	{r4, pc}

08001f18 <L_chika>:

/* USER CODE BEGIN 4 */
void L_chika(void){
 8001f18:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(led1_GPIO_Port,led1_Pin,1);
 8001f1a:	4d1c      	ldr	r5, [pc, #112]	; (8001f8c <L_chika+0x74>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4628      	mov	r0, r5
 8001f20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f24:	f7fe fdaa 	bl	8000a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port,led2_Pin,1);
 8001f28:	4628      	mov	r0, r5
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f30:	f7fe fda4 	bl	8000a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led3_GPIO_Port,led3_Pin,1);
 8001f34:	2201      	movs	r2, #1
 8001f36:	4c16      	ldr	r4, [pc, #88]	; (8001f90 <L_chika+0x78>)
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7fe fd9e 	bl	8000a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led4_GPIO_Port,led4_Pin,1);
 8001f40:	2201      	movs	r2, #1
 8001f42:	2102      	movs	r1, #2
 8001f44:	4620      	mov	r0, r4
 8001f46:	f7fe fd99 	bl	8000a7c <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8001f4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f4e:	f7fe f9b1 	bl	80002b4 <HAL_Delay>

	HAL_GPIO_WritePin(led1_GPIO_Port,led1_Pin,0);
 8001f52:	4628      	mov	r0, r5
 8001f54:	2200      	movs	r2, #0
 8001f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f5a:	f7fe fd8f 	bl	8000a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led2_GPIO_Port,led2_Pin,0);
 8001f5e:	4628      	mov	r0, r5
 8001f60:	2200      	movs	r2, #0
 8001f62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f66:	f7fe fd89 	bl	8000a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led3_GPIO_Port,led3_Pin,0);
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2101      	movs	r1, #1
 8001f70:	f7fe fd84 	bl	8000a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led4_GPIO_Port,led4_Pin,0);
 8001f74:	4620      	mov	r0, r4
 8001f76:	2200      	movs	r2, #0
 8001f78:	2102      	movs	r1, #2
 8001f7a:	f7fe fd7f 	bl	8000a7c <HAL_GPIO_WritePin>

	HAL_Delay(1000);
}
 8001f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(1000);
 8001f82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f86:	f7fe b995 	b.w	80002b4 <HAL_Delay>
 8001f8a:	bf00      	nop
 8001f8c:	40011000 	.word	0x40011000
 8001f90:	40010800 	.word	0x40010800

08001f94 <main>:
{
 8001f94:	b508      	push	{r3, lr}
  HAL_Init();
 8001f96:	f7fe f969 	bl	800026c <HAL_Init>
  SystemClock_Config();
 8001f9a:	f7ff ff7f 	bl	8001e9c <SystemClock_Config>
  MX_GPIO_Init();
 8001f9e:	f7ff ff01 	bl	8001da4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001fa2:	f7ff fda9 	bl	8001af8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001fa6:	f7ff fdd5 	bl	8001b54 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001faa:	f7ff fe01 	bl	8001bb0 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001fae:	f000 f9c3 	bl	8002338 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fb2:	f000 f9fb 	bl	80023ac <MX_TIM3_Init>
  MX_TIM5_Init();
 8001fb6:	f000 fa35 	bl	8002424 <MX_TIM5_Init>
  MX_TIM4_Init();
 8001fba:	f000 f8ed 	bl	8002198 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001fbe:	f000 faed 	bl	800259c <MX_USART1_UART_Init>
  HAL_TIM_Base_Start_IT(&htim4);
 8001fc2:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <main+0x64>)
 8001fc4:	f7ff f97a 	bl	80012bc <HAL_TIM_Base_Start_IT>
  setbuf(stdout, NULL);
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <main+0x68>)
 8001fca:	2100      	movs	r1, #0
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6898      	ldr	r0, [r3, #8]
 8001fd0:	f000 fb88 	bl	80026e4 <setbuf>
  L_chika();
 8001fd4:	f7ff ffa0 	bl	8001f18 <L_chika>
  Motor_Enable();
 8001fd8:	f000 fa5e 	bl	8002498 <Motor_Enable>
  Motor_Control(6000,6000);
 8001fdc:	f241 7170 	movw	r1, #6000	; 0x1770
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	f000 faaf 	bl	8002544 <Motor_Control>
  HAL_Delay(1000);
 8001fe6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fea:	f7fe f963 	bl	80002b4 <HAL_Delay>
  Motor_Control(-6000,-6000);
 8001fee:	4904      	ldr	r1, [pc, #16]	; (8002000 <main+0x6c>)
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	f000 faa7 	bl	8002544 <Motor_Control>
 8001ff6:	e7fe      	b.n	8001ff6 <main+0x62>
 8001ff8:	20000134 	.word	0x20000134
 8001ffc:	20000014 	.word	0x20000014
 8002000:	ffffe890 	.word	0xffffe890

08002004 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002004:	e7fe      	b.n	8002004 <_Error_Handler>
	...

08002008 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002008:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_MspInit+0x84>)
{
 800200a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 800200c:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200e:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002010:	f042 0201 	orr.w	r2, r2, #1
 8002014:	619a      	str	r2, [r3, #24]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	f7fe fbc6 	bl	80007b0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	f06f 000b 	mvn.w	r0, #11
 800202a:	4611      	mov	r1, r2
 800202c:	f7fe fbd2 	bl	80007d4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	f06f 000a 	mvn.w	r0, #10
 8002036:	4611      	mov	r1, r2
 8002038:	f7fe fbcc 	bl	80007d4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	f06f 0009 	mvn.w	r0, #9
 8002042:	4611      	mov	r1, r2
 8002044:	f7fe fbc6 	bl	80007d4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	f06f 0004 	mvn.w	r0, #4
 800204e:	4611      	mov	r1, r2
 8002050:	f7fe fbc0 	bl	80007d4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	f06f 0003 	mvn.w	r0, #3
 800205a:	4611      	mov	r1, r2
 800205c:	f7fe fbba 	bl	80007d4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	f06f 0001 	mvn.w	r0, #1
 8002066:	4611      	mov	r1, r2
 8002068:	f7fe fbb4 	bl	80007d4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	f04f 30ff 	mov.w	r0, #4294967295
 8002072:	4611      	mov	r1, r2
 8002074:	f7fe fbae 	bl	80007d4 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002078:	4a05      	ldr	r2, [pc, #20]	; (8002090 <HAL_MspInit+0x88>)
 800207a:	6853      	ldr	r3, [r2, #4]
 800207c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002080:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002084:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002086:	b003      	add	sp, #12
 8002088:	f85d fb04 	ldr.w	pc, [sp], #4
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000

08002094 <NMI_Handler>:
 8002094:	4770      	bx	lr

08002096 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002096:	e7fe      	b.n	8002096 <HardFault_Handler>

08002098 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002098:	e7fe      	b.n	8002098 <MemManage_Handler>

0800209a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800209a:	e7fe      	b.n	800209a <BusFault_Handler>

0800209c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800209c:	e7fe      	b.n	800209c <UsageFault_Handler>

0800209e <SVC_Handler>:
 800209e:	4770      	bx	lr

080020a0 <DebugMon_Handler>:
 80020a0:	4770      	bx	lr

080020a2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80020a2:	4770      	bx	lr

080020a4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80020a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a6:	f7fe f8f3 	bl	8000290 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80020ae:	f7fe bbf4 	b.w	800089a <HAL_SYSTICK_IRQHandler>
	...

080020b4 <TIM4_IRQHandler>:

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 80020b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020b6:	4804      	ldr	r0, [pc, #16]	; (80020c8 <TIM4_IRQHandler+0x14>)
 80020b8:	f7ff f9c9 	bl	800144e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  update_ADC1();
 80020bc:	f7ff fdf2 	bl	8001ca4 <update_ADC1>
  update_ADC3();

  /* USER CODE END TIM4_IRQn 1 */
}
 80020c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  update_ADC3();
 80020c4:	f7ff be2e 	b.w	8001d24 <update_ADC3>
 80020c8:	20000134 	.word	0x20000134

080020cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80020cc:	b570      	push	{r4, r5, r6, lr}
 80020ce:	460e      	mov	r6, r1
 80020d0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d2:	460c      	mov	r4, r1
 80020d4:	1ba3      	subs	r3, r4, r6
 80020d6:	429d      	cmp	r5, r3
 80020d8:	dc01      	bgt.n	80020de <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80020da:	4628      	mov	r0, r5
 80020dc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80020de:	f3af 8000 	nop.w
 80020e2:	f804 0b01 	strb.w	r0, [r4], #1
 80020e6:	e7f5      	b.n	80020d4 <_read+0x8>

080020e8 <_write>:

int _write(int file, char *ptr, int len)
{
 80020e8:	b570      	push	{r4, r5, r6, lr}
 80020ea:	460e      	mov	r6, r1
 80020ec:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	460c      	mov	r4, r1
 80020f0:	1ba3      	subs	r3, r4, r6
 80020f2:	429d      	cmp	r5, r3
 80020f4:	dc01      	bgt.n	80020fa <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80020f6:	4628      	mov	r0, r5
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80020fa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80020fe:	f7ff febf 	bl	8001e80 <__io_putchar>
 8002102:	e7f5      	b.n	80020f0 <_write+0x8>

08002104 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002104:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <_sbrk+0x2c>)
{
 8002108:	4602      	mov	r2, r0
	if (heap_end == 0)
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	b909      	cbnz	r1, 8002112 <_sbrk+0xe>
		heap_end = &end;
 800210e:	4909      	ldr	r1, [pc, #36]	; (8002134 <_sbrk+0x30>)
 8002110:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002112:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002114:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002116:	4402      	add	r2, r0
 8002118:	428a      	cmp	r2, r1
 800211a:	d906      	bls.n	800212a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800211c:	f000 fab0 	bl	8002680 <__errno>
 8002120:	230c      	movs	r3, #12
 8002122:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800212a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800212c:	bd08      	pop	{r3, pc}
 800212e:	bf00      	nop
 8002130:	20000094 	.word	0x20000094
 8002134:	2000029c 	.word	0x2000029c

08002138 <_close>:

int _close(int file)
{
	return -1;
}
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	4770      	bx	lr

0800213e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800213e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002142:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002144:	604b      	str	r3, [r1, #4]
}
 8002146:	4770      	bx	lr

08002148 <_lseek>:
}

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002148:	2000      	movs	r0, #0
 800214a:	4770      	bx	lr

0800214c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <SystemInit+0x40>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	f042 0201 	orr.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <SystemInit+0x44>)
 800215a:	400a      	ands	r2, r1
 800215c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002164:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002168:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002170:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002178:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800217a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800217e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002180:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <SystemInit+0x48>)
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	f8ff0000 	.word	0xf8ff0000
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <MX_TIM4_Init>:

	HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void) {
 8002198:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 9;
 800219a:	2309      	movs	r3, #9
	htim4.Instance = TIM4;
 800219c:	4816      	ldr	r0, [pc, #88]	; (80021f8 <MX_TIM4_Init+0x60>)
	htim4.Init.Prescaler = 9;
 800219e:	4917      	ldr	r1, [pc, #92]	; (80021fc <MX_TIM4_Init+0x64>)
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 7999;
 80021a0:	f641 723f 	movw	r2, #7999	; 0x1f3f
	htim4.Init.Prescaler = 9;
 80021a4:	e880 000a 	stmia.w	r0, {r1, r3}
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a8:	2300      	movs	r3, #0
	htim4.Init.Period = 7999;
 80021aa:	60c2      	str	r2, [r0, #12]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ac:	6083      	str	r3, [r0, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ae:	6103      	str	r3, [r0, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b0:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80021b2:	f7ff fa3b 	bl	800162c <HAL_TIM_Base_Init>
 80021b6:	b118      	cbz	r0, 80021c0 <MX_TIM4_Init+0x28>
		_Error_Handler(__FILE__, __LINE__);
 80021b8:	2185      	movs	r1, #133	; 0x85
 80021ba:	4811      	ldr	r0, [pc, #68]	; (8002200 <MX_TIM4_Init+0x68>)
 80021bc:	f7ff ff22 	bl	8002004 <_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c4:	a906      	add	r1, sp, #24
 80021c6:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80021ca:	480b      	ldr	r0, [pc, #44]	; (80021f8 <MX_TIM4_Init+0x60>)
 80021cc:	f7ff f881 	bl	80012d2 <HAL_TIM_ConfigClockSource>
 80021d0:	b118      	cbz	r0, 80021da <MX_TIM4_Init+0x42>
		_Error_Handler(__FILE__, __LINE__);
 80021d2:	218a      	movs	r1, #138	; 0x8a
 80021d4:	480a      	ldr	r0, [pc, #40]	; (8002200 <MX_TIM4_Init+0x68>)
 80021d6:	f7ff ff15 	bl	8002004 <_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021da:	2300      	movs	r3, #0
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80021dc:	4669      	mov	r1, sp
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <MX_TIM4_Init+0x60>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e0:	9300      	str	r3, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e2:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80021e4:	f7ff fb14 	bl	8001810 <HAL_TIMEx_MasterConfigSynchronization>
 80021e8:	b118      	cbz	r0, 80021f2 <MX_TIM4_Init+0x5a>
			!= HAL_OK) {
		_Error_Handler(__FILE__, __LINE__);
 80021ea:	2191      	movs	r1, #145	; 0x91
 80021ec:	4804      	ldr	r0, [pc, #16]	; (8002200 <MX_TIM4_Init+0x68>)
 80021ee:	f7ff ff09 	bl	8002004 <_Error_Handler>
	}

}
 80021f2:	b007      	add	sp, #28
 80021f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80021f8:	20000134 	.word	0x20000134
 80021fc:	40000800 	.word	0x40000800
 8002200:	08002ead 	.word	0x08002ead

08002204 <HAL_TIM_PWM_MspInit>:

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle) {

	if (tim_pwmHandle->Instance == TIM2) {
 8002204:	6803      	ldr	r3, [r0, #0]
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle) {
 8002206:	b084      	sub	sp, #16
	if (tim_pwmHandle->Instance == TIM2) {
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220c:	d10c      	bne.n	8002228 <HAL_TIM_PWM_MspInit+0x24>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE()
 800220e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	61da      	str	r2, [r3, #28]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	9b01      	ldr	r3, [sp, #4]
		;
		/* USER CODE BEGIN TIM5_MspInit 1 */

		/* USER CODE END TIM5_MspInit 1 */
	}
}
 8002224:	b004      	add	sp, #16
 8002226:	4770      	bx	lr
	} else if (tim_pwmHandle->Instance == TIM3) {
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <HAL_TIM_PWM_MspInit+0x5c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10a      	bne.n	8002244 <HAL_TIM_PWM_MspInit+0x40>
		__HAL_RCC_TIM3_CLK_ENABLE()
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HAL_TIM_PWM_MspInit+0x60>)
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	f042 0202 	orr.w	r2, r2, #2
 8002236:	61da      	str	r2, [r3, #28]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	9b02      	ldr	r3, [sp, #8]
 8002242:	e7ef      	b.n	8002224 <HAL_TIM_PWM_MspInit+0x20>
	} else if (tim_pwmHandle->Instance == TIM5) {
 8002244:	4a08      	ldr	r2, [pc, #32]	; (8002268 <HAL_TIM_PWM_MspInit+0x64>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d1ec      	bne.n	8002224 <HAL_TIM_PWM_MspInit+0x20>
		__HAL_RCC_TIM5_CLK_ENABLE()
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_TIM_PWM_MspInit+0x60>)
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	f042 0208 	orr.w	r2, r2, #8
 8002252:	61da      	str	r2, [r3, #28]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	9303      	str	r3, [sp, #12]
 800225c:	9b03      	ldr	r3, [sp, #12]
}
 800225e:	e7e1      	b.n	8002224 <HAL_TIM_PWM_MspInit+0x20>
 8002260:	40000400 	.word	0x40000400
 8002264:	40021000 	.word	0x40021000
 8002268:	40000c00 	.word	0x40000c00

0800226c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle) {
 800226c:	b507      	push	{r0, r1, r2, lr}

	if (tim_baseHandle->Instance == TIM4) {
 800226e:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <HAL_TIM_Base_MspInit+0x38>)
 8002270:	6802      	ldr	r2, [r0, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d112      	bne.n	800229c <HAL_TIM_Base_MspInit+0x30>
		/* USER CODE BEGIN TIM4_MspInit 0 */

		/* USER CODE END TIM4_MspInit 0 */
		/* TIM4 clock enable */
		__HAL_RCC_TIM4_CLK_ENABLE()
 8002276:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800227a:	69da      	ldr	r2, [r3, #28]
		;

		/* TIM4 interrupt Init */
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800227c:	201e      	movs	r0, #30
		__HAL_RCC_TIM4_CLK_ENABLE()
 800227e:	f042 0204 	orr.w	r2, r2, #4
 8002282:	61da      	str	r2, [r3, #28]
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002284:	2200      	movs	r2, #0
		__HAL_RCC_TIM4_CLK_ENABLE()
 8002286:	69db      	ldr	r3, [r3, #28]
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002288:	4611      	mov	r1, r2
		__HAL_RCC_TIM4_CLK_ENABLE()
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002292:	f7fe fa9f 	bl	80007d4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002296:	201e      	movs	r0, #30
 8002298:	f7fe fad0 	bl	800083c <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM4_MspInit 1 */

		/* USER CODE END TIM4_MspInit 1 */
	}
}
 800229c:	b003      	add	sp, #12
 800229e:	f85d fb04 	ldr.w	pc, [sp], #4
 80022a2:	bf00      	nop
 80022a4:	40000800 	.word	0x40000800

080022a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle) {
 80022a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	GPIO_InitTypeDef GPIO_InitStruct;
	if (timHandle->Instance == TIM2) {
 80022aa:	6803      	ldr	r3, [r0, #0]
 80022ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b0:	d115      	bne.n	80022de <HAL_TIM_MspPostInit+0x36>

		/* USER CODE END TIM2_MspPostInit 0 */
		/**TIM2 GPIO Configuration
		 PB10     ------> TIM2_CH3
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b6:	9300      	str	r3, [sp, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	4669      	mov	r1, sp
 80022bc:	4818      	ldr	r0, [pc, #96]	; (8002320 <HAL_TIM_MspPostInit+0x78>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	f7fe faef 	bl	80008a4 <HAL_GPIO_Init>

		__HAL_AFIO_REMAP_TIM2_PARTIAL_2()
 80022c6:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HAL_TIM_MspPostInit+0x7c>)
 80022c8:	6853      	ldr	r3, [r2, #4]
 80022ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
		GPIO_InitStruct.Pin = GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

		__HAL_AFIO_REMAP_TIM3_ENABLE()
 80022d6:	6053      	str	r3, [r2, #4]
		/* USER CODE BEGIN TIM5_MspPostInit 1 */

		/* USER CODE END TIM5_MspPostInit 1 */
	}

}
 80022d8:	b005      	add	sp, #20
 80022da:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (timHandle->Instance == TIM3) {
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_TIM_MspPostInit+0x80>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d110      	bne.n	8002306 <HAL_TIM_MspPostInit+0x5e>
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e8:	9300      	str	r3, [sp, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ec:	4669      	mov	r1, sp
 80022ee:	480f      	ldr	r0, [pc, #60]	; (800232c <HAL_TIM_MspPostInit+0x84>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f4:	f7fe fad6 	bl	80008a4 <HAL_GPIO_Init>
		__HAL_AFIO_REMAP_TIM3_ENABLE()
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_TIM_MspPostInit+0x7c>)
 80022fa:	6853      	ldr	r3, [r2, #4]
 80022fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002300:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002304:	e7e7      	b.n	80022d6 <HAL_TIM_MspPostInit+0x2e>
	} else if (timHandle->Instance == TIM5) {
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <HAL_TIM_MspPostInit+0x88>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d1e5      	bne.n	80022d8 <HAL_TIM_MspPostInit+0x30>
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800230c:	2308      	movs	r3, #8
 800230e:	9300      	str	r3, [sp, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	4669      	mov	r1, sp
 8002314:	4807      	ldr	r0, [pc, #28]	; (8002334 <HAL_TIM_MspPostInit+0x8c>)
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f7fe fac3 	bl	80008a4 <HAL_GPIO_Init>
}
 800231e:	e7db      	b.n	80022d8 <HAL_TIM_MspPostInit+0x30>
 8002320:	40010c00 	.word	0x40010c00
 8002324:	40010000 	.word	0x40010000
 8002328:	40000400 	.word	0x40000400
 800232c:	40011000 	.word	0x40011000
 8002330:	40000c00 	.word	0x40000c00
 8002334:	40010800 	.word	0x40010800

08002338 <MX_TIM2_Init>:
	htim2.Init.Prescaler = 6399;
 8002338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800233c:	f641 0cff 	movw	ip, #6399	; 0x18ff
	htim2.Instance = TIM2;
 8002340:	4818      	ldr	r0, [pc, #96]	; (80023a4 <MX_TIM2_Init+0x6c>)
void MX_TIM2_Init(void) {
 8002342:	b510      	push	{r4, lr}
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002344:	2400      	movs	r4, #0
	htim2.Init.Prescaler = 6399;
 8002346:	e880 1008 	stmia.w	r0, {r3, ip}
	htim2.Init.Period = 9;
 800234a:	2309      	movs	r3, #9
void MX_TIM2_Init(void) {
 800234c:	b08a      	sub	sp, #40	; 0x28
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234e:	6084      	str	r4, [r0, #8]
	htim2.Init.Period = 9;
 8002350:	60c3      	str	r3, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002352:	6104      	str	r4, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002354:	6184      	str	r4, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002356:	f7ff f983 	bl	8001660 <HAL_TIM_PWM_Init>
 800235a:	b118      	cbz	r0, 8002364 <MX_TIM2_Init+0x2c>
		_Error_Handler(__FILE__, __LINE__);
 800235c:	2141      	movs	r1, #65	; 0x41
 800235e:	4812      	ldr	r0, [pc, #72]	; (80023a8 <MX_TIM2_Init+0x70>)
 8002360:	f7ff fe50 	bl	8002004 <_Error_Handler>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002364:	a901      	add	r1, sp, #4
 8002366:	480f      	ldr	r0, [pc, #60]	; (80023a4 <MX_TIM2_Init+0x6c>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002368:	9401      	str	r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236a:	9402      	str	r4, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800236c:	f7ff fa50 	bl	8001810 <HAL_TIMEx_MasterConfigSynchronization>
 8002370:	b118      	cbz	r0, 800237a <MX_TIM2_Init+0x42>
		_Error_Handler(__FILE__, __LINE__);
 8002372:	2148      	movs	r1, #72	; 0x48
 8002374:	480c      	ldr	r0, [pc, #48]	; (80023a8 <MX_TIM2_Init+0x70>)
 8002376:	f7ff fe45 	bl	8002004 <_Error_Handler>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800237a:	2360      	movs	r3, #96	; 0x60
 800237c:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 800237e:	2300      	movs	r3, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8002380:	2208      	movs	r2, #8
 8002382:	a903      	add	r1, sp, #12
 8002384:	4807      	ldr	r0, [pc, #28]	; (80023a4 <MX_TIM2_Init+0x6c>)
	sConfigOC.Pulse = 0;
 8002386:	9304      	str	r3, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002388:	9305      	str	r3, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800238a:	9307      	str	r3, [sp, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 800238c:	f7ff f9b8 	bl	8001700 <HAL_TIM_PWM_ConfigChannel>
 8002390:	b118      	cbz	r0, 800239a <MX_TIM2_Init+0x62>
		_Error_Handler(__FILE__, __LINE__);
 8002392:	2151      	movs	r1, #81	; 0x51
 8002394:	4804      	ldr	r0, [pc, #16]	; (80023a8 <MX_TIM2_Init+0x70>)
 8002396:	f7ff fe35 	bl	8002004 <_Error_Handler>
	HAL_TIM_MspPostInit(&htim2);
 800239a:	4802      	ldr	r0, [pc, #8]	; (80023a4 <MX_TIM2_Init+0x6c>)
 800239c:	f7ff ff84 	bl	80022a8 <HAL_TIM_MspPostInit>
}
 80023a0:	b00a      	add	sp, #40	; 0x28
 80023a2:	bd10      	pop	{r4, pc}
 80023a4:	20000218 	.word	0x20000218
 80023a8:	08002ead 	.word	0x08002ead

080023ac <MX_TIM3_Init>:
	htim3.Init.Prescaler = 6399;
 80023ac:	f641 0cff 	movw	ip, #6399	; 0x18ff
	htim3.Instance = TIM3;
 80023b0:	4819      	ldr	r0, [pc, #100]	; (8002418 <MX_TIM3_Init+0x6c>)
	htim3.Init.Prescaler = 6399;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_TIM3_Init+0x70>)
void MX_TIM3_Init(void) {
 80023b4:	b510      	push	{r4, lr}
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b6:	2400      	movs	r4, #0
	htim3.Init.Prescaler = 6399;
 80023b8:	e880 1008 	stmia.w	r0, {r3, ip}
	htim3.Init.Period = 9;
 80023bc:	2309      	movs	r3, #9
void MX_TIM3_Init(void) {
 80023be:	b08a      	sub	sp, #40	; 0x28
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c0:	6084      	str	r4, [r0, #8]
	htim3.Init.Period = 9;
 80023c2:	60c3      	str	r3, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c4:	6104      	str	r4, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c6:	6184      	str	r4, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80023c8:	f7ff f94a 	bl	8001660 <HAL_TIM_PWM_Init>
 80023cc:	b118      	cbz	r0, 80023d6 <MX_TIM3_Init+0x2a>
		_Error_Handler(__FILE__, __LINE__);
 80023ce:	2163      	movs	r1, #99	; 0x63
 80023d0:	4813      	ldr	r0, [pc, #76]	; (8002420 <MX_TIM3_Init+0x74>)
 80023d2:	f7ff fe17 	bl	8002004 <_Error_Handler>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80023d6:	a901      	add	r1, sp, #4
 80023d8:	480f      	ldr	r0, [pc, #60]	; (8002418 <MX_TIM3_Init+0x6c>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023da:	9401      	str	r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023dc:	9402      	str	r4, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80023de:	f7ff fa17 	bl	8001810 <HAL_TIMEx_MasterConfigSynchronization>
 80023e2:	b118      	cbz	r0, 80023ec <MX_TIM3_Init+0x40>
		_Error_Handler(__FILE__, __LINE__);
 80023e4:	216a      	movs	r1, #106	; 0x6a
 80023e6:	480e      	ldr	r0, [pc, #56]	; (8002420 <MX_TIM3_Init+0x74>)
 80023e8:	f7ff fe0c 	bl	8002004 <_Error_Handler>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ec:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 80023ee:	220c      	movs	r2, #12
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f0:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 80023f2:	2300      	movs	r3, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 80023f4:	eb0d 0102 	add.w	r1, sp, r2
 80023f8:	4807      	ldr	r0, [pc, #28]	; (8002418 <MX_TIM3_Init+0x6c>)
	sConfigOC.Pulse = 0;
 80023fa:	9304      	str	r3, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023fc:	9305      	str	r3, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023fe:	9307      	str	r3, [sp, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8002400:	f7ff f97e 	bl	8001700 <HAL_TIM_PWM_ConfigChannel>
 8002404:	b118      	cbz	r0, 800240e <MX_TIM3_Init+0x62>
		_Error_Handler(__FILE__, __LINE__);
 8002406:	2173      	movs	r1, #115	; 0x73
 8002408:	4805      	ldr	r0, [pc, #20]	; (8002420 <MX_TIM3_Init+0x74>)
 800240a:	f7ff fdfb 	bl	8002004 <_Error_Handler>
	HAL_TIM_MspPostInit(&htim3);
 800240e:	4802      	ldr	r0, [pc, #8]	; (8002418 <MX_TIM3_Init+0x6c>)
 8002410:	f7ff ff4a 	bl	80022a8 <HAL_TIM_MspPostInit>
}
 8002414:	b00a      	add	sp, #40	; 0x28
 8002416:	bd10      	pop	{r4, pc}
 8002418:	200001bc 	.word	0x200001bc
 800241c:	40000400 	.word	0x40000400
 8002420:	08002ead 	.word	0x08002ead

08002424 <MX_TIM5_Init>:
void MX_TIM5_Init(void) {
 8002424:	b510      	push	{r4, lr}
	htim5.Init.Prescaler = 0;
 8002426:	2400      	movs	r4, #0
	htim5.Instance = TIM5;
 8002428:	4818      	ldr	r0, [pc, #96]	; (800248c <MX_TIM5_Init+0x68>)
	htim5.Init.Prescaler = 0;
 800242a:	4b19      	ldr	r3, [pc, #100]	; (8002490 <MX_TIM5_Init+0x6c>)
void MX_TIM5_Init(void) {
 800242c:	b08a      	sub	sp, #40	; 0x28
	htim5.Init.Prescaler = 0;
 800242e:	e880 0018 	stmia.w	r0, {r3, r4}
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002432:	6084      	str	r4, [r0, #8]
	htim5.Init.Period = 0;
 8002434:	60c4      	str	r4, [r0, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002436:	6104      	str	r4, [r0, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002438:	6184      	str	r4, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 800243a:	f7ff f911 	bl	8001660 <HAL_TIM_PWM_Init>
 800243e:	b118      	cbz	r0, 8002448 <MX_TIM5_Init+0x24>
		_Error_Handler(__FILE__, __LINE__);
 8002440:	21a1      	movs	r1, #161	; 0xa1
 8002442:	4814      	ldr	r0, [pc, #80]	; (8002494 <MX_TIM5_Init+0x70>)
 8002444:	f7ff fdde 	bl	8002004 <_Error_Handler>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002448:	a901      	add	r1, sp, #4
 800244a:	4810      	ldr	r0, [pc, #64]	; (800248c <MX_TIM5_Init+0x68>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800244c:	9401      	str	r4, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800244e:	9402      	str	r4, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002450:	f7ff f9de 	bl	8001810 <HAL_TIMEx_MasterConfigSynchronization>
 8002454:	b118      	cbz	r0, 800245e <MX_TIM5_Init+0x3a>
		_Error_Handler(__FILE__, __LINE__);
 8002456:	21a8      	movs	r1, #168	; 0xa8
 8002458:	480e      	ldr	r0, [pc, #56]	; (8002494 <MX_TIM5_Init+0x70>)
 800245a:	f7ff fdd3 	bl	8002004 <_Error_Handler>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800245e:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 8002460:	220c      	movs	r2, #12
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002462:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 8002464:	2300      	movs	r3, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 8002466:	eb0d 0102 	add.w	r1, sp, r2
 800246a:	4808      	ldr	r0, [pc, #32]	; (800248c <MX_TIM5_Init+0x68>)
	sConfigOC.Pulse = 0;
 800246c:	9304      	str	r3, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800246e:	9305      	str	r3, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002470:	9307      	str	r3, [sp, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 8002472:	f7ff f945 	bl	8001700 <HAL_TIM_PWM_ConfigChannel>
 8002476:	b118      	cbz	r0, 8002480 <MX_TIM5_Init+0x5c>
		_Error_Handler(__FILE__, __LINE__);
 8002478:	21b1      	movs	r1, #177	; 0xb1
 800247a:	4806      	ldr	r0, [pc, #24]	; (8002494 <MX_TIM5_Init+0x70>)
 800247c:	f7ff fdc2 	bl	8002004 <_Error_Handler>
	HAL_TIM_MspPostInit(&htim5);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <MX_TIM5_Init+0x68>)
 8002482:	f7ff ff11 	bl	80022a8 <HAL_TIM_MspPostInit>
}
 8002486:	b00a      	add	sp, #40	; 0x28
 8002488:	bd10      	pop	{r4, pc}
 800248a:	bf00      	nop
 800248c:	2000017c 	.word	0x2000017c
 8002490:	40000c00 	.word	0x40000c00
 8002494:	08002ead 	.word	0x08002ead

08002498 <Motor_Enable>:
}

/* USER CODE BEGIN 1 */
void Motor_Enable(void) {
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 1;
 8002498:	2260      	movs	r2, #96	; 0x60
 800249a:	2301      	movs	r3, #1
void Motor_Enable(void) {
 800249c:	b510      	push	{r4, lr}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800249e:	4c24      	ldr	r4, [pc, #144]	; (8002530 <Motor_Enable+0x98>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80024a0:	4824      	ldr	r0, [pc, #144]	; (8002534 <Motor_Enable+0x9c>)
	sConfigOC.Pulse = 1;
 80024a2:	e884 000c 	stmia.w	r4, {r2, r3}
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a6:	2300      	movs	r3, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80024a8:	2208      	movs	r2, #8
 80024aa:	4621      	mov	r1, r4
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ac:	60a3      	str	r3, [r4, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ae:	6123      	str	r3, [r4, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80024b0:	f7ff f926 	bl	8001700 <HAL_TIM_PWM_ConfigChannel>
 80024b4:	b120      	cbz	r0, 80024c0 <Motor_Enable+0x28>
			!= HAL_OK) {
		_Error_Handler(__FILE__, __LINE__);
 80024b6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80024ba:	481f      	ldr	r0, [pc, #124]	; (8002538 <Motor_Enable+0xa0>)
 80024bc:	f7ff fda2 	bl	8002004 <_Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = 1;
 80024c0:	2060      	movs	r0, #96	; 0x60
 80024c2:	2301      	movs	r3, #1
 80024c4:	e884 0009 	stmia.w	r4, {r0, r3}
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c8:	2300      	movs	r3, #0
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 80024ca:	220c      	movs	r2, #12
 80024cc:	4918      	ldr	r1, [pc, #96]	; (8002530 <Motor_Enable+0x98>)
 80024ce:	481b      	ldr	r0, [pc, #108]	; (800253c <Motor_Enable+0xa4>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024d0:	60a3      	str	r3, [r4, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024d2:	6123      	str	r3, [r4, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 80024d4:	f7ff f914 	bl	8001700 <HAL_TIM_PWM_ConfigChannel>
 80024d8:	b120      	cbz	r0, 80024e4 <Motor_Enable+0x4c>
			!= HAL_OK) {
		_Error_Handler(__FILE__, __LINE__);
 80024da:	f240 116b 	movw	r1, #363	; 0x16b
 80024de:	4816      	ldr	r0, [pc, #88]	; (8002538 <Motor_Enable+0xa0>)
 80024e0:	f7ff fd90 	bl	8002004 <_Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK) {
 80024e4:	2108      	movs	r1, #8
 80024e6:	4813      	ldr	r0, [pc, #76]	; (8002534 <Motor_Enable+0x9c>)
 80024e8:	f7ff f978 	bl	80017dc <HAL_TIM_PWM_Start>
 80024ec:	b120      	cbz	r0, 80024f8 <Motor_Enable+0x60>
		Error_Handler();
 80024ee:	f240 116f 	movw	r1, #367	; 0x16f
 80024f2:	4811      	ldr	r0, [pc, #68]	; (8002538 <Motor_Enable+0xa0>)
 80024f4:	f7ff fd86 	bl	8002004 <_Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK) {
 80024f8:	210c      	movs	r1, #12
 80024fa:	4810      	ldr	r0, [pc, #64]	; (800253c <Motor_Enable+0xa4>)
 80024fc:	f7ff f96e 	bl	80017dc <HAL_TIM_PWM_Start>
 8002500:	b120      	cbz	r0, 800250c <Motor_Enable+0x74>
		Error_Handler();
 8002502:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8002506:	480c      	ldr	r0, [pc, #48]	; (8002538 <Motor_Enable+0xa0>)
 8002508:	f7ff fd7c 	bl	8002004 <_Error_Handler>
	}

	HAL_GPIO_WritePin(motor_en_GPIO_Port,motor_en_Pin,GPIO_PIN_SET);
 800250c:	2201      	movs	r2, #1
 800250e:	2140      	movs	r1, #64	; 0x40
 8002510:	480b      	ldr	r0, [pc, #44]	; (8002540 <Motor_Enable+0xa8>)
 8002512:	f7fe fab3 	bl	8000a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(r_cw_GPIO_Port,r_cw_Pin,GPIO_PIN_RESET);
 8002516:	2200      	movs	r2, #0
 8002518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800251c:	4808      	ldr	r0, [pc, #32]	; (8002540 <Motor_Enable+0xa8>)
 800251e:	f7fe faad 	bl	8000a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(l_cw_GPIO_Port,l_cw_Pin,GPIO_PIN_SET);
}
 8002522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(l_cw_GPIO_Port,l_cw_Pin,GPIO_PIN_SET);
 8002526:	2201      	movs	r2, #1
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	4805      	ldr	r0, [pc, #20]	; (8002540 <Motor_Enable+0xa8>)
 800252c:	f7fe baa6 	b.w	8000a7c <HAL_GPIO_WritePin>
 8002530:	200001fc 	.word	0x200001fc
 8002534:	20000218 	.word	0x20000218
 8002538:	08002ead 	.word	0x08002ead
 800253c:	200001bc 	.word	0x200001bc
 8002540:	40011000 	.word	0x40011000

08002544 <Motor_Control>:

void Motor_Control(int left ,int right){
 8002544:	b538      	push	{r3, r4, r5, lr}
	if(left>0){
 8002546:	1e05      	subs	r5, r0, #0
void Motor_Control(int left ,int right){
 8002548:	460c      	mov	r4, r1
	if(left>0){
 800254a:	dd11      	ble.n	8002570 <Motor_Control+0x2c>
		HAL_GPIO_WritePin(l_cw_GPIO_Port,l_cw_Pin,GPIO_PIN_SET);
 800254c:	2201      	movs	r2, #1
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	480f      	ldr	r0, [pc, #60]	; (8002590 <Motor_Control+0x4c>)
 8002552:	f7fe fa93 	bl	8000a7c <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(l_cw_GPIO_Port,l_cw_Pin,GPIO_PIN_RESET);
		left=-1*left;
	}
	if(right>0){
 8002556:	2c00      	cmp	r4, #0
 8002558:	dd11      	ble.n	800257e <Motor_Control+0x3a>
		HAL_GPIO_WritePin(r_cw_GPIO_Port,r_cw_Pin,GPIO_PIN_RESET);
 800255a:	2200      	movs	r2, #0
 800255c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002560:	480b      	ldr	r0, [pc, #44]	; (8002590 <Motor_Control+0x4c>)
 8002562:	f7fe fa8b 	bl	8000a7c <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(r_cw_GPIO_Port,r_cw_Pin,GPIO_PIN_SET);
		right=-1*right;
	}

	htim2.Init.Prescaler = left;
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <Motor_Control+0x50>)
 8002568:	605d      	str	r5, [r3, #4]
	htim3.Init.Prescaler = right;
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <Motor_Control+0x54>)
 800256c:	605c      	str	r4, [r3, #4]
 800256e:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(l_cw_GPIO_Port,l_cw_Pin,GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	2180      	movs	r1, #128	; 0x80
 8002574:	4806      	ldr	r0, [pc, #24]	; (8002590 <Motor_Control+0x4c>)
 8002576:	f7fe fa81 	bl	8000a7c <HAL_GPIO_WritePin>
		left=-1*left;
 800257a:	426d      	negs	r5, r5
 800257c:	e7eb      	b.n	8002556 <Motor_Control+0x12>
		HAL_GPIO_WritePin(r_cw_GPIO_Port,r_cw_Pin,GPIO_PIN_SET);
 800257e:	2201      	movs	r2, #1
 8002580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <Motor_Control+0x4c>)
 8002586:	f7fe fa79 	bl	8000a7c <HAL_GPIO_WritePin>
		right=-1*right;
 800258a:	4264      	negs	r4, r4
 800258c:	e7eb      	b.n	8002566 <Motor_Control+0x22>
 800258e:	bf00      	nop
 8002590:	40011000 	.word	0x40011000
 8002594:	20000218 	.word	0x20000218
 8002598:	200001bc 	.word	0x200001bc

0800259c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800259c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 800259e:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart1.Instance = USART1;
 80025a2:	480b      	ldr	r0, [pc, #44]	; (80025d0 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 9600;
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025a6:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 80025a8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025ac:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025ae:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025b0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025b2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025b4:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025ba:	f7ff fa13 	bl	80019e4 <HAL_UART_Init>
 80025be:	b128      	cbz	r0, 80025cc <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80025c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80025c4:	2142      	movs	r1, #66	; 0x42
 80025c6:	4804      	ldr	r0, [pc, #16]	; (80025d8 <MX_USART1_UART_Init+0x3c>)
 80025c8:	f7ff bd1c 	b.w	8002004 <_Error_Handler>
 80025cc:	bd08      	pop	{r3, pc}
 80025ce:	bf00      	nop
 80025d0:	20000258 	.word	0x20000258
 80025d4:	40013800 	.word	0x40013800
 80025d8:	08002eba 	.word	0x08002eba

080025dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80025de:	6802      	ldr	r2, [r0, #0]
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_UART_MspInit+0x50>)
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d11f      	bne.n	8002626 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025e6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80025ea:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025f2:	619a      	str	r2, [r3, #24]
 80025f4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	480e      	ldr	r0, [pc, #56]	; (8002630 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80025f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002604:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260e:	f7fe f949 	bl	80008a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002616:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002618:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261a:	a902      	add	r1, sp, #8
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	f7fe f93f 	bl	80008a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002626:	b007      	add	sp, #28
 8002628:	f85d fb04 	ldr.w	pc, [sp], #4
 800262c:	40013800 	.word	0x40013800
 8002630:	40010800 	.word	0x40010800

08002634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002634:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002636:	e003      	b.n	8002640 <LoopCopyDataInit>

08002638 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800263a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800263c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800263e:	3104      	adds	r1, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002640:	480a      	ldr	r0, [pc, #40]	; (800266c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002644:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002646:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002648:	d3f6      	bcc.n	8002638 <CopyDataInit>
  ldr r2, =_sbss
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800264c:	e002      	b.n	8002654 <LoopFillZerobss>

0800264e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800264e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002650:	f842 3b04 	str.w	r3, [r2], #4

08002654 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002656:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002658:	d3f9      	bcc.n	800264e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800265a:	f7ff fd77 	bl	800214c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800265e:	f000 f815 	bl	800268c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002662:	f7ff fc97 	bl	8001f94 <main>
  bx lr
 8002666:	4770      	bx	lr
  ldr r3, =_sidata
 8002668:	08002f38 	.word	0x08002f38
  ldr r0, =_sdata
 800266c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002670:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8002674:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8002678:	2000029c 	.word	0x2000029c

0800267c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800267c:	e7fe      	b.n	800267c <ADC1_2_IRQHandler>
	...

08002680 <__errno>:
 8002680:	4b01      	ldr	r3, [pc, #4]	; (8002688 <__errno+0x8>)
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000014 	.word	0x20000014

0800268c <__libc_init_array>:
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	2500      	movs	r5, #0
 8002690:	4e0c      	ldr	r6, [pc, #48]	; (80026c4 <__libc_init_array+0x38>)
 8002692:	4c0d      	ldr	r4, [pc, #52]	; (80026c8 <__libc_init_array+0x3c>)
 8002694:	1ba4      	subs	r4, r4, r6
 8002696:	10a4      	asrs	r4, r4, #2
 8002698:	42a5      	cmp	r5, r4
 800269a:	d109      	bne.n	80026b0 <__libc_init_array+0x24>
 800269c:	f000 fbd8 	bl	8002e50 <_init>
 80026a0:	2500      	movs	r5, #0
 80026a2:	4e0a      	ldr	r6, [pc, #40]	; (80026cc <__libc_init_array+0x40>)
 80026a4:	4c0a      	ldr	r4, [pc, #40]	; (80026d0 <__libc_init_array+0x44>)
 80026a6:	1ba4      	subs	r4, r4, r6
 80026a8:	10a4      	asrs	r4, r4, #2
 80026aa:	42a5      	cmp	r5, r4
 80026ac:	d105      	bne.n	80026ba <__libc_init_array+0x2e>
 80026ae:	bd70      	pop	{r4, r5, r6, pc}
 80026b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026b4:	4798      	blx	r3
 80026b6:	3501      	adds	r5, #1
 80026b8:	e7ee      	b.n	8002698 <__libc_init_array+0xc>
 80026ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026be:	4798      	blx	r3
 80026c0:	3501      	adds	r5, #1
 80026c2:	e7f2      	b.n	80026aa <__libc_init_array+0x1e>
 80026c4:	08002f30 	.word	0x08002f30
 80026c8:	08002f30 	.word	0x08002f30
 80026cc:	08002f30 	.word	0x08002f30
 80026d0:	08002f34 	.word	0x08002f34

080026d4 <memset>:
 80026d4:	4603      	mov	r3, r0
 80026d6:	4402      	add	r2, r0
 80026d8:	4293      	cmp	r3, r2
 80026da:	d100      	bne.n	80026de <memset+0xa>
 80026dc:	4770      	bx	lr
 80026de:	f803 1b01 	strb.w	r1, [r3], #1
 80026e2:	e7f9      	b.n	80026d8 <memset+0x4>

080026e4 <setbuf>:
 80026e4:	2900      	cmp	r1, #0
 80026e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ea:	bf0c      	ite	eq
 80026ec:	2202      	moveq	r2, #2
 80026ee:	2200      	movne	r2, #0
 80026f0:	f000 b800 	b.w	80026f4 <setvbuf>

080026f4 <setvbuf>:
 80026f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80026f8:	461d      	mov	r5, r3
 80026fa:	4b51      	ldr	r3, [pc, #324]	; (8002840 <setvbuf+0x14c>)
 80026fc:	4604      	mov	r4, r0
 80026fe:	681e      	ldr	r6, [r3, #0]
 8002700:	460f      	mov	r7, r1
 8002702:	4690      	mov	r8, r2
 8002704:	b126      	cbz	r6, 8002710 <setvbuf+0x1c>
 8002706:	69b3      	ldr	r3, [r6, #24]
 8002708:	b913      	cbnz	r3, 8002710 <setvbuf+0x1c>
 800270a:	4630      	mov	r0, r6
 800270c:	f000 f992 	bl	8002a34 <__sinit>
 8002710:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <setvbuf+0x150>)
 8002712:	429c      	cmp	r4, r3
 8002714:	d152      	bne.n	80027bc <setvbuf+0xc8>
 8002716:	6874      	ldr	r4, [r6, #4]
 8002718:	f1b8 0f02 	cmp.w	r8, #2
 800271c:	d006      	beq.n	800272c <setvbuf+0x38>
 800271e:	f1b8 0f01 	cmp.w	r8, #1
 8002722:	f200 8089 	bhi.w	8002838 <setvbuf+0x144>
 8002726:	2d00      	cmp	r5, #0
 8002728:	f2c0 8086 	blt.w	8002838 <setvbuf+0x144>
 800272c:	4621      	mov	r1, r4
 800272e:	4630      	mov	r0, r6
 8002730:	f000 f916 	bl	8002960 <_fflush_r>
 8002734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002736:	b141      	cbz	r1, 800274a <setvbuf+0x56>
 8002738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800273c:	4299      	cmp	r1, r3
 800273e:	d002      	beq.n	8002746 <setvbuf+0x52>
 8002740:	4630      	mov	r0, r6
 8002742:	f000 fa2d 	bl	8002ba0 <_free_r>
 8002746:	2300      	movs	r3, #0
 8002748:	6363      	str	r3, [r4, #52]	; 0x34
 800274a:	2300      	movs	r3, #0
 800274c:	61a3      	str	r3, [r4, #24]
 800274e:	6063      	str	r3, [r4, #4]
 8002750:	89a3      	ldrh	r3, [r4, #12]
 8002752:	061b      	lsls	r3, r3, #24
 8002754:	d503      	bpl.n	800275e <setvbuf+0x6a>
 8002756:	6921      	ldr	r1, [r4, #16]
 8002758:	4630      	mov	r0, r6
 800275a:	f000 fa21 	bl	8002ba0 <_free_r>
 800275e:	89a3      	ldrh	r3, [r4, #12]
 8002760:	f1b8 0f02 	cmp.w	r8, #2
 8002764:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002768:	f023 0303 	bic.w	r3, r3, #3
 800276c:	81a3      	strh	r3, [r4, #12]
 800276e:	d05d      	beq.n	800282c <setvbuf+0x138>
 8002770:	ab01      	add	r3, sp, #4
 8002772:	466a      	mov	r2, sp
 8002774:	4621      	mov	r1, r4
 8002776:	4630      	mov	r0, r6
 8002778:	f000 f9e6 	bl	8002b48 <__swhatbuf_r>
 800277c:	89a3      	ldrh	r3, [r4, #12]
 800277e:	4318      	orrs	r0, r3
 8002780:	81a0      	strh	r0, [r4, #12]
 8002782:	bb2d      	cbnz	r5, 80027d0 <setvbuf+0xdc>
 8002784:	9d00      	ldr	r5, [sp, #0]
 8002786:	4628      	mov	r0, r5
 8002788:	f000 fa02 	bl	8002b90 <malloc>
 800278c:	4607      	mov	r7, r0
 800278e:	2800      	cmp	r0, #0
 8002790:	d14e      	bne.n	8002830 <setvbuf+0x13c>
 8002792:	f8dd 9000 	ldr.w	r9, [sp]
 8002796:	45a9      	cmp	r9, r5
 8002798:	d13c      	bne.n	8002814 <setvbuf+0x120>
 800279a:	f04f 30ff 	mov.w	r0, #4294967295
 800279e:	89a3      	ldrh	r3, [r4, #12]
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	81a3      	strh	r3, [r4, #12]
 80027a6:	2300      	movs	r3, #0
 80027a8:	60a3      	str	r3, [r4, #8]
 80027aa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027ae:	6023      	str	r3, [r4, #0]
 80027b0:	6123      	str	r3, [r4, #16]
 80027b2:	2301      	movs	r3, #1
 80027b4:	6163      	str	r3, [r4, #20]
 80027b6:	b003      	add	sp, #12
 80027b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027bc:	4b22      	ldr	r3, [pc, #136]	; (8002848 <setvbuf+0x154>)
 80027be:	429c      	cmp	r4, r3
 80027c0:	d101      	bne.n	80027c6 <setvbuf+0xd2>
 80027c2:	68b4      	ldr	r4, [r6, #8]
 80027c4:	e7a8      	b.n	8002718 <setvbuf+0x24>
 80027c6:	4b21      	ldr	r3, [pc, #132]	; (800284c <setvbuf+0x158>)
 80027c8:	429c      	cmp	r4, r3
 80027ca:	bf08      	it	eq
 80027cc:	68f4      	ldreq	r4, [r6, #12]
 80027ce:	e7a3      	b.n	8002718 <setvbuf+0x24>
 80027d0:	2f00      	cmp	r7, #0
 80027d2:	d0d8      	beq.n	8002786 <setvbuf+0x92>
 80027d4:	69b3      	ldr	r3, [r6, #24]
 80027d6:	b913      	cbnz	r3, 80027de <setvbuf+0xea>
 80027d8:	4630      	mov	r0, r6
 80027da:	f000 f92b 	bl	8002a34 <__sinit>
 80027de:	f1b8 0f01 	cmp.w	r8, #1
 80027e2:	bf08      	it	eq
 80027e4:	89a3      	ldrheq	r3, [r4, #12]
 80027e6:	6027      	str	r7, [r4, #0]
 80027e8:	bf04      	itt	eq
 80027ea:	f043 0301 	orreq.w	r3, r3, #1
 80027ee:	81a3      	strheq	r3, [r4, #12]
 80027f0:	89a3      	ldrh	r3, [r4, #12]
 80027f2:	6127      	str	r7, [r4, #16]
 80027f4:	f013 0008 	ands.w	r0, r3, #8
 80027f8:	6165      	str	r5, [r4, #20]
 80027fa:	d01b      	beq.n	8002834 <setvbuf+0x140>
 80027fc:	f013 0001 	ands.w	r0, r3, #1
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	bf1f      	itttt	ne
 8002806:	426d      	negne	r5, r5
 8002808:	60a3      	strne	r3, [r4, #8]
 800280a:	61a5      	strne	r5, [r4, #24]
 800280c:	4618      	movne	r0, r3
 800280e:	bf08      	it	eq
 8002810:	60a5      	streq	r5, [r4, #8]
 8002812:	e7d0      	b.n	80027b6 <setvbuf+0xc2>
 8002814:	4648      	mov	r0, r9
 8002816:	f000 f9bb 	bl	8002b90 <malloc>
 800281a:	4607      	mov	r7, r0
 800281c:	2800      	cmp	r0, #0
 800281e:	d0bc      	beq.n	800279a <setvbuf+0xa6>
 8002820:	89a3      	ldrh	r3, [r4, #12]
 8002822:	464d      	mov	r5, r9
 8002824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002828:	81a3      	strh	r3, [r4, #12]
 800282a:	e7d3      	b.n	80027d4 <setvbuf+0xe0>
 800282c:	2000      	movs	r0, #0
 800282e:	e7b6      	b.n	800279e <setvbuf+0xaa>
 8002830:	46a9      	mov	r9, r5
 8002832:	e7f5      	b.n	8002820 <setvbuf+0x12c>
 8002834:	60a0      	str	r0, [r4, #8]
 8002836:	e7be      	b.n	80027b6 <setvbuf+0xc2>
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	e7bb      	b.n	80027b6 <setvbuf+0xc2>
 800283e:	bf00      	nop
 8002840:	20000014 	.word	0x20000014
 8002844:	08002ef0 	.word	0x08002ef0
 8002848:	08002f10 	.word	0x08002f10
 800284c:	08002ed0 	.word	0x08002ed0

08002850 <__sflush_r>:
 8002850:	898a      	ldrh	r2, [r1, #12]
 8002852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002856:	4605      	mov	r5, r0
 8002858:	0710      	lsls	r0, r2, #28
 800285a:	460c      	mov	r4, r1
 800285c:	d45a      	bmi.n	8002914 <__sflush_r+0xc4>
 800285e:	684b      	ldr	r3, [r1, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	dc05      	bgt.n	8002870 <__sflush_r+0x20>
 8002864:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	dc02      	bgt.n	8002870 <__sflush_r+0x20>
 800286a:	2000      	movs	r0, #0
 800286c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002872:	2e00      	cmp	r6, #0
 8002874:	d0f9      	beq.n	800286a <__sflush_r+0x1a>
 8002876:	2300      	movs	r3, #0
 8002878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800287c:	682f      	ldr	r7, [r5, #0]
 800287e:	602b      	str	r3, [r5, #0]
 8002880:	d033      	beq.n	80028ea <__sflush_r+0x9a>
 8002882:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002884:	89a3      	ldrh	r3, [r4, #12]
 8002886:	075a      	lsls	r2, r3, #29
 8002888:	d505      	bpl.n	8002896 <__sflush_r+0x46>
 800288a:	6863      	ldr	r3, [r4, #4]
 800288c:	1ac0      	subs	r0, r0, r3
 800288e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002890:	b10b      	cbz	r3, 8002896 <__sflush_r+0x46>
 8002892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002894:	1ac0      	subs	r0, r0, r3
 8002896:	2300      	movs	r3, #0
 8002898:	4602      	mov	r2, r0
 800289a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800289c:	6a21      	ldr	r1, [r4, #32]
 800289e:	4628      	mov	r0, r5
 80028a0:	47b0      	blx	r6
 80028a2:	1c43      	adds	r3, r0, #1
 80028a4:	89a3      	ldrh	r3, [r4, #12]
 80028a6:	d106      	bne.n	80028b6 <__sflush_r+0x66>
 80028a8:	6829      	ldr	r1, [r5, #0]
 80028aa:	291d      	cmp	r1, #29
 80028ac:	d84b      	bhi.n	8002946 <__sflush_r+0xf6>
 80028ae:	4a2b      	ldr	r2, [pc, #172]	; (800295c <__sflush_r+0x10c>)
 80028b0:	40ca      	lsrs	r2, r1
 80028b2:	07d6      	lsls	r6, r2, #31
 80028b4:	d547      	bpl.n	8002946 <__sflush_r+0xf6>
 80028b6:	2200      	movs	r2, #0
 80028b8:	6062      	str	r2, [r4, #4]
 80028ba:	6922      	ldr	r2, [r4, #16]
 80028bc:	04d9      	lsls	r1, r3, #19
 80028be:	6022      	str	r2, [r4, #0]
 80028c0:	d504      	bpl.n	80028cc <__sflush_r+0x7c>
 80028c2:	1c42      	adds	r2, r0, #1
 80028c4:	d101      	bne.n	80028ca <__sflush_r+0x7a>
 80028c6:	682b      	ldr	r3, [r5, #0]
 80028c8:	b903      	cbnz	r3, 80028cc <__sflush_r+0x7c>
 80028ca:	6560      	str	r0, [r4, #84]	; 0x54
 80028cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028ce:	602f      	str	r7, [r5, #0]
 80028d0:	2900      	cmp	r1, #0
 80028d2:	d0ca      	beq.n	800286a <__sflush_r+0x1a>
 80028d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028d8:	4299      	cmp	r1, r3
 80028da:	d002      	beq.n	80028e2 <__sflush_r+0x92>
 80028dc:	4628      	mov	r0, r5
 80028de:	f000 f95f 	bl	8002ba0 <_free_r>
 80028e2:	2000      	movs	r0, #0
 80028e4:	6360      	str	r0, [r4, #52]	; 0x34
 80028e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028ea:	6a21      	ldr	r1, [r4, #32]
 80028ec:	2301      	movs	r3, #1
 80028ee:	4628      	mov	r0, r5
 80028f0:	47b0      	blx	r6
 80028f2:	1c41      	adds	r1, r0, #1
 80028f4:	d1c6      	bne.n	8002884 <__sflush_r+0x34>
 80028f6:	682b      	ldr	r3, [r5, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0c3      	beq.n	8002884 <__sflush_r+0x34>
 80028fc:	2b1d      	cmp	r3, #29
 80028fe:	d001      	beq.n	8002904 <__sflush_r+0xb4>
 8002900:	2b16      	cmp	r3, #22
 8002902:	d101      	bne.n	8002908 <__sflush_r+0xb8>
 8002904:	602f      	str	r7, [r5, #0]
 8002906:	e7b0      	b.n	800286a <__sflush_r+0x1a>
 8002908:	89a3      	ldrh	r3, [r4, #12]
 800290a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290e:	81a3      	strh	r3, [r4, #12]
 8002910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002914:	690f      	ldr	r7, [r1, #16]
 8002916:	2f00      	cmp	r7, #0
 8002918:	d0a7      	beq.n	800286a <__sflush_r+0x1a>
 800291a:	0793      	lsls	r3, r2, #30
 800291c:	bf18      	it	ne
 800291e:	2300      	movne	r3, #0
 8002920:	680e      	ldr	r6, [r1, #0]
 8002922:	bf08      	it	eq
 8002924:	694b      	ldreq	r3, [r1, #20]
 8002926:	eba6 0807 	sub.w	r8, r6, r7
 800292a:	600f      	str	r7, [r1, #0]
 800292c:	608b      	str	r3, [r1, #8]
 800292e:	f1b8 0f00 	cmp.w	r8, #0
 8002932:	dd9a      	ble.n	800286a <__sflush_r+0x1a>
 8002934:	4643      	mov	r3, r8
 8002936:	463a      	mov	r2, r7
 8002938:	6a21      	ldr	r1, [r4, #32]
 800293a:	4628      	mov	r0, r5
 800293c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800293e:	47b0      	blx	r6
 8002940:	2800      	cmp	r0, #0
 8002942:	dc07      	bgt.n	8002954 <__sflush_r+0x104>
 8002944:	89a3      	ldrh	r3, [r4, #12]
 8002946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800294a:	81a3      	strh	r3, [r4, #12]
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002954:	4407      	add	r7, r0
 8002956:	eba8 0800 	sub.w	r8, r8, r0
 800295a:	e7e8      	b.n	800292e <__sflush_r+0xde>
 800295c:	20400001 	.word	0x20400001

08002960 <_fflush_r>:
 8002960:	b538      	push	{r3, r4, r5, lr}
 8002962:	690b      	ldr	r3, [r1, #16]
 8002964:	4605      	mov	r5, r0
 8002966:	460c      	mov	r4, r1
 8002968:	b1db      	cbz	r3, 80029a2 <_fflush_r+0x42>
 800296a:	b118      	cbz	r0, 8002974 <_fflush_r+0x14>
 800296c:	6983      	ldr	r3, [r0, #24]
 800296e:	b90b      	cbnz	r3, 8002974 <_fflush_r+0x14>
 8002970:	f000 f860 	bl	8002a34 <__sinit>
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <_fflush_r+0x48>)
 8002976:	429c      	cmp	r4, r3
 8002978:	d109      	bne.n	800298e <_fflush_r+0x2e>
 800297a:	686c      	ldr	r4, [r5, #4]
 800297c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002980:	b17b      	cbz	r3, 80029a2 <_fflush_r+0x42>
 8002982:	4621      	mov	r1, r4
 8002984:	4628      	mov	r0, r5
 8002986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800298a:	f7ff bf61 	b.w	8002850 <__sflush_r>
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <_fflush_r+0x4c>)
 8002990:	429c      	cmp	r4, r3
 8002992:	d101      	bne.n	8002998 <_fflush_r+0x38>
 8002994:	68ac      	ldr	r4, [r5, #8]
 8002996:	e7f1      	b.n	800297c <_fflush_r+0x1c>
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <_fflush_r+0x50>)
 800299a:	429c      	cmp	r4, r3
 800299c:	bf08      	it	eq
 800299e:	68ec      	ldreq	r4, [r5, #12]
 80029a0:	e7ec      	b.n	800297c <_fflush_r+0x1c>
 80029a2:	2000      	movs	r0, #0
 80029a4:	bd38      	pop	{r3, r4, r5, pc}
 80029a6:	bf00      	nop
 80029a8:	08002ef0 	.word	0x08002ef0
 80029ac:	08002f10 	.word	0x08002f10
 80029b0:	08002ed0 	.word	0x08002ed0

080029b4 <_cleanup_r>:
 80029b4:	4901      	ldr	r1, [pc, #4]	; (80029bc <_cleanup_r+0x8>)
 80029b6:	f000 b8a9 	b.w	8002b0c <_fwalk_reent>
 80029ba:	bf00      	nop
 80029bc:	08002961 	.word	0x08002961

080029c0 <std.isra.0>:
 80029c0:	2300      	movs	r3, #0
 80029c2:	b510      	push	{r4, lr}
 80029c4:	4604      	mov	r4, r0
 80029c6:	6003      	str	r3, [r0, #0]
 80029c8:	6043      	str	r3, [r0, #4]
 80029ca:	6083      	str	r3, [r0, #8]
 80029cc:	8181      	strh	r1, [r0, #12]
 80029ce:	6643      	str	r3, [r0, #100]	; 0x64
 80029d0:	81c2      	strh	r2, [r0, #14]
 80029d2:	6103      	str	r3, [r0, #16]
 80029d4:	6143      	str	r3, [r0, #20]
 80029d6:	6183      	str	r3, [r0, #24]
 80029d8:	4619      	mov	r1, r3
 80029da:	2208      	movs	r2, #8
 80029dc:	305c      	adds	r0, #92	; 0x5c
 80029de:	f7ff fe79 	bl	80026d4 <memset>
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <std.isra.0+0x38>)
 80029e4:	6224      	str	r4, [r4, #32]
 80029e6:	6263      	str	r3, [r4, #36]	; 0x24
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <std.isra.0+0x3c>)
 80029ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80029ec:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <std.isra.0+0x40>)
 80029ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <std.isra.0+0x44>)
 80029f2:	6323      	str	r3, [r4, #48]	; 0x30
 80029f4:	bd10      	pop	{r4, pc}
 80029f6:	bf00      	nop
 80029f8:	08002d15 	.word	0x08002d15
 80029fc:	08002d37 	.word	0x08002d37
 8002a00:	08002d6f 	.word	0x08002d6f
 8002a04:	08002d93 	.word	0x08002d93

08002a08 <__sfmoreglue>:
 8002a08:	b570      	push	{r4, r5, r6, lr}
 8002a0a:	2568      	movs	r5, #104	; 0x68
 8002a0c:	1e4a      	subs	r2, r1, #1
 8002a0e:	4355      	muls	r5, r2
 8002a10:	460e      	mov	r6, r1
 8002a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a16:	f000 f90f 	bl	8002c38 <_malloc_r>
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	b140      	cbz	r0, 8002a30 <__sfmoreglue+0x28>
 8002a1e:	2100      	movs	r1, #0
 8002a20:	e880 0042 	stmia.w	r0, {r1, r6}
 8002a24:	300c      	adds	r0, #12
 8002a26:	60a0      	str	r0, [r4, #8]
 8002a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a2c:	f7ff fe52 	bl	80026d4 <memset>
 8002a30:	4620      	mov	r0, r4
 8002a32:	bd70      	pop	{r4, r5, r6, pc}

08002a34 <__sinit>:
 8002a34:	6983      	ldr	r3, [r0, #24]
 8002a36:	b510      	push	{r4, lr}
 8002a38:	4604      	mov	r4, r0
 8002a3a:	bb33      	cbnz	r3, 8002a8a <__sinit+0x56>
 8002a3c:	6483      	str	r3, [r0, #72]	; 0x48
 8002a3e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002a40:	6503      	str	r3, [r0, #80]	; 0x50
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <__sinit+0x58>)
 8002a44:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <__sinit+0x5c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6282      	str	r2, [r0, #40]	; 0x28
 8002a4a:	4298      	cmp	r0, r3
 8002a4c:	bf04      	itt	eq
 8002a4e:	2301      	moveq	r3, #1
 8002a50:	6183      	streq	r3, [r0, #24]
 8002a52:	f000 f81f 	bl	8002a94 <__sfp>
 8002a56:	6060      	str	r0, [r4, #4]
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f000 f81b 	bl	8002a94 <__sfp>
 8002a5e:	60a0      	str	r0, [r4, #8]
 8002a60:	4620      	mov	r0, r4
 8002a62:	f000 f817 	bl	8002a94 <__sfp>
 8002a66:	2200      	movs	r2, #0
 8002a68:	60e0      	str	r0, [r4, #12]
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	6860      	ldr	r0, [r4, #4]
 8002a6e:	f7ff ffa7 	bl	80029c0 <std.isra.0>
 8002a72:	2201      	movs	r2, #1
 8002a74:	2109      	movs	r1, #9
 8002a76:	68a0      	ldr	r0, [r4, #8]
 8002a78:	f7ff ffa2 	bl	80029c0 <std.isra.0>
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	2112      	movs	r1, #18
 8002a80:	68e0      	ldr	r0, [r4, #12]
 8002a82:	f7ff ff9d 	bl	80029c0 <std.isra.0>
 8002a86:	2301      	movs	r3, #1
 8002a88:	61a3      	str	r3, [r4, #24]
 8002a8a:	bd10      	pop	{r4, pc}
 8002a8c:	08002ecc 	.word	0x08002ecc
 8002a90:	080029b5 	.word	0x080029b5

08002a94 <__sfp>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <__sfp+0x74>)
 8002a98:	4607      	mov	r7, r0
 8002a9a:	681e      	ldr	r6, [r3, #0]
 8002a9c:	69b3      	ldr	r3, [r6, #24]
 8002a9e:	b913      	cbnz	r3, 8002aa6 <__sfp+0x12>
 8002aa0:	4630      	mov	r0, r6
 8002aa2:	f7ff ffc7 	bl	8002a34 <__sinit>
 8002aa6:	3648      	adds	r6, #72	; 0x48
 8002aa8:	68b4      	ldr	r4, [r6, #8]
 8002aaa:	6873      	ldr	r3, [r6, #4]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	d503      	bpl.n	8002ab8 <__sfp+0x24>
 8002ab0:	6833      	ldr	r3, [r6, #0]
 8002ab2:	b133      	cbz	r3, 8002ac2 <__sfp+0x2e>
 8002ab4:	6836      	ldr	r6, [r6, #0]
 8002ab6:	e7f7      	b.n	8002aa8 <__sfp+0x14>
 8002ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002abc:	b16d      	cbz	r5, 8002ada <__sfp+0x46>
 8002abe:	3468      	adds	r4, #104	; 0x68
 8002ac0:	e7f4      	b.n	8002aac <__sfp+0x18>
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	4638      	mov	r0, r7
 8002ac6:	f7ff ff9f 	bl	8002a08 <__sfmoreglue>
 8002aca:	6030      	str	r0, [r6, #0]
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d1f1      	bne.n	8002ab4 <__sfp+0x20>
 8002ad0:	230c      	movs	r3, #12
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ade:	81e3      	strh	r3, [r4, #14]
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	6665      	str	r5, [r4, #100]	; 0x64
 8002ae4:	81a3      	strh	r3, [r4, #12]
 8002ae6:	6025      	str	r5, [r4, #0]
 8002ae8:	60a5      	str	r5, [r4, #8]
 8002aea:	6065      	str	r5, [r4, #4]
 8002aec:	6125      	str	r5, [r4, #16]
 8002aee:	6165      	str	r5, [r4, #20]
 8002af0:	61a5      	str	r5, [r4, #24]
 8002af2:	2208      	movs	r2, #8
 8002af4:	4629      	mov	r1, r5
 8002af6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002afa:	f7ff fdeb 	bl	80026d4 <memset>
 8002afe:	6365      	str	r5, [r4, #52]	; 0x34
 8002b00:	63a5      	str	r5, [r4, #56]	; 0x38
 8002b02:	64a5      	str	r5, [r4, #72]	; 0x48
 8002b04:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002b06:	e7e6      	b.n	8002ad6 <__sfp+0x42>
 8002b08:	08002ecc 	.word	0x08002ecc

08002b0c <_fwalk_reent>:
 8002b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b10:	4680      	mov	r8, r0
 8002b12:	4689      	mov	r9, r1
 8002b14:	2600      	movs	r6, #0
 8002b16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b1a:	b914      	cbnz	r4, 8002b22 <_fwalk_reent+0x16>
 8002b1c:	4630      	mov	r0, r6
 8002b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b22:	68a5      	ldr	r5, [r4, #8]
 8002b24:	6867      	ldr	r7, [r4, #4]
 8002b26:	3f01      	subs	r7, #1
 8002b28:	d501      	bpl.n	8002b2e <_fwalk_reent+0x22>
 8002b2a:	6824      	ldr	r4, [r4, #0]
 8002b2c:	e7f5      	b.n	8002b1a <_fwalk_reent+0xe>
 8002b2e:	89ab      	ldrh	r3, [r5, #12]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d907      	bls.n	8002b44 <_fwalk_reent+0x38>
 8002b34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	d003      	beq.n	8002b44 <_fwalk_reent+0x38>
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	4640      	mov	r0, r8
 8002b40:	47c8      	blx	r9
 8002b42:	4306      	orrs	r6, r0
 8002b44:	3568      	adds	r5, #104	; 0x68
 8002b46:	e7ee      	b.n	8002b26 <_fwalk_reent+0x1a>

08002b48 <__swhatbuf_r>:
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	460e      	mov	r6, r1
 8002b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b50:	b090      	sub	sp, #64	; 0x40
 8002b52:	2900      	cmp	r1, #0
 8002b54:	4614      	mov	r4, r2
 8002b56:	461d      	mov	r5, r3
 8002b58:	da07      	bge.n	8002b6a <__swhatbuf_r+0x22>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	602b      	str	r3, [r5, #0]
 8002b5e:	89b3      	ldrh	r3, [r6, #12]
 8002b60:	061a      	lsls	r2, r3, #24
 8002b62:	d410      	bmi.n	8002b86 <__swhatbuf_r+0x3e>
 8002b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b68:	e00e      	b.n	8002b88 <__swhatbuf_r+0x40>
 8002b6a:	aa01      	add	r2, sp, #4
 8002b6c:	f000 f938 	bl	8002de0 <_fstat_r>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	dbf2      	blt.n	8002b5a <__swhatbuf_r+0x12>
 8002b74:	9a02      	ldr	r2, [sp, #8]
 8002b76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b7e:	425a      	negs	r2, r3
 8002b80:	415a      	adcs	r2, r3
 8002b82:	602a      	str	r2, [r5, #0]
 8002b84:	e7ee      	b.n	8002b64 <__swhatbuf_r+0x1c>
 8002b86:	2340      	movs	r3, #64	; 0x40
 8002b88:	2000      	movs	r0, #0
 8002b8a:	6023      	str	r3, [r4, #0]
 8002b8c:	b010      	add	sp, #64	; 0x40
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}

08002b90 <malloc>:
 8002b90:	4b02      	ldr	r3, [pc, #8]	; (8002b9c <malloc+0xc>)
 8002b92:	4601      	mov	r1, r0
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	f000 b84f 	b.w	8002c38 <_malloc_r>
 8002b9a:	bf00      	nop
 8002b9c:	20000014 	.word	0x20000014

08002ba0 <_free_r>:
 8002ba0:	b538      	push	{r3, r4, r5, lr}
 8002ba2:	4605      	mov	r5, r0
 8002ba4:	2900      	cmp	r1, #0
 8002ba6:	d043      	beq.n	8002c30 <_free_r+0x90>
 8002ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bac:	1f0c      	subs	r4, r1, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bfb8      	it	lt
 8002bb2:	18e4      	addlt	r4, r4, r3
 8002bb4:	f000 f938 	bl	8002e28 <__malloc_lock>
 8002bb8:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <_free_r+0x94>)
 8002bba:	6813      	ldr	r3, [r2, #0]
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	b933      	cbnz	r3, 8002bce <_free_r+0x2e>
 8002bc0:	6063      	str	r3, [r4, #4]
 8002bc2:	6014      	str	r4, [r2, #0]
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bca:	f000 b92e 	b.w	8002e2a <__malloc_unlock>
 8002bce:	42a3      	cmp	r3, r4
 8002bd0:	d90b      	bls.n	8002bea <_free_r+0x4a>
 8002bd2:	6821      	ldr	r1, [r4, #0]
 8002bd4:	1862      	adds	r2, r4, r1
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	bf01      	itttt	eq
 8002bda:	681a      	ldreq	r2, [r3, #0]
 8002bdc:	685b      	ldreq	r3, [r3, #4]
 8002bde:	1852      	addeq	r2, r2, r1
 8002be0:	6022      	streq	r2, [r4, #0]
 8002be2:	6063      	str	r3, [r4, #4]
 8002be4:	6004      	str	r4, [r0, #0]
 8002be6:	e7ed      	b.n	8002bc4 <_free_r+0x24>
 8002be8:	4613      	mov	r3, r2
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	b10a      	cbz	r2, 8002bf2 <_free_r+0x52>
 8002bee:	42a2      	cmp	r2, r4
 8002bf0:	d9fa      	bls.n	8002be8 <_free_r+0x48>
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	1858      	adds	r0, r3, r1
 8002bf6:	42a0      	cmp	r0, r4
 8002bf8:	d10b      	bne.n	8002c12 <_free_r+0x72>
 8002bfa:	6820      	ldr	r0, [r4, #0]
 8002bfc:	4401      	add	r1, r0
 8002bfe:	1858      	adds	r0, r3, r1
 8002c00:	4282      	cmp	r2, r0
 8002c02:	6019      	str	r1, [r3, #0]
 8002c04:	d1de      	bne.n	8002bc4 <_free_r+0x24>
 8002c06:	6810      	ldr	r0, [r2, #0]
 8002c08:	6852      	ldr	r2, [r2, #4]
 8002c0a:	4401      	add	r1, r0
 8002c0c:	6019      	str	r1, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	e7d8      	b.n	8002bc4 <_free_r+0x24>
 8002c12:	d902      	bls.n	8002c1a <_free_r+0x7a>
 8002c14:	230c      	movs	r3, #12
 8002c16:	602b      	str	r3, [r5, #0]
 8002c18:	e7d4      	b.n	8002bc4 <_free_r+0x24>
 8002c1a:	6820      	ldr	r0, [r4, #0]
 8002c1c:	1821      	adds	r1, r4, r0
 8002c1e:	428a      	cmp	r2, r1
 8002c20:	bf01      	itttt	eq
 8002c22:	6811      	ldreq	r1, [r2, #0]
 8002c24:	6852      	ldreq	r2, [r2, #4]
 8002c26:	1809      	addeq	r1, r1, r0
 8002c28:	6021      	streq	r1, [r4, #0]
 8002c2a:	6062      	str	r2, [r4, #4]
 8002c2c:	605c      	str	r4, [r3, #4]
 8002c2e:	e7c9      	b.n	8002bc4 <_free_r+0x24>
 8002c30:	bd38      	pop	{r3, r4, r5, pc}
 8002c32:	bf00      	nop
 8002c34:	20000098 	.word	0x20000098

08002c38 <_malloc_r>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	1ccd      	adds	r5, r1, #3
 8002c3c:	f025 0503 	bic.w	r5, r5, #3
 8002c40:	3508      	adds	r5, #8
 8002c42:	2d0c      	cmp	r5, #12
 8002c44:	bf38      	it	cc
 8002c46:	250c      	movcc	r5, #12
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	4606      	mov	r6, r0
 8002c4c:	db01      	blt.n	8002c52 <_malloc_r+0x1a>
 8002c4e:	42a9      	cmp	r1, r5
 8002c50:	d903      	bls.n	8002c5a <_malloc_r+0x22>
 8002c52:	230c      	movs	r3, #12
 8002c54:	6033      	str	r3, [r6, #0]
 8002c56:	2000      	movs	r0, #0
 8002c58:	bd70      	pop	{r4, r5, r6, pc}
 8002c5a:	f000 f8e5 	bl	8002e28 <__malloc_lock>
 8002c5e:	4a23      	ldr	r2, [pc, #140]	; (8002cec <_malloc_r+0xb4>)
 8002c60:	6814      	ldr	r4, [r2, #0]
 8002c62:	4621      	mov	r1, r4
 8002c64:	b991      	cbnz	r1, 8002c8c <_malloc_r+0x54>
 8002c66:	4c22      	ldr	r4, [pc, #136]	; (8002cf0 <_malloc_r+0xb8>)
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	b91b      	cbnz	r3, 8002c74 <_malloc_r+0x3c>
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	f000 f841 	bl	8002cf4 <_sbrk_r>
 8002c72:	6020      	str	r0, [r4, #0]
 8002c74:	4629      	mov	r1, r5
 8002c76:	4630      	mov	r0, r6
 8002c78:	f000 f83c 	bl	8002cf4 <_sbrk_r>
 8002c7c:	1c43      	adds	r3, r0, #1
 8002c7e:	d126      	bne.n	8002cce <_malloc_r+0x96>
 8002c80:	230c      	movs	r3, #12
 8002c82:	4630      	mov	r0, r6
 8002c84:	6033      	str	r3, [r6, #0]
 8002c86:	f000 f8d0 	bl	8002e2a <__malloc_unlock>
 8002c8a:	e7e4      	b.n	8002c56 <_malloc_r+0x1e>
 8002c8c:	680b      	ldr	r3, [r1, #0]
 8002c8e:	1b5b      	subs	r3, r3, r5
 8002c90:	d41a      	bmi.n	8002cc8 <_malloc_r+0x90>
 8002c92:	2b0b      	cmp	r3, #11
 8002c94:	d90f      	bls.n	8002cb6 <_malloc_r+0x7e>
 8002c96:	600b      	str	r3, [r1, #0]
 8002c98:	18cc      	adds	r4, r1, r3
 8002c9a:	50cd      	str	r5, [r1, r3]
 8002c9c:	4630      	mov	r0, r6
 8002c9e:	f000 f8c4 	bl	8002e2a <__malloc_unlock>
 8002ca2:	f104 000b 	add.w	r0, r4, #11
 8002ca6:	1d23      	adds	r3, r4, #4
 8002ca8:	f020 0007 	bic.w	r0, r0, #7
 8002cac:	1ac3      	subs	r3, r0, r3
 8002cae:	d01b      	beq.n	8002ce8 <_malloc_r+0xb0>
 8002cb0:	425a      	negs	r2, r3
 8002cb2:	50e2      	str	r2, [r4, r3]
 8002cb4:	bd70      	pop	{r4, r5, r6, pc}
 8002cb6:	428c      	cmp	r4, r1
 8002cb8:	bf0b      	itete	eq
 8002cba:	6863      	ldreq	r3, [r4, #4]
 8002cbc:	684b      	ldrne	r3, [r1, #4]
 8002cbe:	6013      	streq	r3, [r2, #0]
 8002cc0:	6063      	strne	r3, [r4, #4]
 8002cc2:	bf18      	it	ne
 8002cc4:	460c      	movne	r4, r1
 8002cc6:	e7e9      	b.n	8002c9c <_malloc_r+0x64>
 8002cc8:	460c      	mov	r4, r1
 8002cca:	6849      	ldr	r1, [r1, #4]
 8002ccc:	e7ca      	b.n	8002c64 <_malloc_r+0x2c>
 8002cce:	1cc4      	adds	r4, r0, #3
 8002cd0:	f024 0403 	bic.w	r4, r4, #3
 8002cd4:	42a0      	cmp	r0, r4
 8002cd6:	d005      	beq.n	8002ce4 <_malloc_r+0xac>
 8002cd8:	1a21      	subs	r1, r4, r0
 8002cda:	4630      	mov	r0, r6
 8002cdc:	f000 f80a 	bl	8002cf4 <_sbrk_r>
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	d0cd      	beq.n	8002c80 <_malloc_r+0x48>
 8002ce4:	6025      	str	r5, [r4, #0]
 8002ce6:	e7d9      	b.n	8002c9c <_malloc_r+0x64>
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
 8002cea:	bf00      	nop
 8002cec:	20000098 	.word	0x20000098
 8002cf0:	2000009c 	.word	0x2000009c

08002cf4 <_sbrk_r>:
 8002cf4:	b538      	push	{r3, r4, r5, lr}
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	4c05      	ldr	r4, [pc, #20]	; (8002d10 <_sbrk_r+0x1c>)
 8002cfa:	4605      	mov	r5, r0
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	6023      	str	r3, [r4, #0]
 8002d00:	f7ff fa00 	bl	8002104 <_sbrk>
 8002d04:	1c43      	adds	r3, r0, #1
 8002d06:	d102      	bne.n	8002d0e <_sbrk_r+0x1a>
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	b103      	cbz	r3, 8002d0e <_sbrk_r+0x1a>
 8002d0c:	602b      	str	r3, [r5, #0]
 8002d0e:	bd38      	pop	{r3, r4, r5, pc}
 8002d10:	20000298 	.word	0x20000298

08002d14 <__sread>:
 8002d14:	b510      	push	{r4, lr}
 8002d16:	460c      	mov	r4, r1
 8002d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d1c:	f000 f886 	bl	8002e2c <_read_r>
 8002d20:	2800      	cmp	r0, #0
 8002d22:	bfab      	itete	ge
 8002d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d26:	89a3      	ldrhlt	r3, [r4, #12]
 8002d28:	181b      	addge	r3, r3, r0
 8002d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d2e:	bfac      	ite	ge
 8002d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d32:	81a3      	strhlt	r3, [r4, #12]
 8002d34:	bd10      	pop	{r4, pc}

08002d36 <__swrite>:
 8002d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d3a:	461f      	mov	r7, r3
 8002d3c:	898b      	ldrh	r3, [r1, #12]
 8002d3e:	4605      	mov	r5, r0
 8002d40:	05db      	lsls	r3, r3, #23
 8002d42:	460c      	mov	r4, r1
 8002d44:	4616      	mov	r6, r2
 8002d46:	d505      	bpl.n	8002d54 <__swrite+0x1e>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d50:	f000 f858 	bl	8002e04 <_lseek_r>
 8002d54:	89a3      	ldrh	r3, [r4, #12]
 8002d56:	4632      	mov	r2, r6
 8002d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d5c:	81a3      	strh	r3, [r4, #12]
 8002d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d62:	463b      	mov	r3, r7
 8002d64:	4628      	mov	r0, r5
 8002d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6a:	f000 b817 	b.w	8002d9c <_write_r>

08002d6e <__sseek>:
 8002d6e:	b510      	push	{r4, lr}
 8002d70:	460c      	mov	r4, r1
 8002d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d76:	f000 f845 	bl	8002e04 <_lseek_r>
 8002d7a:	1c43      	adds	r3, r0, #1
 8002d7c:	89a3      	ldrh	r3, [r4, #12]
 8002d7e:	bf15      	itete	ne
 8002d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d8a:	81a3      	strheq	r3, [r4, #12]
 8002d8c:	bf18      	it	ne
 8002d8e:	81a3      	strhne	r3, [r4, #12]
 8002d90:	bd10      	pop	{r4, pc}

08002d92 <__sclose>:
 8002d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d96:	f000 b813 	b.w	8002dc0 <_close_r>
	...

08002d9c <_write_r>:
 8002d9c:	b538      	push	{r3, r4, r5, lr}
 8002d9e:	4605      	mov	r5, r0
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	2200      	movs	r2, #0
 8002da6:	4c05      	ldr	r4, [pc, #20]	; (8002dbc <_write_r+0x20>)
 8002da8:	6022      	str	r2, [r4, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f7ff f99c 	bl	80020e8 <_write>
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	d102      	bne.n	8002dba <_write_r+0x1e>
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	b103      	cbz	r3, 8002dba <_write_r+0x1e>
 8002db8:	602b      	str	r3, [r5, #0]
 8002dba:	bd38      	pop	{r3, r4, r5, pc}
 8002dbc:	20000298 	.word	0x20000298

08002dc0 <_close_r>:
 8002dc0:	b538      	push	{r3, r4, r5, lr}
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	4c05      	ldr	r4, [pc, #20]	; (8002ddc <_close_r+0x1c>)
 8002dc6:	4605      	mov	r5, r0
 8002dc8:	4608      	mov	r0, r1
 8002dca:	6023      	str	r3, [r4, #0]
 8002dcc:	f7ff f9b4 	bl	8002138 <_close>
 8002dd0:	1c43      	adds	r3, r0, #1
 8002dd2:	d102      	bne.n	8002dda <_close_r+0x1a>
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	b103      	cbz	r3, 8002dda <_close_r+0x1a>
 8002dd8:	602b      	str	r3, [r5, #0]
 8002dda:	bd38      	pop	{r3, r4, r5, pc}
 8002ddc:	20000298 	.word	0x20000298

08002de0 <_fstat_r>:
 8002de0:	b538      	push	{r3, r4, r5, lr}
 8002de2:	2300      	movs	r3, #0
 8002de4:	4c06      	ldr	r4, [pc, #24]	; (8002e00 <_fstat_r+0x20>)
 8002de6:	4605      	mov	r5, r0
 8002de8:	4608      	mov	r0, r1
 8002dea:	4611      	mov	r1, r2
 8002dec:	6023      	str	r3, [r4, #0]
 8002dee:	f7ff f9a6 	bl	800213e <_fstat>
 8002df2:	1c43      	adds	r3, r0, #1
 8002df4:	d102      	bne.n	8002dfc <_fstat_r+0x1c>
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	b103      	cbz	r3, 8002dfc <_fstat_r+0x1c>
 8002dfa:	602b      	str	r3, [r5, #0]
 8002dfc:	bd38      	pop	{r3, r4, r5, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000298 	.word	0x20000298

08002e04 <_lseek_r>:
 8002e04:	b538      	push	{r3, r4, r5, lr}
 8002e06:	4605      	mov	r5, r0
 8002e08:	4608      	mov	r0, r1
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4c05      	ldr	r4, [pc, #20]	; (8002e24 <_lseek_r+0x20>)
 8002e10:	6022      	str	r2, [r4, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f7ff f998 	bl	8002148 <_lseek>
 8002e18:	1c43      	adds	r3, r0, #1
 8002e1a:	d102      	bne.n	8002e22 <_lseek_r+0x1e>
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	b103      	cbz	r3, 8002e22 <_lseek_r+0x1e>
 8002e20:	602b      	str	r3, [r5, #0]
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	20000298 	.word	0x20000298

08002e28 <__malloc_lock>:
 8002e28:	4770      	bx	lr

08002e2a <__malloc_unlock>:
 8002e2a:	4770      	bx	lr

08002e2c <_read_r>:
 8002e2c:	b538      	push	{r3, r4, r5, lr}
 8002e2e:	4605      	mov	r5, r0
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	2200      	movs	r2, #0
 8002e36:	4c05      	ldr	r4, [pc, #20]	; (8002e4c <_read_r+0x20>)
 8002e38:	6022      	str	r2, [r4, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f7ff f946 	bl	80020cc <_read>
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d102      	bne.n	8002e4a <_read_r+0x1e>
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	b103      	cbz	r3, 8002e4a <_read_r+0x1e>
 8002e48:	602b      	str	r3, [r5, #0]
 8002e4a:	bd38      	pop	{r3, r4, r5, pc}
 8002e4c:	20000298 	.word	0x20000298

08002e50 <_init>:
 8002e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e52:	bf00      	nop
 8002e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e56:	bc08      	pop	{r3}
 8002e58:	469e      	mov	lr, r3
 8002e5a:	4770      	bx	lr

08002e5c <_fini>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr
